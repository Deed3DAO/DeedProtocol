{
  "address": "0x5F544cbeE8Fdb8de7730A1352136a700080D1828",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_leaseNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_deedNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_subdivisionNFT",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundsManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_accessManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "lesseeList",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "rentAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "paid",
                  "type": "bool"
                }
              ],
              "internalType": "struct LeaseAgreement.Deposit",
              "name": "securityDeposit",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "latePaymentFee",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "gracePeriod",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rentDueDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "distributableDate",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LeaseAgreement.LeaseDates",
              "name": "dates",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "extensionCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deedId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "managerPercentage",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "unclaimedRentAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isArchived",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct LeaseAgreement.Lease",
          "name": "lease",
          "type": "tuple"
        }
      ],
      "name": "LeaseCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LeaseDepositSubmited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDueDate",
          "type": "uint256"
        }
      ],
      "name": "LeaseDueDateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extensionCount",
          "type": "uint256"
        }
      ],
      "name": "LeaseExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fundsManager",
          "type": "address"
        }
      ],
      "name": "LeaseFundsManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentage",
          "type": "uint256"
        }
      ],
      "name": "LeaseManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        }
      ],
      "name": "LeaseManagerUnset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unclaimedRentAmount",
          "type": "uint256"
        }
      ],
      "name": "LeasePaymentMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymentToken",
          "type": "address"
        }
      ],
      "name": "LeasePaymentTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lessorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "distributableDate",
          "type": "uint256"
        }
      ],
      "name": "LeaseRentDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leaseId",
          "type": "uint256"
        }
      ],
      "name": "LeaseTerminated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "burnLease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "calculateRentPaymentInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "unpaidMonths",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "rentDueDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct LeaseAgreement.RentPaymentInfo",
          "name": "rentInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_lesseeList",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_securityDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deedId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_latePaymentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_gracePeriod",
          "type": "uint32"
        }
      ],
      "name": "createLease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deedNFT",
      "outputs": [
        {
          "internalType": "contract DeedNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "distributeRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_extensionPeriod",
          "type": "uint256"
        }
      ],
      "name": "extendLease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundsManager",
      "outputs": [
        {
          "internalType": "contract FundsManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "getLesseeList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasValidatorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaseCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaseNFT",
      "outputs": [
        {
          "internalType": "contract LeaseNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "leases",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rentAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            }
          ],
          "internalType": "struct LeaseAgreement.Deposit",
          "name": "securityDeposit",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "latePaymentFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "gracePeriod",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rentDueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributableDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct LeaseAgreement.LeaseDates",
          "name": "dates",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "extensionCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deedId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "managerPercentage",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "unclaimedRentAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isArchived",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "payRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newDueDate",
          "type": "uint256"
        }
      ],
      "name": "setDueDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundsManager",
          "type": "address"
        }
      ],
      "name": "setFundsManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_percentage",
          "type": "uint8"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subdivisionNFT",
      "outputs": [
        {
          "internalType": "contract SubdivisionNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "submitDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "terminateLease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_newLesseeList",
          "type": "address[]"
        }
      ],
      "name": "transferLease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "unsetManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leaseId",
          "type": "uint256"
        }
      ],
      "name": "withdrawDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbe6f23875372f5348c68000c7260c70509a417bc612a57acc0c10647ba565ad1",
  "receipt": {
    "to": null,
    "from": "0x91B0d67D3F47A30FBEeB159E67209Ad6cb2cE22E",
    "contractAddress": "0x5F544cbeE8Fdb8de7730A1352136a700080D1828",
    "transactionIndex": 73,
    "gasUsed": "2758790",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000090000000000000000000040000000000000000000000000000000000000000000000000000000000000000000020080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010400000000000080000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7c4edd962ef4551880444e4bc0e75679d501b4ca9404f40c88cd561e62719430",
    "transactionHash": "0xbe6f23875372f5348c68000c7260c70509a417bc612a57acc0c10647ba565ad1",
    "logs": [
      {
        "transactionIndex": 73,
        "blockNumber": 5034806,
        "transactionHash": "0xbe6f23875372f5348c68000c7260c70509a417bc612a57acc0c10647ba565ad1",
        "address": "0x5F544cbeE8Fdb8de7730A1352136a700080D1828",
        "topics": [
          "0xf316d79ea0865efd761a7a55594999c1d875d637946382fe22c8054d0fd76738"
        ],
        "data": "0x0000000000000000000000002d467a24095b262787f58ce97d9b130ce7232b57",
        "logIndex": 88,
        "blockHash": "0x7c4edd962ef4551880444e4bc0e75679d501b4ca9404f40c88cd561e62719430"
      },
      {
        "transactionIndex": 73,
        "blockNumber": 5034806,
        "transactionHash": "0xbe6f23875372f5348c68000c7260c70509a417bc612a57acc0c10647ba565ad1",
        "address": "0x5F544cbeE8Fdb8de7730A1352136a700080D1828",
        "topics": [
          "0xb0c676f9d7afa1a44d28b367dc30782ead78d7f8679914a2ba86d8565e6ba4d1"
        ],
        "data": "0x00000000000000000000000051d2f339404e431831315cb3a52533370032f954",
        "logIndex": 89,
        "blockHash": "0x7c4edd962ef4551880444e4bc0e75679d501b4ca9404f40c88cd561e62719430"
      }
    ],
    "blockNumber": 5034806,
    "cumulativeGasUsed": "8887326",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCC82d565D99a238e97D85f18ed55A0671aBE2981",
    "0x2d467a24095B262787f58ce97d9B130ce7232B57",
    "0xF462BcA1e685337feAA4Cd6C3710c7fc535DAAF3",
    "0xb53cf6D852722b8c59330B0167AEbCD30763f6Ea",
    "0x51D2F339404E431831315Cb3A52533370032F954",
    "0xCD4e41B590F3052F9420D69842FCe4ce4E83a797"
  ],
  "numDeployments": 1,
  "solcInputHash": "9a595a16aee481b19c9cc69826d97edc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_leaseNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deedNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subdivisionNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundsManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accessManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"lesseeList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"rentAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"internalType\":\"struct LeaseAgreement.Deposit\",\"name\":\"securityDeposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"latePaymentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"gracePeriod\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentDueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributableDate\",\"type\":\"uint256\"}],\"internalType\":\"struct LeaseAgreement.LeaseDates\",\"name\":\"dates\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"extensionCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"managerPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isArchived\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct LeaseAgreement.Lease\",\"name\":\"lease\",\"type\":\"tuple\"}],\"name\":\"LeaseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LeaseDepositSubmited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDueDate\",\"type\":\"uint256\"}],\"name\":\"LeaseDueDateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extensionCount\",\"type\":\"uint256\"}],\"name\":\"LeaseExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundsManager\",\"type\":\"address\"}],\"name\":\"LeaseFundsManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"LeaseManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"}],\"name\":\"LeaseManagerUnset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedRentAmount\",\"type\":\"uint256\"}],\"name\":\"LeasePaymentMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"LeasePaymentTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lessorAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributableDate\",\"type\":\"uint256\"}],\"name\":\"LeaseRentDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leaseId\",\"type\":\"uint256\"}],\"name\":\"LeaseTerminated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"burnLease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"calculateRentPaymentInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"unpaidMonths\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"rentDueDate\",\"type\":\"uint256\"}],\"internalType\":\"struct LeaseAgreement.RentPaymentInfo\",\"name\":\"rentInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lesseeList\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_securityDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_latePaymentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_gracePeriod\",\"type\":\"uint32\"}],\"name\":\"createLease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deedNFT\",\"outputs\":[{\"internalType\":\"contract DeedNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"distributeRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extensionPeriod\",\"type\":\"uint256\"}],\"name\":\"extendLease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsManager\",\"outputs\":[{\"internalType\":\"contract FundsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"getLesseeList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasValidatorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaseCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaseNFT\",\"outputs\":[{\"internalType\":\"contract LeaseNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rentAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"internalType\":\"struct LeaseAgreement.Deposit\",\"name\":\"securityDeposit\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"latePaymentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"gracePeriod\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rentDueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributableDate\",\"type\":\"uint256\"}],\"internalType\":\"struct LeaseAgreement.LeaseDates\",\"name\":\"dates\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"extensionCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"managerPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRentAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isArchived\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"payRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDueDate\",\"type\":\"uint256\"}],\"name\":\"setDueDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundsManager\",\"type\":\"address\"}],\"name\":\"setFundsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_percentage\",\"type\":\"uint8\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subdivisionNFT\",\"outputs\":[{\"internalType\":\"contract SubdivisionNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"submitDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"terminateLease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_newLesseeList\",\"type\":\"address[]\"}],\"name\":\"transferLease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"unsetManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leaseId\",\"type\":\"uint256\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeaseAgreement.sol\":\"LeaseAgreement\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/AccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract AccessManager is AccessControl {\\r\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\r\\n    bytes32 public constant AGENT_ROLE = keccak256(\\\"AGENT_ROLE\\\");\\r\\n\\r\\n    constructor(address admin) {\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     * @param _functionSig The signature of the function to be called\\r\\n     */\\r\\n    modifier functionRoleOrAdmin(bytes32 _functionSig) {\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) || hasRole(_functionSig, _msgSender()),\\r\\n            \\\"[AccessManagement] Only the Admin or function granted user can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a validator to the contract\\r\\n     */\\r\\n    function addValidator(address _validator) public functionRoleOrAdmin(this.addValidator.selector) {\\r\\n        _grantRole(VALIDATOR_ROLE, _validator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a validator from the contract\\r\\n     */\\r\\n    function removeValidator(address _validator) public functionRoleOrAdmin(this.removeValidator.selector) {\\r\\n        _revokeRole(VALIDATOR_ROLE, _validator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has the admin role\\r\\n     */\\r\\n    function hasAdminRole(address _address) public view returns (bool) {\\r\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has the validator role\\r\\n     * @param _address The address to check\\r\\n     */\\r\\n    function hasValidatorRole(address _address) public view returns (bool) {\\r\\n        return hasRole(VALIDATOR_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(AccessControl) returns (bool) {\\r\\n        return super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract AccessManagerBase is Context {\\r\\n    AccessManager accessManager;\\r\\n\\r\\n    constructor(address _accessManager) {\\r\\n        accessManager = AccessManager(_accessManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to admin only\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.DEFAULT_ADMIN_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the admin can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to validator only\\r\\n     */\\r\\n    modifier onlyValidator() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.VALIDATOR_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the validator can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to validator only\\r\\n     */\\r\\n    modifier onlyAgent() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.AGENT_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the agent can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     */\\r\\n    modifier onlyRole(bytes32 _role) {\\r\\n        require(accessManager.hasRole(_role, _msgSender()), \\\"[AccessManager] Only the validator can interact\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     * @param _functionSig The signature of the function to be called\\r\\n     */\\r\\n    modifier functionRoleOrAdmin(bytes32 _functionSig) {\\r\\n        require(\\r\\n            hasRole(accessManager.DEFAULT_ADMIN_ROLE(), _msgSender()) || hasRole(_functionSig, _msgSender()),\\r\\n            \\\"[AccessManagement] Only the Admin or function granted user can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function hasAdminRole() public view returns (bool) {\\r\\n        return accessManager.hasAdminRole(_msgSender());\\r\\n    }\\r\\n\\r\\n    function hasValidatorRole() public view returns (bool) {\\r\\n        return accessManager.hasValidatorRole(_msgSender());\\r\\n    }\\r\\n\\r\\n    function hasRole(bytes32 _role, address _address) public view returns (bool) {\\r\\n        return accessManager.hasRole(_role, _address);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5b2ca72fa86518264487c3ef31015a3fb9efa2e871723736611a2a41a28ec5ef\",\"license\":\"AGPL-3.0\"},\"contracts/DeedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"./AccessManager.sol\\\";\\r\\n\\r\\ncontract DeedNFT is ERC721, ERC721URIStorage, AccessManagerBase {\\r\\n    struct DeedInfo {\\r\\n        AssetType assetType;\\r\\n        bool isValidated;\\r\\n    }\\r\\n\\r\\n    uint256 public nextDeedId;\\r\\n    mapping(uint256 => DeedInfo) private deedInfoMap;\\r\\n\\r\\n    enum AssetType {\\r\\n        Land,\\r\\n        Vehicle,\\r\\n        Estate,\\r\\n        CommercialEquipment\\r\\n    }\\r\\n\\r\\n    event DeedNFTMinted(uint256 deedId, DeedInfo deedInfo, address minter);\\r\\n    event DeedNFTBurned(uint256 deedId);\\r\\n    event DeedNFTAssetValidationSet(uint256 deedId, bool isValid);\\r\\n    event DeedNFTIpfsDetailsSet(uint256 deedId, string newIpfsDetailsHash);\\r\\n    event DeedNFTAssetTypeSet(uint256 deedId, AssetType newAssetType);\\r\\n\\r\\n    constructor(address _accessManager) ERC721(\\\"DeedNFT\\\", \\\"DEED\\\") ERC721URIStorage() AccessManagerBase(_accessManager) {\\r\\n        nextDeedId = 1;\\r\\n    }\\r\\n\\r\\n    modifier deedExists(uint256 _deedId) {\\r\\n        require(\\r\\n            _ownerOf(_deedId) != address(0),\\r\\n            string.concat(\\\"[DeedNFT] Deed does not exist with id \\\", Strings.toString(_deedId))\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner(uint256 _deedId) {\\r\\n        require(\\r\\n            _msgSender() == _ownerOf(_deedId),\\r\\n            string.concat(\\\"[DeedNFT] Must be owner of the Deed with id \\\", Strings.toString(_deedId))\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mintAsset(address _owner, string memory _ipfsDetailsHash, AssetType _assetType) public returns (uint256) {\\r\\n        _mint(_owner, nextDeedId);\\r\\n\\r\\n        DeedInfo storage deedInfo = deedInfoMap[nextDeedId];\\r\\n        deedInfo.assetType = _assetType;\\r\\n        deedInfo.isValidated = false;\\r\\n        _setTokenURI(nextDeedId, _ipfsDetailsHash);\\r\\n        emit DeedNFTMinted(nextDeedId, deedInfo, _msgSender());\\r\\n        nextDeedId = nextDeedId + 1;\\r\\n        return nextDeedId;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _deedId) public onlyOwner(_deedId) {\\r\\n        _burn(_deedId);\\r\\n        emit DeedNFTBurned(_deedId);\\r\\n    }\\r\\n\\r\\n    function setAssetValidation(uint256 _deedId, bool _isValid) public onlyValidator {\\r\\n        require(_ownerOf(_deedId) != _msgSender(), \\\"[DeedNFT] Owner cannot validate their own asset\\\");\\r\\n        _setAssetValidation(_deedId, _isValid);\\r\\n    }\\r\\n\\r\\n    function setIpfsDetailsHash(\\r\\n        uint256 _deedId,\\r\\n        string memory _ipfsDetailsHash\\r\\n    ) public virtual deedExists(_deedId) onlyOwner(_deedId) {\\r\\n        _setTokenURI(_deedId, _ipfsDetailsHash);\\r\\n        _setAssetValidation(_deedId, false);\\r\\n        emit DeedNFTIpfsDetailsSet(_deedId, _ipfsDetailsHash);\\r\\n    }\\r\\n\\r\\n    function setAssetType(uint256 _deedId, AssetType _assetType) public deedExists(_deedId) onlyOwner(_deedId) {\\r\\n        DeedInfo storage deedInfo = deedInfoMap[_deedId];\\r\\n        deedInfo.assetType = _assetType;\\r\\n        _setAssetValidation(_deedId, false);\\r\\n        emit DeedNFTAssetTypeSet(_deedId, _assetType);\\r\\n    }\\r\\n\\r\\n    function getDeedInfo(uint256 _deedId) public view deedExists(_deedId) returns (DeedInfo memory) {\\r\\n        return deedInfoMap[_deedId];\\r\\n    }\\r\\n\\r\\n    function canSubdivide(uint256 _deedId) external view returns (bool) {\\r\\n        AssetType assetType = getDeedInfo(_deedId).assetType;\\r\\n        return assetType == AssetType.Land || assetType == AssetType.Estate;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 _interfaceId\\r\\n    ) public view virtual override(ERC721, ERC721URIStorage) returns (bool) {\\r\\n        return super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _deedId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\r\\n        return super.tokenURI(_deedId);\\r\\n    }\\r\\n\\r\\n    function _setAssetValidation(uint256 _deedId, bool _isValid) internal {\\r\\n        DeedInfo storage deedInfo = deedInfoMap[_deedId];\\r\\n        deedInfo.isValidated = _isValid;\\r\\n        emit DeedNFTAssetValidationSet(_deedId, _isValid);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x81aabc6acb3e37da0d54a8e92d01160beeaca04a5e2f6d2e4eb2b94784ca9a5b\",\"license\":\"AGPL-3.0\"},\"contracts/FundsManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./AccessManager.sol\\\";\\r\\n\\r\\ncontract FundsManager is Context, AccessManagerBase {\\r\\n    event FundsStored(uint256 id, IERC20 token, uint256 amount, address sender, address caller, uint256 newBalance);\\r\\n    event FundsWithdrawn(\\r\\n        uint256 id,\\r\\n        IERC20 token,\\r\\n        uint256 amount,\\r\\n        address destination,\\r\\n        address caller,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    // AccountOwner     ->    AccountId   ->  TokenAddress -> Amount\\r\\n    mapping(address => mapping(uint256 => mapping(address => uint256))) public accountsMapping;\\r\\n\\r\\n    constructor(address _accessManager) AccessManagerBase(_accessManager) {}\\r\\n\\r\\n    /**\\r\\n     * Get the balance of an account\\r\\n     * @param _id AccountId\\r\\n     * @param _token TokenAddress\\r\\n     * @return Balance\\r\\n     */\\r\\n    function balanceOf(uint256 _id, IERC20 _token) external view returns (uint256) {\\r\\n        return accountsMapping[_msgSender()][_id][address(_token)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Pull tokens from sender and store them in the contract\\r\\n     * @param _id AccountId\\r\\n     * @param _token TokenAddress\\r\\n     * @param _amount Amount\\r\\n     * @param _sender Witch address to pull tokens from\\r\\n     */\\r\\n    function store(uint256 _id, IERC20 _token, uint256 _amount, address _sender) external {\\r\\n        require(\\r\\n            _token.allowance(_sender, address(this)) >= _amount,\\r\\n            string.concat(\\r\\n                \\\"[Funds Manager] Not enough allowance for account \\\",\\r\\n                Strings.toString(_id),\\r\\n                \\\" and amount \\\",\\r\\n                Strings.toString(_amount)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        _token.transferFrom(_sender, address(this), _amount);\\r\\n        accountsMapping[_msgSender()][_id][address(_token)] += _amount;\\r\\n\\r\\n        emit FundsStored(\\r\\n            _id,\\r\\n            _token,\\r\\n            _amount,\\r\\n            _sender,\\r\\n            _msgSender(),\\r\\n            accountsMapping[_msgSender()][_id][address(_token)]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraw tokens from the contract and send them to the recipient\\r\\n     * @param _id AccountId\\r\\n     * @param _token TokenAddress\\r\\n     * @param _amount Amount\\r\\n     * @param _recipient Witch address to send tokens to\\r\\n     */\\r\\n    function withdraw(uint256 _id, IERC20 _token, uint256 _amount, address _recipient) external {\\r\\n        require(\\r\\n            accountsMapping[_msgSender()][_id][address(_token)] >= _amount,\\r\\n            string.concat(\\r\\n                \\\"[Funds Manager] Not enough funds for account \\\",\\r\\n                Strings.toString(_id),\\r\\n                \\\" and amount \\\",\\r\\n                Strings.toString(_amount)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        accountsMapping[_msgSender()][_id][address(_token)] -= _amount;\\r\\n        _token.transfer(_recipient, _amount);\\r\\n\\r\\n        emit FundsWithdrawn(\\r\\n            _id,\\r\\n            _token,\\r\\n            _amount,\\r\\n            _recipient,\\r\\n            _msgSender(),\\r\\n            accountsMapping[_msgSender()][_id][address(_token)]\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb6262eabe2df244dd177643b09c2b11d9ffb11738e9ff4ea497fc32214d300d8\",\"license\":\"AGPL-3.0\"},\"contracts/LeaseAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./DeedNFT.sol\\\"; // Import the IDeedNFT interface\\r\\nimport \\\"./LeaseNFT.sol\\\";\\r\\nimport \\\"./SubdivisionNFT.sol\\\"; // Import the ISubdivisionNFT interface\\r\\nimport \\\"./FundsManager.sol\\\";\\r\\nimport \\\"./AccessManager.sol\\\";\\r\\n\\r\\ninterface ILeaseNFT {\\r\\n    function mint(address leaseOwner, uint256 leaseId) external;\\r\\n\\r\\n    function burn(uint256 leaseId) external;\\r\\n}\\r\\n\\r\\ncontract LeaseAgreement is ReentrancyGuard, AccessManagerBase {\\r\\n    // CONSTANTS\\r\\n    uint256 private constant MONTH = 30.5 days;\\r\\n    uint256 private constant MAX_NB_MONTH_FOR_DEPOSIT = 3;\\r\\n\\r\\n    struct LeaseDates {\\r\\n        uint256 startDate;\\r\\n        uint256 endDate;\\r\\n        uint256 rentDueDate;\\r\\n        uint256 distributableDate;\\r\\n    }\\r\\n\\r\\n    struct Deposit {\\r\\n        uint256 amount;\\r\\n        bool paid;\\r\\n    }\\r\\n\\r\\n    struct Lease {\\r\\n        address[] lesseeList;\\r\\n        uint256 rentAmount;\\r\\n        Deposit securityDeposit;\\r\\n        uint256 latePaymentFee;\\r\\n        uint32 gracePeriod;\\r\\n        LeaseDates dates;\\r\\n        uint256 extensionCount;\\r\\n        uint256 deedId;\\r\\n        address manager;\\r\\n        uint8 managerPercentage;\\r\\n        uint256 unclaimedRentAmount;\\r\\n        bool isArchived;\\r\\n    }\\r\\n\\r\\n    struct RentPaymentInfo {\\r\\n        uint256 rentAmount;\\r\\n        uint256 totalBalance;\\r\\n        uint32 unpaidMonths;\\r\\n        uint256 rentDueDate;\\r\\n    }\\r\\n\\r\\n    modifier onlyLessor(uint256 _leaseId) {\\r\\n        require(_msgSender() == leaseNFT.ownerOf(_leaseId), \\\"[Lease Agreement] Sender must be Lessor\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyActive(uint256 _leaseId) {\\r\\n        require(\\r\\n            block.timestamp < leases[_leaseId].dates.endDate && block.timestamp > leases[_leaseId].dates.startDate,\\r\\n            \\\"[Lease Agreement] The contract has been archived.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n    mapping(uint256 => Lease) public leases;\\r\\n    uint256 public leaseCounter;\\r\\n    LeaseNFT public leaseNFT;\\r\\n    IERC20 public paymentToken;\\r\\n    DeedNFT public deedNFT;\\r\\n    SubdivisionNFT public subdivisionNFT;\\r\\n    FundsManager public fundsManager;\\r\\n\\r\\n    event LeaseFundsManagerSet(address fundsManager);\\r\\n    event LeasePaymentTokenSet(address paymentToken);\\r\\n    event LeaseCreated(uint256 leaseId, Lease lease);\\r\\n    event LeaseTerminated(uint256 leaseId);\\r\\n    event LeasePaymentMade(uint256 leaseId, uint256 amount, uint256 unclaimedRentAmount);\\r\\n    event LeaseRentDistributed(uint256 leaseId, uint256 lessorAmount, uint256 managerAmount, uint256 distributableDate);\\r\\n    event LeaseManagerSet(uint256 leaseId, address manager, uint256 percentage);\\r\\n    event LeaseManagerUnset(uint256 leaseId);\\r\\n    event LeaseDueDateChanged(uint256 leaseId, uint256 newDueDate);\\r\\n    event LeaseDepositSubmited(uint256 leaseId, uint256 amount);\\r\\n    event LeaseExtended(uint256 leaseId, uint256 endDate, uint256 rentAmount, uint256 extensionCount);\\r\\n\\r\\n    constructor(\\r\\n        address _leaseNFT,\\r\\n        address _paymentToken,\\r\\n        address _deedNFT,\\r\\n        address _subdivisionNFT,\\r\\n        address _fundsManager,\\r\\n        address _accessManager\\r\\n    ) AccessManagerBase(_accessManager) {\\r\\n        require(_leaseNFT != address(0), \\\"[Lease Agreement] Invalid LeaseNFT address\\\");\\r\\n        require(_paymentToken != address(0), \\\"[Lease Agreement] Invalid token address\\\");\\r\\n        require(_deedNFT != address(0), \\\"[Lease Agreement] Invalid DeedNFT address\\\");\\r\\n        require(_subdivisionNFT != address(0), \\\"[Lease Agreement] Invalid SubdivisionNFT address\\\");\\r\\n\\r\\n        leaseNFT = LeaseNFT(_leaseNFT);\\r\\n        deedNFT = DeedNFT(_deedNFT);\\r\\n        subdivisionNFT = SubdivisionNFT(_subdivisionNFT);\\r\\n\\r\\n        paymentToken = IERC20(_paymentToken);\\r\\n        emit LeasePaymentTokenSet(_paymentToken);\\r\\n\\r\\n        fundsManager = FundsManager(_fundsManager);\\r\\n        emit LeaseFundsManagerSet(_fundsManager);\\r\\n\\r\\n        leaseCounter = 0;\\r\\n    }\\r\\n\\r\\n    function setFundsManager(address _fundsManager) public functionRoleOrAdmin(this.setFundsManager.selector) {\\r\\n        fundsManager = FundsManager(_fundsManager);\\r\\n        emit LeaseFundsManagerSet(_fundsManager);\\r\\n    }\\r\\n\\r\\n    function getLesseeList(uint256 _leaseId) public view returns (address[] memory) {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        return lease.lesseeList;\\r\\n    }\\r\\n\\r\\n    function setPaymentToken(address _paymentToken) public functionRoleOrAdmin(this.setPaymentToken.selector) {\\r\\n        paymentToken = IERC20(_paymentToken);\\r\\n        emit LeasePaymentTokenSet(_paymentToken);\\r\\n    }\\r\\n\\r\\n    function createLease(\\r\\n        address[] memory _lesseeList,\\r\\n        uint256 _startDate,\\r\\n        uint256 _endDate,\\r\\n        uint256 _rentAmount,\\r\\n        uint256 _securityDepositAmount,\\r\\n        uint256 _deedId,\\r\\n        uint256 _latePaymentFee,\\r\\n        uint32 _gracePeriod\\r\\n    ) external {\\r\\n        require(_startDate < _endDate, \\\"[Lease Agreement] Invalid start and end dates\\\");\\r\\n        require(\\r\\n            _endDate - _startDate > 1 * MONTH,\\r\\n            \\\"[Lease Agreement] End date and start date should be 1 month appart\\\"\\r\\n        );\\r\\n        require(_gracePeriod >= 3);\\r\\n        require(_latePaymentFee >= 0 && _latePaymentFee <= 15);\\r\\n        bool isDeedOwner = _verifyDeedOwnership(_msgSender(), _deedId);\\r\\n        bool isSubdivisionOwner = _verifySubdivisionOwnership(_msgSender(), _deedId);\\r\\n        require(isDeedOwner || isSubdivisionOwner, \\\"[Lease Agreement] Lessor must own the property NFT\\\");\\r\\n\\r\\n        uint256 leaseId = leaseCounter;\\r\\n        leaseCounter++;\\r\\n        Lease storage lease = leases[leaseId];\\r\\n        lease.lesseeList = _lesseeList;\\r\\n        lease.dates.startDate = _startDate;\\r\\n        lease.dates.endDate = _endDate;\\r\\n        lease.rentAmount = _rentAmount;\\r\\n        lease.securityDeposit.amount = _securityDepositAmount;\\r\\n        lease.dates.rentDueDate = _startDate + 1 * MONTH;\\r\\n        lease.extensionCount = 0;\\r\\n        lease.deedId = _deedId;\\r\\n        lease.securityDeposit.paid = _securityDepositAmount == 0;\\r\\n        lease.latePaymentFee = _latePaymentFee;\\r\\n        lease.gracePeriod = _gracePeriod;\\r\\n        lease.isArchived = false;\\r\\n        leaseNFT.mint(_msgSender(), leaseId);\\r\\n        lease.dates.distributableDate = lease.dates.rentDueDate;\\r\\n\\r\\n        emit LeaseCreated(leaseId, lease);\\r\\n    }\\r\\n\\r\\n    function containsAddress(address[] memory _addresses, address _address) internal pure returns (bool) {\\r\\n        bool contains = false;\\r\\n        for (uint i = 0; i < _addresses.length; i++) {\\r\\n            if (_addresses[i] == _address) {\\r\\n                contains = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return contains;\\r\\n    }\\r\\n\\r\\n    function transferLease(uint256 _leaseId, address[] memory _newLesseeList) public onlyLessor(_leaseId) {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        lease.lesseeList = _newLesseeList;\\r\\n    }\\r\\n\\r\\n    function setManager(uint256 _leaseId, address _manager, uint8 _percentage) public onlyLessor(_leaseId) {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(_percentage >= 0 && _percentage <= 100, \\\"[Lease Agreement] Invalid Manager percentage\\\");\\r\\n\\r\\n        lease.manager = _manager;\\r\\n        lease.managerPercentage = _percentage;\\r\\n\\r\\n        emit LeaseManagerSet(_leaseId, _manager, _percentage);\\r\\n    }\\r\\n\\r\\n    function unsetManager(uint256 _leaseId) external {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(\\r\\n            _msgSender() == leaseNFT.ownerOf(_leaseId) || _msgSender() == lease.manager,\\r\\n            \\\"[Lease Agreement] Only the Lessor or the Manager can remove the Manager\\\"\\r\\n        );\\r\\n\\r\\n        lease.manager = address(0);\\r\\n        lease.managerPercentage = 0;\\r\\n\\r\\n        emit LeaseManagerUnset(_leaseId);\\r\\n    }\\r\\n\\r\\n    function submitDeposit(uint256 _leaseId) external nonReentrant {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(\\r\\n            containsAddress(lease.lesseeList, _msgSender()),\\r\\n            \\\"[Lease Agreement] Only the Lessee can submit the deposit\\\"\\r\\n        );\\r\\n        require(!lease.securityDeposit.paid, \\\"[Lease Agreement] Security deposit already paid\\\");\\r\\n\\r\\n        fundsManager.store(_leaseId, paymentToken, lease.securityDeposit.amount, _msgSender());\\r\\n        lease.securityDeposit.paid = true;\\r\\n\\r\\n        emit LeaseDepositSubmited(_leaseId, lease.securityDeposit.amount);\\r\\n    }\\r\\n\\r\\n    function setDueDate(uint256 _leaseId, uint256 _newDueDate) public onlyLessor(_leaseId) {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(\\r\\n            _newDueDate >= (lease.dates.rentDueDate + 1 * MONTH),\\r\\n            \\\"[Lease Agreement] New rent due date must be at least a month after current one\\\"\\r\\n        );\\r\\n\\r\\n        lease.dates.rentDueDate = _newDueDate;\\r\\n\\r\\n        emit LeaseDueDateChanged(_leaseId, _newDueDate);\\r\\n    }\\r\\n\\r\\n    function payRent(uint256 _leaseId) external nonReentrant {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(containsAddress(lease.lesseeList, _msgSender()), \\\"[Lease Agreement] Only the Lessee can pay rent\\\");\\r\\n        require(lease.securityDeposit.paid, \\\"[Lease Agreement] Security deposit must be paid first\\\");\\r\\n        require(\\r\\n            block.timestamp >= lease.dates.startDate && block.timestamp <= lease.dates.endDate,\\r\\n            \\\"[Lease Agreement] Outside of lease duration\\\"\\r\\n        );\\r\\n\\r\\n        RentPaymentInfo memory rentInfo = calculateRentPaymentInfo(_leaseId);\\r\\n        lease.unclaimedRentAmount += rentInfo.totalBalance;\\r\\n        lease.dates.rentDueDate += (rentInfo.unpaidMonths) * (1 * MONTH);\\r\\n        fundsManager.store(_leaseId, paymentToken, rentInfo.totalBalance, _msgSender());\\r\\n\\r\\n        emit LeaseDueDateChanged(_leaseId, lease.dates.rentDueDate);\\r\\n        emit LeasePaymentMade(_leaseId, rentInfo.totalBalance, lease.unclaimedRentAmount);\\r\\n    }\\r\\n\\r\\n    function distributeRent(uint256 _leaseId) external nonReentrant {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(\\r\\n            _msgSender() == leaseNFT.ownerOf(_leaseId) || _msgSender() == lease.manager,\\r\\n            \\\"[Lease Agreement] Caller must be the Lessor or the Manager\\\"\\r\\n        );\\r\\n        require(lease.unclaimedRentAmount > 0, \\\"[Lease Agreement] No rent to distribute\\\");\\r\\n        uint256 nbMonthSinceLastDistribute = 0;\\r\\n        require(\\r\\n            block.timestamp > lease.dates.distributableDate,\\r\\n            \\\"[Lease Agreement] Rent can only be distributed past the distributable date\\\"\\r\\n        );\\r\\n\\r\\n        nbMonthSinceLastDistribute = (block.timestamp - lease.dates.distributableDate) / (1 * MONTH) + 1;\\r\\n        uint256 totalToClaim = lease.unclaimedRentAmount;\\r\\n        uint256 managerAmount = 0;\\r\\n\\r\\n        if (lease.manager != address(0)) {\\r\\n            managerAmount = (totalToClaim * lease.managerPercentage) / 100;\\r\\n            fundsManager.withdraw(_leaseId, paymentToken, uint32(managerAmount), lease.manager);\\r\\n        }\\r\\n\\r\\n        uint256 lessorAmount = totalToClaim - managerAmount;\\r\\n        fundsManager.withdraw(_leaseId, paymentToken, uint32(lessorAmount), leaseNFT.ownerOf(_leaseId));\\r\\n        lease.unclaimedRentAmount = 0;\\r\\n        lease.dates.distributableDate += nbMonthSinceLastDistribute * (1 * MONTH);\\r\\n\\r\\n        emit LeaseRentDistributed(_leaseId, uint32(lessorAmount), uint32(managerAmount), lease.dates.distributableDate);\\r\\n    }\\r\\n\\r\\n    function extendLease(uint256 _leaseId, uint256 _extensionPeriod) external onlyLessor(_leaseId) {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(!lease.isArchived, \\\"[Lease Agreement] Lease has been archived\\\");\\r\\n        require(\\r\\n            block.timestamp >= lease.dates.endDate - 45 days, // TODO: Configurable\\r\\n            \\\"[Lease Agreement] Extension can only be requested in the last 45 days\\\"\\r\\n        );\\r\\n        require(lease.extensionCount < 2, \\\"[Lease Agreement] Maximum extensions reached\\\");\\r\\n        lease.dates.endDate += _extensionPeriod;\\r\\n        lease.rentAmount += (lease.rentAmount * 3) / 100;\\r\\n        lease.extensionCount++;\\r\\n\\r\\n        emit LeaseExtended(_leaseId, lease.dates.endDate, lease.rentAmount, lease.extensionCount);\\r\\n    }\\r\\n\\r\\n    function withdrawDeposit(uint256 _leaseId) external nonReentrant {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(\\r\\n            lease.isArchived || block.timestamp > lease.dates.endDate,\\r\\n            \\\"[Lease Agreement] Cannot withdraw deposit if Lease still active\\\"\\r\\n        );\\r\\n        require(containsAddress(lease.lesseeList, _msgSender()), \\\"[Lease Agreement] Caller must be one of the lessees\\\");\\r\\n        RentPaymentInfo memory rentInfo = calculateRentPaymentInfo(_leaseId);\\r\\n        bool shouldSendDepositToLessor = (rentInfo.unpaidMonths >= MAX_NB_MONTH_FOR_DEPOSIT);\\r\\n        // Send security deposit to the sender of the lessee list\\r\\n        if (!shouldSendDepositToLessor) {\\r\\n            fundsManager.withdraw(_leaseId, paymentToken, lease.securityDeposit.amount, _msgSender());\\r\\n        }\\r\\n        lease.isArchived = true;\\r\\n    }\\r\\n\\r\\n    function burnLease(uint256 _leaseId) public {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(\\r\\n            _msgSender() == leaseNFT.ownerOf(_leaseId) || _msgSender() == lease.manager,\\r\\n            \\\"[Lease Agreement] Sender must be manager or lessor\\\"\\r\\n        );\\r\\n        require(lease.isArchived, \\\"[Lease Agreement] Lease has been archived\\\");\\r\\n        leaseNFT.burn(_leaseId);\\r\\n    }\\r\\n\\r\\n    function terminateLease(uint256 _leaseId) external nonReentrant onlyLessor(_leaseId) {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        require(block.timestamp >= lease.dates.startDate, \\\"[Lease Agreement] Lease has not started yet\\\");\\r\\n        RentPaymentInfo memory rentInfo = calculateRentPaymentInfo(_leaseId);\\r\\n        bool shouldSendDepositToLessor = (rentInfo.unpaidMonths >= MAX_NB_MONTH_FOR_DEPOSIT);\\r\\n\\r\\n        // Send security deposit to the lessor if needed\\r\\n        if (shouldSendDepositToLessor) {\\r\\n            fundsManager.withdraw(_leaseId, paymentToken, lease.securityDeposit.amount, leaseNFT.ownerOf(_leaseId));\\r\\n        }\\r\\n        lease.isArchived = true;\\r\\n        emit LeaseTerminated(_leaseId);\\r\\n    }\\r\\n\\r\\n    function calculateRentPaymentInfo(uint256 _leaseId) public view returns (RentPaymentInfo memory rentInfo) {\\r\\n        Lease storage lease = leases[_leaseId];\\r\\n        rentInfo.rentAmount = lease.rentAmount;\\r\\n        // sidenote: rent due date is incremented by 1 month each time the rent is paid.(function payRent)\\r\\n        if (block.timestamp > lease.dates.rentDueDate + (lease.gracePeriod * 1 days)) {\\r\\n            // Function to calculate rentAmountIncrease increase\\r\\n            rentInfo.rentAmount += (lease.rentAmount * lease.latePaymentFee) / 100;\\r\\n            rentInfo.unpaidMonths = uint32((block.timestamp - lease.dates.rentDueDate) / (1 * MONTH) + 1);\\r\\n            rentInfo.totalBalance = (rentInfo.unpaidMonths) * rentInfo.rentAmount;\\r\\n        } else {\\r\\n            rentInfo.unpaidMonths = 1;\\r\\n            rentInfo.totalBalance = rentInfo.rentAmount;\\r\\n        }\\r\\n        return rentInfo;\\r\\n    }\\r\\n\\r\\n    function _verifySubdivisionOwnership(address _owner, uint256 _subdivisionId) internal view returns (bool) {\\r\\n        return subdivisionNFT.isOwnerOfSubdivision(_owner, _subdivisionId);\\r\\n    }\\r\\n\\r\\n    function _verifyDeedOwnership(address _owner, uint256 _deedId) internal view returns (bool) {\\r\\n        try deedNFT.ownerOf(_deedId) returns (address owner) {\\r\\n            return owner == _owner;\\r\\n        } catch {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2c359ea944f36825e5aaa0bf8b9546273b3f8aa964aa0e141a44c2675474f9bc\",\"license\":\"AGPL-3.0\"},\"contracts/LeaseNFT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\r\\nimport \\\"./AccessManager.sol\\\";\\r\\n\\r\\ncontract LeaseNFT is ERC721, AccessManagerBase {\\r\\n    address private leaseAgreementAddress;\\r\\n\\r\\n    event LeaseNFTMinted(address leaseOwner, uint256 leaseId, address minter);\\r\\n    event LeaseNFTBurned(uint256 leaseId, address burner);\\r\\n    event LeaseNFTAgreementSet(uint256 leaseId, address burner);\\r\\n\\r\\n    constructor(address _accessManager) ERC721(\\\"LeaseNFT\\\", \\\"LEASE\\\") AccessManagerBase(_accessManager) {}\\r\\n\\r\\n    function setLeaseAgreementAddress(address _leaseAgreementAddress) external onlyAdmin {\\r\\n        leaseAgreementAddress = _leaseAgreementAddress;\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint256 _leaseId) external {\\r\\n        require(\\r\\n            hasAdminRole() || _msgSender() == leaseAgreementAddress,\\r\\n            \\\"[LeaseNFT] Only LeaseAgreement contract can mint the lease\\\"\\r\\n        );\\r\\n        _mint(_to, _leaseId);\\r\\n        emit LeaseNFTMinted(_to, _leaseId, _msgSender());\\r\\n    }\\r\\n\\r\\n    function exists(uint256 _leaseId) public view returns (bool) {\\r\\n        return _ownerOf(_leaseId) != address(0);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _leaseId) external {\\r\\n        require(\\r\\n            hasAdminRole() || _msgSender() == leaseAgreementAddress,\\r\\n            \\\"[LeaseNFT] Only LeaseAgreement can burn the lease\\\"\\r\\n        );\\r\\n        _burn(_leaseId);\\r\\n        emit LeaseNFTBurned(_leaseId, _msgSender());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x71bc0e3506208c29d443f64570cc04a4f1ecc35a02faab4e22bd0ac39ff1a6cd\",\"license\":\"AGPL-3.0\"},\"contracts/SubdivisionNFT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"./DeedNFT.sol\\\";\\r\\nimport \\\"./AccessManager.sol\\\";\\r\\n\\r\\ncontract SubdivisionNFT is ERC1155, AccessManagerBase {\\r\\n    struct SubdivisionInfo {\\r\\n        bytes ipfsDetailsHash;\\r\\n        address owner;\\r\\n        uint256 parentDeed;\\r\\n    }\\r\\n\\r\\n    uint256 private _nextsubTokenID;\\r\\n    mapping(uint256 => SubdivisionInfo) private subdivisionInfoMap;\\r\\n\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n    DeedNFT public deedNFT;\\r\\n\\r\\n    event SubdivisionMinted(\\r\\n        address subdivisionOwner,\\r\\n        uint256 subdivisionId,\\r\\n        uint256 deedId,\\r\\n        bytes ipfsDetailsHash,\\r\\n        address minter\\r\\n    );\\r\\n    event SubdivisionBurned(address account, uint256 subdivisionId, uint256 deedId, bytes ipfsDetailsHash);\\r\\n    event SubdivisionInfoSet(uint256 tokenId, SubdivisionInfo info);\\r\\n\\r\\n    constructor(address _deedNFT, address _accessManager) ERC1155(\\\"\\\") AccessManagerBase(_accessManager) {\\r\\n        require(_deedNFT != address(0), \\\"[SubdivisionNFT] Invalid DeedNFT address\\\");\\r\\n\\r\\n        _nextsubTokenID = 1;\\r\\n        deedNFT = DeedNFT(_deedNFT);\\r\\n    }\\r\\n\\r\\n    function mintSubdivision(SubdivisionInfo memory _info) public {\\r\\n        require(\\r\\n            _msgSender() == deedNFT.ownerOf(_info.parentDeed),\\r\\n            \\\"[SubdivisionNFT] Sender must be the owner of the parent deed\\\"\\r\\n        );\\r\\n        require(deedNFT.canSubdivide(_info.parentDeed), \\\"[SubdivisionNFT] Parent deed must be land or estate\\\");\\r\\n\\r\\n        _mint(_info.owner, _nextsubTokenID, 1, _info.ipfsDetailsHash);\\r\\n        SubdivisionInfo storage subInfo = subdivisionInfoMap[_nextsubTokenID];\\r\\n        subInfo.ipfsDetailsHash = _info.ipfsDetailsHash;\\r\\n        subInfo.owner = _info.owner;\\r\\n        subInfo.parentDeed = _info.parentDeed;\\r\\n\\r\\n        emit SubdivisionMinted(_info.owner, _nextsubTokenID, _info.parentDeed, _info.ipfsDetailsHash, _msgSender());\\r\\n        _nextsubTokenID = _nextsubTokenID + 1;\\r\\n    }\\r\\n\\r\\n    function batchMint(SubdivisionInfo[] memory _infos) public {\\r\\n        for (uint i = 0; i < _infos.length; i++) {\\r\\n            mintSubdivision(_infos[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setInfo(uint256 _subTokenId, SubdivisionInfo memory _newInfo) public virtual {\\r\\n        require(\\r\\n            isOwnerOfSubdivision(_msgSender(), _subTokenId) == true,\\r\\n            \\\"[SubdivisionNFT] Sender Must be owner of subdivision to set info\\\"\\r\\n        );\\r\\n\\r\\n        subdivisionInfoMap[_subTokenId] = _newInfo;\\r\\n\\r\\n        emit SubdivisionInfoSet(_subTokenId, _newInfo);\\r\\n    }\\r\\n\\r\\n    function burnSubdivision(uint256 _subTokenId) public {\\r\\n        require(\\r\\n            isOwnerOfSubdivision(_msgSender(), _subTokenId) == true,\\r\\n            \\\"[SubdivisionNFT] Sender must be owner of the subdivision to burn it\\\"\\r\\n        );\\r\\n\\r\\n        _burn(_msgSender(), _subTokenId, 1);\\r\\n\\r\\n        emit SubdivisionBurned(\\r\\n            _msgSender(),\\r\\n            _subTokenId,\\r\\n            subdivisionInfoMap[_subTokenId].parentDeed,\\r\\n            subdivisionInfoMap[_subTokenId].ipfsDetailsHash\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getParentDeed(uint256 _subTokenId) public view returns (uint256) {\\r\\n        SubdivisionInfo storage info = subdivisionInfoMap[_subTokenId];\\r\\n        return info.parentDeed;\\r\\n    }\\r\\n\\r\\n    function isOwnerOfSubdivision(address _owner, uint256 _subTokenId) public view returns (bool) {\\r\\n        return balanceOf(_owner, _subTokenId) > 0;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override(ERC1155) returns (bool) {\\r\\n        return super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6f77748676788723109cef261d6591e41f47af29223c6d6938867b48329b7efb\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200314a3803806200314a8339810160408190526200003491620002fe565b6001600081905580546001600160a01b0319166001600160a01b03838116919091179091558616620000c05760405162461bcd60e51b815260206004820152602a60248201527f5b4c656173652041677265656d656e745d20496e76616c6964204c656173654e6044820152694654206164647265737360b01b60648201526084015b60405180910390fd5b6001600160a01b038516620001285760405162461bcd60e51b815260206004820152602760248201527f5b4c656173652041677265656d656e745d20496e76616c696420746f6b656e206044820152666164647265737360c81b6064820152608401620000b7565b6001600160a01b038416620001925760405162461bcd60e51b815260206004820152602960248201527f5b4c656173652041677265656d656e745d20496e76616c696420446565644e4660448201526854206164647265737360b81b6064820152608401620000b7565b6001600160a01b038316620002035760405162461bcd60e51b815260206004820152603060248201527f5b4c656173652041677265656d656e745d20496e76616c69642053756264697660448201526f6973696f6e4e4654206164647265737360801b6064820152608401620000b7565b600480546001600160a01b038881166001600160a01b03199283161790925560068054878416908316179055600780548684169083161790556005805492881692909116821790556040519081527ff316d79ea0865efd761a7a55594999c1d875d637946382fe22c8054d0fd767389060200160405180910390a1600880546001600160a01b0319166001600160a01b0384169081179091556040519081527fb0c676f9d7afa1a44d28b367dc30782ead78d7f8679914a2ba86d8565e6ba4d19060200160405180910390a150506000600355506200037f92505050565b80516001600160a01b0381168114620002f957600080fd5b919050565b60008060008060008060c087890312156200031857600080fd5b6200032387620002e1565b95506200033360208801620002e1565b94506200034360408801620002e1565b93506200035360608801620002e1565b92506200036360808801620002e1565b91506200037360a08801620002e1565b90509295509295509295565b612dbb806200038f6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80637cf9f990116100de5780639e80977011610097578063b99c23e311610071578063b99c23e31461046d578063c7f01cac14610475578063d9e8843f14610488578063dbeb20121461049b57600080fd5b80639e809770146103fb578063ac0c3a931461040e578063b1a9cb1f1461042157600080fd5b80637cf9f990146102ba578063806d4a72146102cd5780638927a106146102e057806389b9e75f146103bd57806391d14854146103d557806399c7e2e8146103e857600080fd5b8063326a4eff1161014b578063588e00a511610125578063588e00a51461026e5780635e53e4fc146102815780636a326ab11461029457806376a57da9146102a757600080fd5b8063326a4eff1461023557806333289a46146102485780633c29ce321461025b57600080fd5b806304368923146101935780630d116652146101af5780630e931f9f146101da578063115511e9146101fa5780632eb9f7881461020f5780633013ce2914610222575b600080fd5b61019c60035481565b6040519081526020015b60405180910390f35b6008546101c2906001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b6101ed6101e8366004612679565b6104ae565b6040516101a69190612692565b61020d6102083660046127bc565b61051f565b005b61020d61021d366004612803565b6105f1565b6005546101c2906001600160a01b031681565b61020d610243366004612825565b61078e565b61020d610256366004612679565b61091e565b61020d610269366004612679565b610b44565b61020d61027c366004612679565b610fff565b6007546101c2906001600160a01b031681565b61020d6102a236600461286d565b611276565b6004546101c2906001600160a01b031681565b61020d6102c8366004612679565b611379565b61020d6102db366004612803565b6114ed565b6103a66102ee366004612679565b600260208181526000928352604092839020600181015484518086018652938201548452600382015460ff9081161515858501526004830154600584015487516080810189526006860154815260078601549681019690965260088501549786019790975260098401546060860152600a840154600b850154600c860154600d870154600e909701549599939763ffffffff909416969395929491936001600160a01b03821693600160a01b9092048316929091168b565b6040516101a69b9a99989796959493929190612891565b6103c5611779565b60405190151581526020016101a6565b6103c56103e336600461293c565b6117fc565b61020d6103f636600461286d565b61187c565b61020d61040936600461296c565b61194d565b61020d61041c366004612679565b611c78565b61043461042f366004612679565b611e13565b6040516101a69190815181526020808301519082015260408083015163ffffffff16908201526060918201519181019190915260800190565b6103c5611f28565b6006546101c2906001600160a01b031681565b61020d610496366004612679565b611f42565b61020d6104a9366004612679565b612280565b6000818152600260209081526040918290208054835181840281018401909452808452606093919283919083018282801561051257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104f4575b5050505050915050919050565b600480546040516331a9108f60e11b815291820184905283916001600160a01b0390911690636352211e90602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190612a01565b6001600160a01b0316336001600160a01b0316146105c75760405162461bcd60e51b81526004016105be90612a1e565b60405180910390fd5b6000838152600260209081526040909120835190916105ea9183918601906125ff565b5050505050565b600480546040516331a9108f60e11b815291820184905283916001600160a01b0390911690636352211e90602401602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190612a01565b6001600160a01b0316336001600160a01b0316146106905760405162461bcd60e51b81526004016105be90612a1e565b60008381526002602052604090206106ac622835c06001612a7b565b60088201546106bb9190612a92565b8310156107475760405162461bcd60e51b815260206004820152604e60248201527f5b4c656173652041677265656d656e745d204e65772072656e7420647565206460448201527f617465206d757374206265206174206c656173742061206d6f6e74682061667460648201526d65722063757272656e74206f6e6560901b608482015260a4016105be565b6008810183905560408051858152602081018590527f73cbadd90979700c98b0b0afcdb764c8e7f9ef93fed005c4c56b518cadf16c5e91015b60405180910390a150505050565b600480546040516331a9108f60e11b815291820185905284916001600160a01b0390911690636352211e90602401602060405180830381865afa1580156107d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fd9190612a01565b6001600160a01b0316336001600160a01b03161461082d5760405162461bcd60e51b81526004016105be90612a1e565b600084815260026020526040902060648360ff1611156108a45760405162461bcd60e51b815260206004820152602c60248201527f5b4c656173652041677265656d656e745d20496e76616c6964204d616e61676560448201526b722070657263656e7461676560a01b60648201526084016105be565b600c810180546001600160a01b0386166001600160a81b03199091168117600160a01b60ff8716908102919091179092556040805188815260208101929092528101919091527fa420ecd2d752d1dc944f88752a923fa27a28d142c4d7f32f8ea95355ca3f03f99060600160405180910390a15050505050565b6109266124a9565b6000818152600260205260409020600e81015460ff168061094a5750600781015442115b6109bc5760405162461bcd60e51b815260206004820152603f60248201527f5b4c656173652041677265656d656e745d2043616e6e6f74207769746864726160448201527f77206465706f736974206966204c65617365207374696c6c206163746976650060648201526084016105be565b610a2881600001805480602002602001604051908101604052809291908181526020018280548015610a1757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f9575b5050505050610a233390565b6124d3565b610a905760405162461bcd60e51b815260206004820152603360248201527f5b4c656173652041677265656d656e745d2043616c6c6572206d757374206265604482015272206f6e65206f6620746865206c65737365657360681b60648201526084016105be565b6000610a9b83611e13565b905060006003826040015163ffffffff161015905080610b27576008546005546002850154604051635f0f48bd60e01b81526001600160a01b0393841693635f0f48bd93610af4938a9392909116913390600401612aa5565b600060405180830381600087803b158015610b0e57600080fd5b505af1158015610b22573d6000803e3d6000fd5b505050505b5050600e01805460ff19166001179055610b416001600055565b50565b610b4c6124a9565b600081815260026020526040908190206004805492516331a9108f60e11b815290810184905290916001600160a01b031690636352211e90602401602060405180830381865afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190612a01565b6001600160a01b0316336001600160a01b03161480610bfc5750600c8101546001600160a01b0316336001600160a01b0316145b610c6e5760405162461bcd60e51b815260206004820152603a60248201527f5b4c656173652041677265656d656e745d2043616c6c6572206d75737420626560448201527f20746865204c6573736f72206f7220746865204d616e6167657200000000000060648201526084016105be565b600081600d015411610cd25760405162461bcd60e51b815260206004820152602760248201527f5b4c656173652041677265656d656e745d204e6f2072656e7420746f206469736044820152667472696275746560c81b60648201526084016105be565b60098101546000904211610d615760405162461bcd60e51b815260206004820152604a60248201527f5b4c656173652041677265656d656e745d2052656e742063616e206f6e6c792060448201527f62652064697374726962757465642070617374207468652064697374726962756064820152697461626c65206461746560b01b608482015260a4016105be565b610d6f622835c06001612a7b565b6009830154610d7e9042612acc565b610d889190612adf565b610d93906001612a92565b600d830154600c840154919250906000906001600160a01b031615610e5c57600c840154606490610dce90600160a01b900460ff1684612a7b565b610dd89190612adf565b600854600554600c870154604051635f0f48bd60e01b8152600481018a90526001600160a01b03928316602482015263ffffffff8516604482015290821660648201529293501690635f0f48bd90608401600060405180830381600087803b158015610e4357600080fd5b505af1158015610e57573d6000803e3d6000fd5b505050505b6000610e688284612acc565b600854600554600480546040516331a9108f60e11b81529182018b90529394506001600160a01b0392831693635f0f48bd938b9381169287929190911690636352211e90602401602060405180830381865afa158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef09190612a01565b6040516001600160e01b031960e087901b16815260048101949094526001600160a01b03928316602485015263ffffffff919091166044840152166064820152608401600060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b50506000600d88015550610f7b9050622835c06001612a7b565b610f859085612a7b565b600986018054600090610f99908490612a92565b909155505060098501546040805188815263ffffffff84811660208301528516818301526060810192909252517f1a69d265dcc92f1f5ebe48293744cff6c23a10b54757d101368e5dfcc197455a9181900360800190a15050505050610b416001600055565b6110076124a9565b600480546040516331a9108f60e11b815291820183905282916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110769190612a01565b6001600160a01b0316336001600160a01b0316146110a65760405162461bcd60e51b81526004016105be90612a1e565b6000828152600260205260409020600681015442101561111c5760405162461bcd60e51b815260206004820152602b60248201527f5b4c656173652041677265656d656e745d204c6561736520686173206e6f742060448201526a1cdd185c9d1959081e595d60aa1b60648201526084016105be565b600061112784611e13565b905060006003826040015163ffffffff1610159050801561121f576008546005546002850154600480546040516331a9108f60e11b81529182018a90526001600160a01b0394851694635f0f48bd948b949082169390929190911690636352211e90602401602060405180830381865afa1580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd9190612a01565b6040518563ffffffff1660e01b81526004016111ec9493929190612aa5565b600060405180830381600087803b15801561120657600080fd5b505af115801561121a573d6000803e3d6000fd5b505050505b600e8301805460ff191660011790556040517f903320d9d82a125a682f110695a1306646295d73a1f595ea334d198446086d8c906112609087815260200190565b60405180910390a150505050610b416001600055565b6001546040805163a217fddf60e01b81529051636a326ab160e01b926112f7926001600160a01b039091169163a217fddf916004808201926020929091908290030181865afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f19190612b01565b336117fc565b80611307575061130781336117fc565b6113235760405162461bcd60e51b81526004016105be90612b1a565b600580546001600160a01b0319166001600160a01b0384169081179091556040519081527ff316d79ea0865efd761a7a55594999c1d875d637946382fe22c8054d0fd76738906020015b60405180910390a15050565b600081815260026020526040908190206004805492516331a9108f60e11b815290810184905290916001600160a01b031690636352211e90602401602060405180830381865afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f59190612a01565b6001600160a01b0316336001600160a01b031614806114295750600c8101546001600160a01b0316336001600160a01b0316145b6114ab5760405162461bcd60e51b815260206004820152604760248201527f5b4c656173652041677265656d656e745d204f6e6c7920746865204c6573736f60448201527f72206f7220746865204d616e616765722063616e2072656d6f7665207468652060648201526626b0b730b3b2b960c91b608482015260a4016105be565b600c810180546001600160a81b03191690556040518281527fd5e25901100960f260695b30300c70d714e4f1e70dca7612394f20f0eeb68c549060200161136d565b600480546040516331a9108f60e11b815291820184905283916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155c9190612a01565b6001600160a01b0316336001600160a01b03161461158c5760405162461bcd60e51b81526004016105be90612a1e565b6000838152600260205260409020600e81015460ff16156115bf5760405162461bcd60e51b81526004016105be90612b87565b60078101546115d290623b538090612acc565b4210156116555760405162461bcd60e51b815260206004820152604560248201527f5b4c656173652041677265656d656e745d20457874656e73696f6e2063616e2060448201527f6f6e6c792062652072657175657374656420696e20746865206c617374203435606482015264206461797360d81b608482015260a4016105be565b600281600a0154106116be5760405162461bcd60e51b815260206004820152602c60248201527f5b4c656173652041677265656d656e745d204d6178696d756d20657874656e7360448201526b1a5bdb9cc81c995858da195960a21b60648201526084016105be565b828160060160010160008282546116d59190612a92565b909155505060018101546064906116ed906003612a7b565b6116f79190612adf565b81600101600082825461170a9190612a92565b9091555050600a8101805490600061172183612bd0565b909155505060078101546001820154600a83015460408051888152602081019490945283019190915260608201527f33687519bb2ab0520901057529f171472e2a36ae6179d81a50e5cc40798fe30490608001610780565b6001546000906001600160a01b031663940e1570335b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f79190612be9565b905090565b600154604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d14854906044015b602060405180830381865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118739190612be9565b90505b92915050565b6001546040805163a217fddf60e01b81529051631338fc5d60e31b926118d3926001600160a01b039091169163a217fddf916004808201926020929091908290030181865afa1580156112cd573d6000803e3d6000fd5b806118e357506118e381336117fc565b6118ff5760405162461bcd60e51b81526004016105be90612b1a565b600880546001600160a01b0319166001600160a01b0384169081179091556040519081527fb0c676f9d7afa1a44d28b367dc30782ead78d7f8679914a2ba86d8565e6ba4d19060200161136d565b8587106119b25760405162461bcd60e51b815260206004820152602d60248201527f5b4c656173652041677265656d656e745d20496e76616c69642073746172742060448201526c616e6420656e6420646174657360981b60648201526084016105be565b6119c0622835c06001612a7b565b6119ca8888612acc565b11611a485760405162461bcd60e51b815260206004820152604260248201527f5b4c656173652041677265656d656e745d20456e64206461746520616e64207360448201527f7461727420646174652073686f756c642062652031206d6f6e746820617070616064820152611c9d60f21b608482015260a4016105be565b60038163ffffffff161015611a5c57600080fd5b600f821115611a6a57600080fd5b6000611a763385612536565b90506000611a8433866125c5565b90508180611a8f5750805b611af65760405162461bcd60e51b815260206004820152603260248201527f5b4c656173652041677265656d656e745d204c6573736f72206d757374206f776044820152711b881d1a19481c1c9bdc195c9d1e4813919560721b60648201526084016105be565b600380549081906000611b0883612bd0565b909155505060008181526002602090815260409091208c519091611b309183918f01906125ff565b50600681018b9055600781018a905560018082018a905560028201899055611b5c90622835c090612a7b565b611b66908c612a92565b60088201556000600a820155600b8101879055600381018054891560ff1991821617909155600480830188905560058301805463ffffffff191663ffffffff8916179055600e83018054909216909155546001600160a01b03166340c10f19336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401600060405180830381600087803b158015611c0e57600080fd5b505af1158015611c22573d6000803e3d6000fd5b50505060088201546009830155506040517fd49c0e4c8d3cc20343f7638374606b650aa572502b847d73335d9e9db4b4f6af90611c629084908490612c54565b60405180910390a1505050505050505050505050565b600081815260026020526040908190206004805492516331a9108f60e11b815290810184905290916001600160a01b031690636352211e90602401602060405180830381865afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf49190612a01565b6001600160a01b0316336001600160a01b03161480611d285750600c8101546001600160a01b0316336001600160a01b0316145b611d8f5760405162461bcd60e51b815260206004820152603260248201527f5b4c656173652041677265656d656e745d2053656e646572206d7573742062656044820152711036b0b730b3b2b91037b9103632b9b9b7b960711b60648201526084016105be565b600e81015460ff16611db35760405162461bcd60e51b81526004016105be90612b87565b60048054604051630852cd8d60e31b81529182018490526001600160a01b0316906342966c6890602401600060405180830381600087803b158015611df757600080fd5b505af1158015611e0b573d6000803e3d6000fd5b505050505050565b611e4460405180608001604052806000815260200160008152602001600063ffffffff168152602001600081525090565b6000828152600260205260409020600181015482526005810154611e719063ffffffff1662015180612d47565b6008820154611e869163ffffffff1690612a92565b421115611f1357606481600401548260010154611ea39190612a7b565b611ead9190612adf565b82518390611ebc908390612a92565b905250611ecd622835c06001612a7b565b6008820154611edc9042612acc565b611ee69190612adf565b611ef1906001612a92565b63ffffffff16604083018190528251611f0991612a7b565b6020830152611f22565b60016040830152815160208301525b50919050565b6001546000906001600160a01b031663c395fcb33361178f565b611f4a6124a9565b60008181526002602090815260409182902080548351818402810184019094528084529092611fba9290918491830182828015610a17576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109f9575050505050610a233390565b61201d5760405162461bcd60e51b815260206004820152602e60248201527f5b4c656173652041677265656d656e745d204f6e6c7920746865204c6573736560448201526d194818d85b881c185e481c995b9d60921b60648201526084016105be565b600381015460ff1661208f5760405162461bcd60e51b815260206004820152603560248201527f5b4c656173652041677265656d656e745d205365637572697479206465706f736044820152741a5d081b5d5cdd081899481c185a5908199a5c9cdd605a1b60648201526084016105be565b600681015442108015906120a7575060078101544211155b6121075760405162461bcd60e51b815260206004820152602b60248201527f5b4c656173652041677265656d656e745d204f757473696465206f66206c656160448201526a39b290323ab930ba34b7b760a91b60648201526084016105be565b600061211283611e13565b9050806020015182600d01600082825461212c9190612a92565b909155506121409050622835c06001612a7b565b816040015163ffffffff166121559190612a7b565b600883018054600090612169908490612a92565b90915550506008546005546020830151604051634671b0e360e01b81526001600160a01b0393841693634671b0e3936121ad93899392909116913390600401612aa5565b600060405180830381600087803b1580156121c757600080fd5b505af11580156121db573d6000803e3d6000fd5b50505060088301546040517f73cbadd90979700c98b0b0afcdb764c8e7f9ef93fed005c4c56b518cadf16c5e925061221b91868252602082015260400190565b60405180910390a16020810151600d8301546040517f3238c0c9490ceb260a0b0b63c836df59652b9d663e364c9155ee07bfea24f3f09261226c928783526020830191909152604082015260600190565b60405180910390a15050610b416001600055565b6122886124a9565b600081815260026020908152604091829020805483518184028101840190945280845290926122f89290918491830182828015610a17576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109f9575050505050610a233390565b61236a5760405162461bcd60e51b815260206004820152603860248201527f5b4c656173652041677265656d656e745d204f6e6c7920746865204c6573736560448201527f652063616e207375626d697420746865206465706f736974000000000000000060648201526084016105be565b600381015460ff16156123d75760405162461bcd60e51b815260206004820152602f60248201527f5b4c656173652041677265656d656e745d205365637572697479206465706f7360448201526e1a5d08185b1c9958591e481c185a59608a1b60648201526084016105be565b6008546005546002830154604051634671b0e360e01b81526001600160a01b0393841693634671b0e39361241693889392909116913390600401612aa5565b600060405180830381600087803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b50505060038201805460ff191660011790555060028101546040517fdf8484d85a50945d4406aa408d13dbbe5b5c8e89da96e4c19cd0e855baadd8b69161249691859190918252602082015260400190565b60405180910390a150610b416001600055565b6002600054036124cc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600080805b845181101561252e57836001600160a01b03168582815181106124fd576124fd612d6f565b60200260200101516001600160a01b03160361251c576001915061252e565b8061252681612bd0565b9150506124d8565b509392505050565b6006546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e90602401602060405180830381865afa92505050801561259c575060408051601f3d908101601f1916820190925261259991810190612a01565b60015b6125a857506000611876565b836001600160a01b0316816001600160a01b031614915050611876565b600754604051631ae3d99d60e11b81526001600160a01b0384811660048301526024820184905260009216906335c7b33a90604401611832565b828054828255906000526020600020908101928215612654579160200282015b8281111561265457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061261f565b50612660929150612664565b5090565b5b808211156126605760008155600101612665565b60006020828403121561268b57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156126d35783516001600160a01b0316835292840192918401916001016126ae565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b4157600080fd5b8035612715816126f5565b919050565b600082601f83011261272b57600080fd5b8135602067ffffffffffffffff80831115612748576127486126df565b8260051b604051601f19603f8301168101818110848211171561276d5761276d6126df565b60405293845285810183019383810192508785111561278b57600080fd5b83870191505b848210156127b1576127a28261270a565b83529183019190830190612791565b979650505050505050565b600080604083850312156127cf57600080fd5b82359150602083013567ffffffffffffffff8111156127ed57600080fd5b6127f98582860161271a565b9150509250929050565b6000806040838503121561281657600080fd5b50508035926020909101359150565b60008060006060848603121561283a57600080fd5b83359250602084013561284c816126f5565b9150604084013560ff8116811461286257600080fd5b809150509250925092565b60006020828403121561287f57600080fd5b813561288a816126f5565b9392505050565b60006101e0820190508c82528b51602083015260208c0151151560408301528a606083015263ffffffff8a166080830152885160a0830152602089015160c0830152604089015160e08301526060890151610100830152876101208301528661014083015261290c6101608301876001600160a01b03169052565b60ff8516610180830152836101a083015261292c6101c083018415159052565b9c9b505050505050505050505050565b6000806040838503121561294f57600080fd5b823591506020830135612961816126f5565b809150509250929050565b600080600080600080600080610100898b03121561298957600080fd5b883567ffffffffffffffff8111156129a057600080fd5b6129ac8b828c0161271a565b9850506020890135965060408901359550606089013594506080890135935060a0890135925060c0890135915060e089013563ffffffff811681146129f057600080fd5b809150509295985092959890939650565b600060208284031215612a1357600080fd5b815161288a816126f5565b60208082526027908201527f5b4c656173652041677265656d656e745d2053656e646572206d757374206265604082015266102632b9b9b7b960c91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761187657611876612a65565b8082018082111561187657611876612a65565b9384526001600160a01b039283166020850152604084019190915216606082015260800190565b8181038181111561187657611876612a65565b600082612afc57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612b1357600080fd5b5051919050565b60208082526047908201527f5b4163636573734d616e6167656d656e745d204f6e6c79207468652041646d6960408201527f6e206f722066756e6374696f6e206772616e74656420757365722063616e20696060820152661b9d195c9858dd60ca1b608082015260a00190565b60208082526029908201527f5b4c656173652041677265656d656e745d204c6561736520686173206265656e60408201526808185c98da1a5d995960ba1b606082015260800190565b600060018201612be257612be2612a65565b5060010190565b600060208284031215612bfb57600080fd5b8151801515811461288a57600080fd5b6000815480845260208085019450836000528060002060005b83811015612c495781546001600160a01b031687529582019560019182019101612c24565b509495945050505050565b828152604060208201526000610200806040840152612c77610240840185612c0b565b6001850154606085015260028501546080850152600385015460ff16151560a0850152600485015460c0850152600585015463ffffffff1663ffffffff811660e0860152506006850154610100850152600785015461012085015260088501546101408501526009850154610160850152600a850154610180850152600b8501546101a0850152600c8501546001600160a01b0381166101c086015260a081901c60ff166101e086015250600d85015484830152600e85015460ff16801515610220860152915095945050505050565b63ffffffff818116838216028082169190828114612d6757612d67612a65565b505092915050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122030bcae3055a7164c63d92d315c89812ee62015f73590226d65a5cd6ca87fbe0964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80637cf9f990116100de5780639e80977011610097578063b99c23e311610071578063b99c23e31461046d578063c7f01cac14610475578063d9e8843f14610488578063dbeb20121461049b57600080fd5b80639e809770146103fb578063ac0c3a931461040e578063b1a9cb1f1461042157600080fd5b80637cf9f990146102ba578063806d4a72146102cd5780638927a106146102e057806389b9e75f146103bd57806391d14854146103d557806399c7e2e8146103e857600080fd5b8063326a4eff1161014b578063588e00a511610125578063588e00a51461026e5780635e53e4fc146102815780636a326ab11461029457806376a57da9146102a757600080fd5b8063326a4eff1461023557806333289a46146102485780633c29ce321461025b57600080fd5b806304368923146101935780630d116652146101af5780630e931f9f146101da578063115511e9146101fa5780632eb9f7881461020f5780633013ce2914610222575b600080fd5b61019c60035481565b6040519081526020015b60405180910390f35b6008546101c2906001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b6101ed6101e8366004612679565b6104ae565b6040516101a69190612692565b61020d6102083660046127bc565b61051f565b005b61020d61021d366004612803565b6105f1565b6005546101c2906001600160a01b031681565b61020d610243366004612825565b61078e565b61020d610256366004612679565b61091e565b61020d610269366004612679565b610b44565b61020d61027c366004612679565b610fff565b6007546101c2906001600160a01b031681565b61020d6102a236600461286d565b611276565b6004546101c2906001600160a01b031681565b61020d6102c8366004612679565b611379565b61020d6102db366004612803565b6114ed565b6103a66102ee366004612679565b600260208181526000928352604092839020600181015484518086018652938201548452600382015460ff9081161515858501526004830154600584015487516080810189526006860154815260078601549681019690965260088501549786019790975260098401546060860152600a840154600b850154600c860154600d870154600e909701549599939763ffffffff909416969395929491936001600160a01b03821693600160a01b9092048316929091168b565b6040516101a69b9a99989796959493929190612891565b6103c5611779565b60405190151581526020016101a6565b6103c56103e336600461293c565b6117fc565b61020d6103f636600461286d565b61187c565b61020d61040936600461296c565b61194d565b61020d61041c366004612679565b611c78565b61043461042f366004612679565b611e13565b6040516101a69190815181526020808301519082015260408083015163ffffffff16908201526060918201519181019190915260800190565b6103c5611f28565b6006546101c2906001600160a01b031681565b61020d610496366004612679565b611f42565b61020d6104a9366004612679565b612280565b6000818152600260209081526040918290208054835181840281018401909452808452606093919283919083018282801561051257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104f4575b5050505050915050919050565b600480546040516331a9108f60e11b815291820184905283916001600160a01b0390911690636352211e90602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190612a01565b6001600160a01b0316336001600160a01b0316146105c75760405162461bcd60e51b81526004016105be90612a1e565b60405180910390fd5b6000838152600260209081526040909120835190916105ea9183918601906125ff565b5050505050565b600480546040516331a9108f60e11b815291820184905283916001600160a01b0390911690636352211e90602401602060405180830381865afa15801561063c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106609190612a01565b6001600160a01b0316336001600160a01b0316146106905760405162461bcd60e51b81526004016105be90612a1e565b60008381526002602052604090206106ac622835c06001612a7b565b60088201546106bb9190612a92565b8310156107475760405162461bcd60e51b815260206004820152604e60248201527f5b4c656173652041677265656d656e745d204e65772072656e7420647565206460448201527f617465206d757374206265206174206c656173742061206d6f6e74682061667460648201526d65722063757272656e74206f6e6560901b608482015260a4016105be565b6008810183905560408051858152602081018590527f73cbadd90979700c98b0b0afcdb764c8e7f9ef93fed005c4c56b518cadf16c5e91015b60405180910390a150505050565b600480546040516331a9108f60e11b815291820185905284916001600160a01b0390911690636352211e90602401602060405180830381865afa1580156107d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fd9190612a01565b6001600160a01b0316336001600160a01b03161461082d5760405162461bcd60e51b81526004016105be90612a1e565b600084815260026020526040902060648360ff1611156108a45760405162461bcd60e51b815260206004820152602c60248201527f5b4c656173652041677265656d656e745d20496e76616c6964204d616e61676560448201526b722070657263656e7461676560a01b60648201526084016105be565b600c810180546001600160a01b0386166001600160a81b03199091168117600160a01b60ff8716908102919091179092556040805188815260208101929092528101919091527fa420ecd2d752d1dc944f88752a923fa27a28d142c4d7f32f8ea95355ca3f03f99060600160405180910390a15050505050565b6109266124a9565b6000818152600260205260409020600e81015460ff168061094a5750600781015442115b6109bc5760405162461bcd60e51b815260206004820152603f60248201527f5b4c656173652041677265656d656e745d2043616e6e6f74207769746864726160448201527f77206465706f736974206966204c65617365207374696c6c206163746976650060648201526084016105be565b610a2881600001805480602002602001604051908101604052809291908181526020018280548015610a1757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f9575b5050505050610a233390565b6124d3565b610a905760405162461bcd60e51b815260206004820152603360248201527f5b4c656173652041677265656d656e745d2043616c6c6572206d757374206265604482015272206f6e65206f6620746865206c65737365657360681b60648201526084016105be565b6000610a9b83611e13565b905060006003826040015163ffffffff161015905080610b27576008546005546002850154604051635f0f48bd60e01b81526001600160a01b0393841693635f0f48bd93610af4938a9392909116913390600401612aa5565b600060405180830381600087803b158015610b0e57600080fd5b505af1158015610b22573d6000803e3d6000fd5b505050505b5050600e01805460ff19166001179055610b416001600055565b50565b610b4c6124a9565b600081815260026020526040908190206004805492516331a9108f60e11b815290810184905290916001600160a01b031690636352211e90602401602060405180830381865afa158015610ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc89190612a01565b6001600160a01b0316336001600160a01b03161480610bfc5750600c8101546001600160a01b0316336001600160a01b0316145b610c6e5760405162461bcd60e51b815260206004820152603a60248201527f5b4c656173652041677265656d656e745d2043616c6c6572206d75737420626560448201527f20746865204c6573736f72206f7220746865204d616e6167657200000000000060648201526084016105be565b600081600d015411610cd25760405162461bcd60e51b815260206004820152602760248201527f5b4c656173652041677265656d656e745d204e6f2072656e7420746f206469736044820152667472696275746560c81b60648201526084016105be565b60098101546000904211610d615760405162461bcd60e51b815260206004820152604a60248201527f5b4c656173652041677265656d656e745d2052656e742063616e206f6e6c792060448201527f62652064697374726962757465642070617374207468652064697374726962756064820152697461626c65206461746560b01b608482015260a4016105be565b610d6f622835c06001612a7b565b6009830154610d7e9042612acc565b610d889190612adf565b610d93906001612a92565b600d830154600c840154919250906000906001600160a01b031615610e5c57600c840154606490610dce90600160a01b900460ff1684612a7b565b610dd89190612adf565b600854600554600c870154604051635f0f48bd60e01b8152600481018a90526001600160a01b03928316602482015263ffffffff8516604482015290821660648201529293501690635f0f48bd90608401600060405180830381600087803b158015610e4357600080fd5b505af1158015610e57573d6000803e3d6000fd5b505050505b6000610e688284612acc565b600854600554600480546040516331a9108f60e11b81529182018b90529394506001600160a01b0392831693635f0f48bd938b9381169287929190911690636352211e90602401602060405180830381865afa158015610ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef09190612a01565b6040516001600160e01b031960e087901b16815260048101949094526001600160a01b03928316602485015263ffffffff919091166044840152166064820152608401600060405180830381600087803b158015610f4d57600080fd5b505af1158015610f61573d6000803e3d6000fd5b50506000600d88015550610f7b9050622835c06001612a7b565b610f859085612a7b565b600986018054600090610f99908490612a92565b909155505060098501546040805188815263ffffffff84811660208301528516818301526060810192909252517f1a69d265dcc92f1f5ebe48293744cff6c23a10b54757d101368e5dfcc197455a9181900360800190a15050505050610b416001600055565b6110076124a9565b600480546040516331a9108f60e11b815291820183905282916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110769190612a01565b6001600160a01b0316336001600160a01b0316146110a65760405162461bcd60e51b81526004016105be90612a1e565b6000828152600260205260409020600681015442101561111c5760405162461bcd60e51b815260206004820152602b60248201527f5b4c656173652041677265656d656e745d204c6561736520686173206e6f742060448201526a1cdd185c9d1959081e595d60aa1b60648201526084016105be565b600061112784611e13565b905060006003826040015163ffffffff1610159050801561121f576008546005546002850154600480546040516331a9108f60e11b81529182018a90526001600160a01b0394851694635f0f48bd948b949082169390929190911690636352211e90602401602060405180830381865afa1580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd9190612a01565b6040518563ffffffff1660e01b81526004016111ec9493929190612aa5565b600060405180830381600087803b15801561120657600080fd5b505af115801561121a573d6000803e3d6000fd5b505050505b600e8301805460ff191660011790556040517f903320d9d82a125a682f110695a1306646295d73a1f595ea334d198446086d8c906112609087815260200190565b60405180910390a150505050610b416001600055565b6001546040805163a217fddf60e01b81529051636a326ab160e01b926112f7926001600160a01b039091169163a217fddf916004808201926020929091908290030181865afa1580156112cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f19190612b01565b336117fc565b80611307575061130781336117fc565b6113235760405162461bcd60e51b81526004016105be90612b1a565b600580546001600160a01b0319166001600160a01b0384169081179091556040519081527ff316d79ea0865efd761a7a55594999c1d875d637946382fe22c8054d0fd76738906020015b60405180910390a15050565b600081815260026020526040908190206004805492516331a9108f60e11b815290810184905290916001600160a01b031690636352211e90602401602060405180830381865afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f59190612a01565b6001600160a01b0316336001600160a01b031614806114295750600c8101546001600160a01b0316336001600160a01b0316145b6114ab5760405162461bcd60e51b815260206004820152604760248201527f5b4c656173652041677265656d656e745d204f6e6c7920746865204c6573736f60448201527f72206f7220746865204d616e616765722063616e2072656d6f7665207468652060648201526626b0b730b3b2b960c91b608482015260a4016105be565b600c810180546001600160a81b03191690556040518281527fd5e25901100960f260695b30300c70d714e4f1e70dca7612394f20f0eeb68c549060200161136d565b600480546040516331a9108f60e11b815291820184905283916001600160a01b0390911690636352211e90602401602060405180830381865afa158015611538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155c9190612a01565b6001600160a01b0316336001600160a01b03161461158c5760405162461bcd60e51b81526004016105be90612a1e565b6000838152600260205260409020600e81015460ff16156115bf5760405162461bcd60e51b81526004016105be90612b87565b60078101546115d290623b538090612acc565b4210156116555760405162461bcd60e51b815260206004820152604560248201527f5b4c656173652041677265656d656e745d20457874656e73696f6e2063616e2060448201527f6f6e6c792062652072657175657374656420696e20746865206c617374203435606482015264206461797360d81b608482015260a4016105be565b600281600a0154106116be5760405162461bcd60e51b815260206004820152602c60248201527f5b4c656173652041677265656d656e745d204d6178696d756d20657874656e7360448201526b1a5bdb9cc81c995858da195960a21b60648201526084016105be565b828160060160010160008282546116d59190612a92565b909155505060018101546064906116ed906003612a7b565b6116f79190612adf565b81600101600082825461170a9190612a92565b9091555050600a8101805490600061172183612bd0565b909155505060078101546001820154600a83015460408051888152602081019490945283019190915260608201527f33687519bb2ab0520901057529f171472e2a36ae6179d81a50e5cc40798fe30490608001610780565b6001546000906001600160a01b031663940e1570335b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f79190612be9565b905090565b600154604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d14854906044015b602060405180830381865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118739190612be9565b90505b92915050565b6001546040805163a217fddf60e01b81529051631338fc5d60e31b926118d3926001600160a01b039091169163a217fddf916004808201926020929091908290030181865afa1580156112cd573d6000803e3d6000fd5b806118e357506118e381336117fc565b6118ff5760405162461bcd60e51b81526004016105be90612b1a565b600880546001600160a01b0319166001600160a01b0384169081179091556040519081527fb0c676f9d7afa1a44d28b367dc30782ead78d7f8679914a2ba86d8565e6ba4d19060200161136d565b8587106119b25760405162461bcd60e51b815260206004820152602d60248201527f5b4c656173652041677265656d656e745d20496e76616c69642073746172742060448201526c616e6420656e6420646174657360981b60648201526084016105be565b6119c0622835c06001612a7b565b6119ca8888612acc565b11611a485760405162461bcd60e51b815260206004820152604260248201527f5b4c656173652041677265656d656e745d20456e64206461746520616e64207360448201527f7461727420646174652073686f756c642062652031206d6f6e746820617070616064820152611c9d60f21b608482015260a4016105be565b60038163ffffffff161015611a5c57600080fd5b600f821115611a6a57600080fd5b6000611a763385612536565b90506000611a8433866125c5565b90508180611a8f5750805b611af65760405162461bcd60e51b815260206004820152603260248201527f5b4c656173652041677265656d656e745d204c6573736f72206d757374206f776044820152711b881d1a19481c1c9bdc195c9d1e4813919560721b60648201526084016105be565b600380549081906000611b0883612bd0565b909155505060008181526002602090815260409091208c519091611b309183918f01906125ff565b50600681018b9055600781018a905560018082018a905560028201899055611b5c90622835c090612a7b565b611b66908c612a92565b60088201556000600a820155600b8101879055600381018054891560ff1991821617909155600480830188905560058301805463ffffffff191663ffffffff8916179055600e83018054909216909155546001600160a01b03166340c10f19336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401600060405180830381600087803b158015611c0e57600080fd5b505af1158015611c22573d6000803e3d6000fd5b50505060088201546009830155506040517fd49c0e4c8d3cc20343f7638374606b650aa572502b847d73335d9e9db4b4f6af90611c629084908490612c54565b60405180910390a1505050505050505050505050565b600081815260026020526040908190206004805492516331a9108f60e11b815290810184905290916001600160a01b031690636352211e90602401602060405180830381865afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf49190612a01565b6001600160a01b0316336001600160a01b03161480611d285750600c8101546001600160a01b0316336001600160a01b0316145b611d8f5760405162461bcd60e51b815260206004820152603260248201527f5b4c656173652041677265656d656e745d2053656e646572206d7573742062656044820152711036b0b730b3b2b91037b9103632b9b9b7b960711b60648201526084016105be565b600e81015460ff16611db35760405162461bcd60e51b81526004016105be90612b87565b60048054604051630852cd8d60e31b81529182018490526001600160a01b0316906342966c6890602401600060405180830381600087803b158015611df757600080fd5b505af1158015611e0b573d6000803e3d6000fd5b505050505050565b611e4460405180608001604052806000815260200160008152602001600063ffffffff168152602001600081525090565b6000828152600260205260409020600181015482526005810154611e719063ffffffff1662015180612d47565b6008820154611e869163ffffffff1690612a92565b421115611f1357606481600401548260010154611ea39190612a7b565b611ead9190612adf565b82518390611ebc908390612a92565b905250611ecd622835c06001612a7b565b6008820154611edc9042612acc565b611ee69190612adf565b611ef1906001612a92565b63ffffffff16604083018190528251611f0991612a7b565b6020830152611f22565b60016040830152815160208301525b50919050565b6001546000906001600160a01b031663c395fcb33361178f565b611f4a6124a9565b60008181526002602090815260409182902080548351818402810184019094528084529092611fba9290918491830182828015610a17576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109f9575050505050610a233390565b61201d5760405162461bcd60e51b815260206004820152602e60248201527f5b4c656173652041677265656d656e745d204f6e6c7920746865204c6573736560448201526d194818d85b881c185e481c995b9d60921b60648201526084016105be565b600381015460ff1661208f5760405162461bcd60e51b815260206004820152603560248201527f5b4c656173652041677265656d656e745d205365637572697479206465706f736044820152741a5d081b5d5cdd081899481c185a5908199a5c9cdd605a1b60648201526084016105be565b600681015442108015906120a7575060078101544211155b6121075760405162461bcd60e51b815260206004820152602b60248201527f5b4c656173652041677265656d656e745d204f757473696465206f66206c656160448201526a39b290323ab930ba34b7b760a91b60648201526084016105be565b600061211283611e13565b9050806020015182600d01600082825461212c9190612a92565b909155506121409050622835c06001612a7b565b816040015163ffffffff166121559190612a7b565b600883018054600090612169908490612a92565b90915550506008546005546020830151604051634671b0e360e01b81526001600160a01b0393841693634671b0e3936121ad93899392909116913390600401612aa5565b600060405180830381600087803b1580156121c757600080fd5b505af11580156121db573d6000803e3d6000fd5b50505060088301546040517f73cbadd90979700c98b0b0afcdb764c8e7f9ef93fed005c4c56b518cadf16c5e925061221b91868252602082015260400190565b60405180910390a16020810151600d8301546040517f3238c0c9490ceb260a0b0b63c836df59652b9d663e364c9155ee07bfea24f3f09261226c928783526020830191909152604082015260600190565b60405180910390a15050610b416001600055565b6122886124a9565b600081815260026020908152604091829020805483518184028101840190945280845290926122f89290918491830182828015610a17576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109f9575050505050610a233390565b61236a5760405162461bcd60e51b815260206004820152603860248201527f5b4c656173652041677265656d656e745d204f6e6c7920746865204c6573736560448201527f652063616e207375626d697420746865206465706f736974000000000000000060648201526084016105be565b600381015460ff16156123d75760405162461bcd60e51b815260206004820152602f60248201527f5b4c656173652041677265656d656e745d205365637572697479206465706f7360448201526e1a5d08185b1c9958591e481c185a59608a1b60648201526084016105be565b6008546005546002830154604051634671b0e360e01b81526001600160a01b0393841693634671b0e39361241693889392909116913390600401612aa5565b600060405180830381600087803b15801561243057600080fd5b505af1158015612444573d6000803e3d6000fd5b50505060038201805460ff191660011790555060028101546040517fdf8484d85a50945d4406aa408d13dbbe5b5c8e89da96e4c19cd0e855baadd8b69161249691859190918252602082015260400190565b60405180910390a150610b416001600055565b6002600054036124cc57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600080805b845181101561252e57836001600160a01b03168582815181106124fd576124fd612d6f565b60200260200101516001600160a01b03160361251c576001915061252e565b8061252681612bd0565b9150506124d8565b509392505050565b6006546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e90602401602060405180830381865afa92505050801561259c575060408051601f3d908101601f1916820190925261259991810190612a01565b60015b6125a857506000611876565b836001600160a01b0316816001600160a01b031614915050611876565b600754604051631ae3d99d60e11b81526001600160a01b0384811660048301526024820184905260009216906335c7b33a90604401611832565b828054828255906000526020600020908101928215612654579160200282015b8281111561265457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061261f565b50612660929150612664565b5090565b5b808211156126605760008155600101612665565b60006020828403121561268b57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156126d35783516001600160a01b0316835292840192918401916001016126ae565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b4157600080fd5b8035612715816126f5565b919050565b600082601f83011261272b57600080fd5b8135602067ffffffffffffffff80831115612748576127486126df565b8260051b604051601f19603f8301168101818110848211171561276d5761276d6126df565b60405293845285810183019383810192508785111561278b57600080fd5b83870191505b848210156127b1576127a28261270a565b83529183019190830190612791565b979650505050505050565b600080604083850312156127cf57600080fd5b82359150602083013567ffffffffffffffff8111156127ed57600080fd5b6127f98582860161271a565b9150509250929050565b6000806040838503121561281657600080fd5b50508035926020909101359150565b60008060006060848603121561283a57600080fd5b83359250602084013561284c816126f5565b9150604084013560ff8116811461286257600080fd5b809150509250925092565b60006020828403121561287f57600080fd5b813561288a816126f5565b9392505050565b60006101e0820190508c82528b51602083015260208c0151151560408301528a606083015263ffffffff8a166080830152885160a0830152602089015160c0830152604089015160e08301526060890151610100830152876101208301528661014083015261290c6101608301876001600160a01b03169052565b60ff8516610180830152836101a083015261292c6101c083018415159052565b9c9b505050505050505050505050565b6000806040838503121561294f57600080fd5b823591506020830135612961816126f5565b809150509250929050565b600080600080600080600080610100898b03121561298957600080fd5b883567ffffffffffffffff8111156129a057600080fd5b6129ac8b828c0161271a565b9850506020890135965060408901359550606089013594506080890135935060a0890135925060c0890135915060e089013563ffffffff811681146129f057600080fd5b809150509295985092959890939650565b600060208284031215612a1357600080fd5b815161288a816126f5565b60208082526027908201527f5b4c656173652041677265656d656e745d2053656e646572206d757374206265604082015266102632b9b9b7b960c91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761187657611876612a65565b8082018082111561187657611876612a65565b9384526001600160a01b039283166020850152604084019190915216606082015260800190565b8181038181111561187657611876612a65565b600082612afc57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612b1357600080fd5b5051919050565b60208082526047908201527f5b4163636573734d616e6167656d656e745d204f6e6c79207468652041646d6960408201527f6e206f722066756e6374696f6e206772616e74656420757365722063616e20696060820152661b9d195c9858dd60ca1b608082015260a00190565b60208082526029908201527f5b4c656173652041677265656d656e745d204c6561736520686173206265656e60408201526808185c98da1a5d995960ba1b606082015260800190565b600060018201612be257612be2612a65565b5060010190565b600060208284031215612bfb57600080fd5b8151801515811461288a57600080fd5b6000815480845260208085019450836000528060002060005b83811015612c495781546001600160a01b031687529582019560019182019101612c24565b509495945050505050565b828152604060208201526000610200806040840152612c77610240840185612c0b565b6001850154606085015260028501546080850152600385015460ff16151560a0850152600485015460c0850152600585015463ffffffff1663ffffffff811660e0860152506006850154610100850152600785015461012085015260088501546101408501526009850154610160850152600a850154610180850152600b8501546101a0850152600c8501546001600160a01b0381166101c086015260a081901c60ff166101e086015250600d85015484830152600e85015460ff16801515610220860152915095945050505050565b63ffffffff818116838216028082169190828114612d6757612d67612a65565b505092915050565b634e487b7160e01b600052603260045260246000fdfea264697066735822122030bcae3055a7164c63d92d315c89812ee62015f73590226d65a5cd6ca87fbe0964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4491,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6241,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "accessManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AccessManager)6236"
      },
      {
        "astId": 7170,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "leases",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Lease)7112_storage)"
      },
      {
        "astId": 7172,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "leaseCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 7175,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "leaseNFT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(LeaseNFT)8711"
      },
      {
        "astId": 7178,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "paymentToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)2372"
      },
      {
        "astId": 7181,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "deedNFT",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(DeedNFT)6783"
      },
      {
        "astId": 7184,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "subdivisionNFT",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(SubdivisionNFT)9067"
      },
      {
        "astId": 7187,
        "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
        "label": "fundsManager",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(FundsManager)7037"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AccessManager)6236": {
        "encoding": "inplace",
        "label": "contract AccessManager",
        "numberOfBytes": "20"
      },
      "t_contract(DeedNFT)6783": {
        "encoding": "inplace",
        "label": "contract DeedNFT",
        "numberOfBytes": "20"
      },
      "t_contract(FundsManager)7037": {
        "encoding": "inplace",
        "label": "contract FundsManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2372": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LeaseNFT)8711": {
        "encoding": "inplace",
        "label": "contract LeaseNFT",
        "numberOfBytes": "20"
      },
      "t_contract(SubdivisionNFT)9067": {
        "encoding": "inplace",
        "label": "contract SubdivisionNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Lease)7112_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LeaseAgreement.Lease)",
        "numberOfBytes": "32",
        "value": "t_struct(Lease)7112_storage"
      },
      "t_struct(Deposit)7084_storage": {
        "encoding": "inplace",
        "label": "struct LeaseAgreement.Deposit",
        "members": [
          {
            "astId": 7081,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7083,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "paid",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Lease)7112_storage": {
        "encoding": "inplace",
        "label": "struct LeaseAgreement.Lease",
        "members": [
          {
            "astId": 7087,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "lesseeList",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 7089,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "rentAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7092,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "securityDeposit",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Deposit)7084_storage"
          },
          {
            "astId": 7094,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "latePaymentFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7096,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "gracePeriod",
            "offset": 0,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 7099,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "dates",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(LeaseDates)7079_storage"
          },
          {
            "astId": 7101,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "extensionCount",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 7103,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "deedId",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 7105,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "manager",
            "offset": 0,
            "slot": "12",
            "type": "t_address"
          },
          {
            "astId": 7107,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "managerPercentage",
            "offset": 20,
            "slot": "12",
            "type": "t_uint8"
          },
          {
            "astId": 7109,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "unclaimedRentAmount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 7111,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "isArchived",
            "offset": 0,
            "slot": "14",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(LeaseDates)7079_storage": {
        "encoding": "inplace",
        "label": "struct LeaseAgreement.LeaseDates",
        "members": [
          {
            "astId": 7072,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "startDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7074,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "endDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7076,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "rentDueDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7078,
            "contract": "contracts/LeaseAgreement.sol:LeaseAgreement",
            "label": "distributableDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}