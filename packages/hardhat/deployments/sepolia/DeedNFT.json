{
  "address": "0xC04836E6FFd56c440fd5d6D48cE9701D1D80a759",
  "blockNumber": "5839748",
  "arguments": [],
  "_format": "hh-sol-artifact-1",
  "contractName": "DeedNFT",
  "sourceName": "contracts/DeedNFT.sol",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum DeedNFT.AssetType",
          "name": "newAssetType",
          "type": "uint8"
        }
      ],
      "name": "DeedNFTAssetTypeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deedId",
          "type": "uint256"
        }
      ],
      "name": "DeedNFTBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deedId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "enum DeedNFT.AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isValidated",
              "type": "bool"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "indexed": false,
          "internalType": "struct DeedNFT.DeedInfo",
          "name": "deedInfo",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "DeedNFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newIpfsDetailsHash",
          "type": "string"
        }
      ],
      "name": "DeedNFTUriChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "name": "DeedNFTValidatedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deedId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deedId",
          "type": "uint256"
        }
      ],
      "name": "canSubdivide",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deedId",
          "type": "uint256"
        }
      ],
      "name": "getDeedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum DeedNFT.AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isValidated",
              "type": "bool"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct DeedNFT.DeedInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasAdminRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasValidatorRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_ipfsDetailsHash",
          "type": "string"
        },
        {
          "internalType": "enum DeedNFT.AssetType",
          "name": "_assetType",
          "type": "uint8"
        }
      ],
      "name": "mintAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextDeedId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deedId",
          "type": "uint256"
        },
        {
          "internalType": "enum DeedNFT.AssetType",
          "name": "_assetType",
          "type": "uint8"
        }
      ],
      "name": "setAssetType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deedId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isValid",
          "type": "bool"
        }
      ],
      "name": "setAssetValidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deedId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_ipfsDetailsHash",
          "type": "string"
        }
      ],
      "name": "setIpfsDetailsHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deedId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c6200002c565b620000266200002c565b620000e0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007d5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6125b380620000f06000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de578063b82c356911610097578063c4d66de811610071578063c4d66de814610328578063c87b56dd1461033b578063e985e9c51461034e578063f1bc66731461036157600080fd5b8063b82c3569146102fa578063b88d4fde1461030d578063b99c23e31461032057600080fd5b806370a08231146102a857806389b9e75f146102bb57806391d14854146102c357806395d89b41146102d6578063985e3a64146102de578063a22cb465146102e757600080fd5b806342842e0e1161013057806342842e0e1461022957806342966c681461023c57806362d402bc1461024f5780636352211e1461026f578063682ece02146102825780636f6c15dd1461029557600080fd5b806301ffc9a71461017857806306fdde03146101a0578063081812fc146101b5578063095ea7b3146101e05780631a6c41e2146101f557806323b872dd14610216575b600080fd5b61018b610186366004611cf7565b610374565b60405190151581526020015b60405180910390f35b6101a8610385565b6040516101979190611d64565b6101c86101c3366004611d77565b610429565b6040516001600160a01b039091168152602001610197565b6101f36101ee366004611dac565b61043e565b005b610208610203366004611e91565b61044d565b604051908152602001610197565b6101f3610224366004611eef565b610618565b6101f3610237366004611eef565b6106a3565b6101f361024a366004611d77565b6106c3565b61026261025d366004611d77565b6107a6565b6040516101979190611f63565b6101c861027d366004611d77565b6108a3565b6101f3610290366004611fb6565b6108ae565b6101f36102a3366004611ff0565b6109ed565b6102086102b6366004612020565b610b70565b61018b610bcc565b61018b6102d136600461203b565b610c4d565b6101a8610cc3565b61020860015481565b6101f36102f536600461205e565b610d02565b61018b610308366004611d77565b610d0d565b6101f361031b36600461208a565b610d53565b61018b610d6a565b6101f3610336366004612020565b610d82565b6101a8610349366004611d77565b610ee4565b61018b61035c366004612106565b610eef565b6101f361036f366004612130565b610f3c565b600061037f82611053565b92915050565b60008051602061255e83398151915280546060919081906103a590612177565b80601f01602080910402602001604051908101604052809291908181526020018280546103d190612177565b801561041e5780601f106103f35761010080835404028352916020019161041e565b820191906000526020600020905b81548152906001019060200180831161040157829003601f168201915b505050505091505090565b600061043482611078565b5061037f826110b0565b6104498282336110ea565b5050565b600080546040805163624dd75f60e11b815290516001600160a01b03909216916391d1485491839163c49baebe916004808201926020929091908290030181865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c491906121ab565b336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906121c4565b6105585760405162461bcd60e51b815260040161054f906121e1565b60405180910390fd5b610564846001546110f7565b600180546000908152600260205260409020805490918491839160ff199091169083600381111561059757610597611f2b565b02179055506105a86001548561115c565b805461ff0019166101001781556001547fb34e01ccbb7625db030cd3a3a1d6cdaee286062d973316cbe55a56d261a754a190826105e23390565b876040516105f39493929190612233565b60405180910390a160018054610608916122cd565b60018190559150505b9392505050565b6001600160a01b03821661064257604051633250574960e11b81526000600482015260240161054f565b600061064f8383336111d0565b9050836001600160a01b0316816001600160a01b03161461069d576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161054f565b50505050565b6106be83838360405180602001604052806000815250610d53565b505050565b806106cd816112da565b6001600160a01b0316336001600160a01b0316146106ea82611314565b6040516020016106fa91906122e0565b604051602081830303815290604052906107275760405162461bcd60e51b815260040161054f9190611d64565b50610731826113a7565b6001806000828254610743919061233a565b90915550506000828152600260205260408120805461ffff191681559061076d6001830182611c73565b50506040518281527f61c6643f6e835939ae6da3352c52e1b29a86e4ee6599ab73c5d9a416f75d6ed09060200160405180910390a15050565b6107ae611c85565b8160006107ba826112da565b6001600160a01b031614156107ce82611314565b6040516020016107de919061234d565b6040516020818303038152906040529061080b5760405162461bcd60e51b815260040161054f9190611d64565b50600083815260026020526040908190208151606081019092528054829060ff16600381111561083d5761083d611f2b565b600381111561084e5761084e611f2b565b81528154610100900460ff16151560208201526040805161014081018083529190920191906001840190600a9082845b81548152602001906001019080831161087e5750505050508152505091505b50919050565b600061037f82611078565b8160006108ba826112da565b6001600160a01b031614156108ce82611314565b6040516020016108de919061234d565b6040516020818303038152906040529061090b5760405162461bcd60e51b815260040161054f9190611d64565b5082610916816112da565b6001600160a01b0316336001600160a01b03161461093382611314565b60405160200161094391906122e0565b604051602081830303815290604052906109705760405162461bcd60e51b815260040161054f9190611d64565b50600084815260026020526040902080548490829060ff1916600183600381111561099d5761099d611f2b565b02179055506109ad8560006113e2565b7f0ed549f5e55ca444d100349be44584b8ad027eded8936b4b6248776ddcb93d1a85856040516109de9291906123a1565b60405180910390a15050505050565b6000546040805163624dd75f60e11b815290516001600160a01b03909216916391d1485491839163c49baebe916004808201926020929091908290030181865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6391906121ab565b336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad291906121c4565b610aee5760405162461bcd60e51b815260040161054f906121e1565b33610af8836112da565b6001600160a01b031603610b665760405162461bcd60e51b815260206004820152602f60248201527f5b446565644e46545d204f776e65722063616e6e6f742076616c69646174652060448201526e1d1a195a5c881bdddb88185cdcd95d608a1b606482015260840161054f565b61044982826113e2565b600060008051602061255e8339815191526001600160a01b038316610bab576040516322718ad960e21b81526000600482015260240161054f565b6001600160a01b039092166000908152600390920160205250604090205490565b600080546001600160a01b031663940e1570335b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4891906121c4565b905090565b60008054604051632474521560e21b8152600481018590526001600160a01b038481166024830152909116906391d1485490604401602060405180830381865afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061191906121c4565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079301805460609160008051602061255e833981519152916103a590612177565b61044933838361143c565b600080610d19836107a6565b5190506000816003811115610d3057610d30611f2b565b148061061157506002816003811115610d4b57610d4b611f2b565b149392505050565b610d5e848484610618565b61069d848484846114ed565b600080546001600160a01b031663c395fcb333610be0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610dc85750825b905060008267ffffffffffffffff166001148015610de55750303b155b905081158015610df3575080155b15610e115760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610e3b57845460ff60401b1916600160401b1785555b610e43611616565b610e88604051806040016040528060078152602001661119595913919560ca1b815250604051806040016040528060048152602001631111515160e21b815250611620565b610e9186611632565b600180558315610edc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906020015b60405180910390a15b505050505050565b606061037f82611748565b6001600160a01b0391821660009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793056020908152604080832093909416825291909152205460ff1690565b816000610f48826112da565b6001600160a01b03161415610f5c82611314565b604051602001610f6c919061234d565b60405160208183030381529060405290610f995760405162461bcd60e51b815260040161054f9190611d64565b5082610fa4816112da565b6001600160a01b0316336001600160a01b031614610fc182611314565b604051602001610fd191906122e0565b60405160208183030381529060405290610ffe5760405162461bcd60e51b815260040161054f9190611d64565b50611009848461115c565b6110148460006113e2565b7ff0466cb4b529fe609c0a35fb0c8bb9a36ffb6c775a7fe7f83dec314f36bc5c9184846040516110459291906123b5565b60405180910390a150505050565b60006001600160e01b03198216632483248360e11b148061037f575061037f8261187d565b600080611084836112da565b90506001600160a01b03811661037f57604051637e27328960e01b81526004810184905260240161054f565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930460205260409020546001600160a01b031690565b6106be83838360016118cd565b6001600160a01b03821661112157604051633250574960e11b81526000600482015260240161054f565b600061112f838360006111d0565b90506001600160a01b038116156106be576040516339e3563760e11b81526000600482015260240161054f565b60008281527f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900602081905260409091206111968382612414565b506040518381527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020015b60405180910390a1505050565b600060008051602061255e833981519152816111eb856112da565b90506001600160a01b03841615611207576112078185876119e3565b6001600160a01b03811615611247576112246000866000806118cd565b6001600160a01b0381166000908152600383016020526040902080546000190190555b6001600160a01b03861615611278576001600160a01b03861660009081526003830160205260409020805460010190555b600085815260028301602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a495945050505050565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930260205260409020546001600160a01b031690565b6060600061132183611a47565b600101905060008167ffffffffffffffff81111561134157611341611dd6565b6040519080825280601f01601f19166020018201604052801561136b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461137557509392505050565b60006113b660008360006111d0565b90506001600160a01b03811661044957604051637e27328960e01b81526004810183905260240161054f565b600082815260026020908152604091829020805461ff001916610100851515908102919091178255835186815292830152917f6bed93006e6710fb84e37d9194eff400299d02ba0557551cc2245c1f1d8183ce91016111c3565b60008051602061255e8339815191526001600160a01b03831661147d57604051630b61174360e31b81526001600160a01b038416600482015260240161054f565b6001600160a01b038481166000818152600584016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6001600160a01b0383163b1561069d57604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061152f9033908890879087906004016124d4565b6020604051808303816000875af192505050801561156a575060408051601f3d908101601f1916820190925261156791810190612511565b60015b6115d3573d808015611598576040519150601f19603f3d011682016040523d82523d6000602084013e61159d565b606091505b5080516000036115cb57604051633250574960e11b81526001600160a01b038516600482015260240161054f565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461160f57604051633250574960e11b81526001600160a01b038516600482015260240161054f565b5050505050565b61161e611b1f565b565b611628611b1f565b6104498282611b68565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156116785750825b905060008267ffffffffffffffff1660011480156116955750303b155b9050811580156116a3575080155b156116c15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156116eb57845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b0388161790558315610edc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602001610ed3565b60607f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e790061177483611078565b506000838152602082905260408120805461178e90612177565b80601f01602080910402602001604051908101604052809291908181526020018280546117ba90612177565b80156118075780601f106117dc57610100808354040283529160200191611807565b820191906000526020600020905b8154815290600101906020018083116117ea57829003601f168201915b50505050509050600061182560408051602081019091526000815290565b9050805160000361183857509392505050565b81511561186b57808260405160200161185292919061252e565b6040516020818303038152906040529350505050919050565b61187485611b99565b95945050505050565b60006001600160e01b031982166380ac58cd60e01b14806118ae57506001600160e01b03198216635b5e139f60e01b145b8061037f57506301ffc9a760e01b6001600160e01b031983161461037f565b60008051602061255e83398151915281806118f057506001600160a01b03831615155b156119b257600061190085611078565b90506001600160a01b0384161580159061192c5750836001600160a01b0316816001600160a01b031614155b801561193f575061193d8185610eef565b155b156119685760405163a9fbf51f60e01b81526001600160a01b038516600482015260240161054f565b82156119b05784866001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b600093845260040160205250506040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6119ee838383611c0d565b6106be576001600160a01b038316611a1c57604051637e27328960e01b81526004810182905260240161054f565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161054f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611a865772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611ab2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ad057662386f26fc10000830492506010015b6305f5e1008310611ae8576305f5e100830492506008015b6127108310611afc57612710830492506004015b60648310611b0e576064830492506002015b600a831061037f5760010192915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661161e57604051631afcd79f60e31b815260040160405180910390fd5b611b70611b1f565b60008051602061255e83398151915280611b8a8482612414565b506001810161069d8382612414565b6060611ba482611078565b506000611bbc60408051602081019091526000815290565b90506000815111611bdc5760405180602001604052806000815250610611565b80611be684611314565b604051602001611bf792919061252e565b6040516020818303038152906040529392505050565b60006001600160a01b03831615801590611c6b5750826001600160a01b0316846001600160a01b03161480611c475750611c478484610eef565b80611c6b5750826001600160a01b0316611c60836110b0565b6001600160a01b0316145b949350505050565b50611c8290600a810190611ca9565b50565b6040805160608101825260008082526020820152908101611ca4611cc2565b905290565b5b80821115611cbe5760008155600101611caa565b5090565b604051806101400160405280600a906020820280368337509192915050565b6001600160e01b031981168114611c8257600080fd5b600060208284031215611d0957600080fd5b813561061181611ce1565b60005b83811015611d2f578181015183820152602001611d17565b50506000910152565b60008151808452611d50816020860160208601611d14565b601f01601f19169290920160200192915050565b6020815260006106116020830184611d38565b600060208284031215611d8957600080fd5b5035919050565b80356001600160a01b0381168114611da757600080fd5b919050565b60008060408385031215611dbf57600080fd5b611dc883611d90565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611e0757611e07611dd6565b604051601f8501601f19908116603f01168101908282118183101715611e2f57611e2f611dd6565b81604052809350858152868686011115611e4857600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e7357600080fd5b61061183833560208501611dec565b803560048110611da757600080fd5b600080600060608486031215611ea657600080fd5b611eaf84611d90565b9250602084013567ffffffffffffffff811115611ecb57600080fd5b611ed786828701611e62565b925050611ee660408501611e82565b90509250925092565b600080600060608486031215611f0457600080fd5b611f0d84611d90565b9250611f1b60208501611d90565b9150604084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b60048110611f5f57634e487b7160e01b600052602160045260246000fd5b9052565b600061018082019050611f77828451611f41565b60208084015115158184015260408401516040840160005b600a811015611fac57825182529183019190830190600101611f8f565b5050505092915050565b60008060408385031215611fc957600080fd5b82359150611fd960208401611e82565b90509250929050565b8015158114611c8257600080fd5b6000806040838503121561200357600080fd5b82359150602083013561201581611fe2565b809150509250929050565b60006020828403121561203257600080fd5b61061182611d90565b6000806040838503121561204e57600080fd5b82359150611fd960208401611d90565b6000806040838503121561207157600080fd5b61207a83611d90565b9150602083013561201581611fe2565b600080600080608085870312156120a057600080fd5b6120a985611d90565b93506120b760208601611d90565b925060408501359150606085013567ffffffffffffffff8111156120da57600080fd5b8501601f810187136120eb57600080fd5b6120fa87823560208401611dec565b91505092959194509250565b6000806040838503121561211957600080fd5b61212283611d90565b9150611fd960208401611d90565b6000806040838503121561214357600080fd5b82359150602083013567ffffffffffffffff81111561216157600080fd5b61216d85828601611e62565b9150509250929050565b600181811c9082168061218b57607f821691505b60208210810361089d57634e487b7160e01b600052602260045260246000fd5b6000602082840312156121bd57600080fd5b5051919050565b6000602082840312156121d657600080fd5b815161061181611fe2565b60208082526032908201527f5b4163636573734d616e6167656d656e745d204f6e6c79207468652076616c6960408201527119185d1bdc8818d85b881a5b9d195c9858dd60721b606082015260800190565b60006101e08683526020865461224e82860160ff8316611f41565b60081c60ff161515604085015260016060850188820160005b600a811015612283578154835291840191908301908301612267565b505050506001600160a01b0386166101a0850152506101c083018190526122ac81840185611d38565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561037f5761037f6122b7565b7f5b446565644e46545d204d757374206265206f776e6572206f6620746865204481526b032b2b2103bb4ba341034b2160a51b60208201526000825161232d81602c850160208701611d14565b91909101602c0192915050565b8181038181111561037f5761037f6122b7565b7f5b446565644e46545d204465656420646f6573206e6f7420657869737420776981526503a341034b2160d51b602082015260008251612394816026850160208701611d14565b9190910160260192915050565b828152604081016106116020830184611f41565b828152604060208201526000611c6b6040830184611d38565b601f8211156106be57600081815260208120601f850160051c810160208610156123f55750805b601f850160051c820191505b81811015610edc57828155600101612401565b815167ffffffffffffffff81111561242e5761242e611dd6565b6124428161243c8454612177565b846123ce565b602080601f831160018114612477576000841561245f5750858301515b600019600386901b1c1916600185901b178555610edc565b600085815260208120601f198616915b828110156124a657888601518255948401946001909101908401612487565b50858210156124c45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061250790830184611d38565b9695505050505050565b60006020828403121561252357600080fd5b815161061181611ce1565b60008351612540818460208801611d14565b835190830190612554818360208801611d14565b0194935050505056fe80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300a2646970667358221220dc085898497b0beea40d818f00f4ef8fd971d80799991a09d31083779a43ddea64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de578063b82c356911610097578063c4d66de811610071578063c4d66de814610328578063c87b56dd1461033b578063e985e9c51461034e578063f1bc66731461036157600080fd5b8063b82c3569146102fa578063b88d4fde1461030d578063b99c23e31461032057600080fd5b806370a08231146102a857806389b9e75f146102bb57806391d14854146102c357806395d89b41146102d6578063985e3a64146102de578063a22cb465146102e757600080fd5b806342842e0e1161013057806342842e0e1461022957806342966c681461023c57806362d402bc1461024f5780636352211e1461026f578063682ece02146102825780636f6c15dd1461029557600080fd5b806301ffc9a71461017857806306fdde03146101a0578063081812fc146101b5578063095ea7b3146101e05780631a6c41e2146101f557806323b872dd14610216575b600080fd5b61018b610186366004611cf7565b610374565b60405190151581526020015b60405180910390f35b6101a8610385565b6040516101979190611d64565b6101c86101c3366004611d77565b610429565b6040516001600160a01b039091168152602001610197565b6101f36101ee366004611dac565b61043e565b005b610208610203366004611e91565b61044d565b604051908152602001610197565b6101f3610224366004611eef565b610618565b6101f3610237366004611eef565b6106a3565b6101f361024a366004611d77565b6106c3565b61026261025d366004611d77565b6107a6565b6040516101979190611f63565b6101c861027d366004611d77565b6108a3565b6101f3610290366004611fb6565b6108ae565b6101f36102a3366004611ff0565b6109ed565b6102086102b6366004612020565b610b70565b61018b610bcc565b61018b6102d136600461203b565b610c4d565b6101a8610cc3565b61020860015481565b6101f36102f536600461205e565b610d02565b61018b610308366004611d77565b610d0d565b6101f361031b36600461208a565b610d53565b61018b610d6a565b6101f3610336366004612020565b610d82565b6101a8610349366004611d77565b610ee4565b61018b61035c366004612106565b610eef565b6101f361036f366004612130565b610f3c565b600061037f82611053565b92915050565b60008051602061255e83398151915280546060919081906103a590612177565b80601f01602080910402602001604051908101604052809291908181526020018280546103d190612177565b801561041e5780601f106103f35761010080835404028352916020019161041e565b820191906000526020600020905b81548152906001019060200180831161040157829003601f168201915b505050505091505090565b600061043482611078565b5061037f826110b0565b6104498282336110ea565b5050565b600080546040805163624dd75f60e11b815290516001600160a01b03909216916391d1485491839163c49baebe916004808201926020929091908290030181865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c491906121ab565b336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906121c4565b6105585760405162461bcd60e51b815260040161054f906121e1565b60405180910390fd5b610564846001546110f7565b600180546000908152600260205260409020805490918491839160ff199091169083600381111561059757610597611f2b565b02179055506105a86001548561115c565b805461ff0019166101001781556001547fb34e01ccbb7625db030cd3a3a1d6cdaee286062d973316cbe55a56d261a754a190826105e23390565b876040516105f39493929190612233565b60405180910390a160018054610608916122cd565b60018190559150505b9392505050565b6001600160a01b03821661064257604051633250574960e11b81526000600482015260240161054f565b600061064f8383336111d0565b9050836001600160a01b0316816001600160a01b03161461069d576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161054f565b50505050565b6106be83838360405180602001604052806000815250610d53565b505050565b806106cd816112da565b6001600160a01b0316336001600160a01b0316146106ea82611314565b6040516020016106fa91906122e0565b604051602081830303815290604052906107275760405162461bcd60e51b815260040161054f9190611d64565b50610731826113a7565b6001806000828254610743919061233a565b90915550506000828152600260205260408120805461ffff191681559061076d6001830182611c73565b50506040518281527f61c6643f6e835939ae6da3352c52e1b29a86e4ee6599ab73c5d9a416f75d6ed09060200160405180910390a15050565b6107ae611c85565b8160006107ba826112da565b6001600160a01b031614156107ce82611314565b6040516020016107de919061234d565b6040516020818303038152906040529061080b5760405162461bcd60e51b815260040161054f9190611d64565b50600083815260026020526040908190208151606081019092528054829060ff16600381111561083d5761083d611f2b565b600381111561084e5761084e611f2b565b81528154610100900460ff16151560208201526040805161014081018083529190920191906001840190600a9082845b81548152602001906001019080831161087e5750505050508152505091505b50919050565b600061037f82611078565b8160006108ba826112da565b6001600160a01b031614156108ce82611314565b6040516020016108de919061234d565b6040516020818303038152906040529061090b5760405162461bcd60e51b815260040161054f9190611d64565b5082610916816112da565b6001600160a01b0316336001600160a01b03161461093382611314565b60405160200161094391906122e0565b604051602081830303815290604052906109705760405162461bcd60e51b815260040161054f9190611d64565b50600084815260026020526040902080548490829060ff1916600183600381111561099d5761099d611f2b565b02179055506109ad8560006113e2565b7f0ed549f5e55ca444d100349be44584b8ad027eded8936b4b6248776ddcb93d1a85856040516109de9291906123a1565b60405180910390a15050505050565b6000546040805163624dd75f60e11b815290516001600160a01b03909216916391d1485491839163c49baebe916004808201926020929091908290030181865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6391906121ab565b336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad291906121c4565b610aee5760405162461bcd60e51b815260040161054f906121e1565b33610af8836112da565b6001600160a01b031603610b665760405162461bcd60e51b815260206004820152602f60248201527f5b446565644e46545d204f776e65722063616e6e6f742076616c69646174652060448201526e1d1a195a5c881bdddb88185cdcd95d608a1b606482015260840161054f565b61044982826113e2565b600060008051602061255e8339815191526001600160a01b038316610bab576040516322718ad960e21b81526000600482015260240161054f565b6001600160a01b039092166000908152600390920160205250604090205490565b600080546001600160a01b031663940e1570335b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4891906121c4565b905090565b60008054604051632474521560e21b8152600481018590526001600160a01b038481166024830152909116906391d1485490604401602060405180830381865afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061191906121c4565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079301805460609160008051602061255e833981519152916103a590612177565b61044933838361143c565b600080610d19836107a6565b5190506000816003811115610d3057610d30611f2b565b148061061157506002816003811115610d4b57610d4b611f2b565b149392505050565b610d5e848484610618565b61069d848484846114ed565b600080546001600160a01b031663c395fcb333610be0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610dc85750825b905060008267ffffffffffffffff166001148015610de55750303b155b905081158015610df3575080155b15610e115760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610e3b57845460ff60401b1916600160401b1785555b610e43611616565b610e88604051806040016040528060078152602001661119595913919560ca1b815250604051806040016040528060048152602001631111515160e21b815250611620565b610e9186611632565b600180558315610edc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906020015b60405180910390a15b505050505050565b606061037f82611748565b6001600160a01b0391821660009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793056020908152604080832093909416825291909152205460ff1690565b816000610f48826112da565b6001600160a01b03161415610f5c82611314565b604051602001610f6c919061234d565b60405160208183030381529060405290610f995760405162461bcd60e51b815260040161054f9190611d64565b5082610fa4816112da565b6001600160a01b0316336001600160a01b031614610fc182611314565b604051602001610fd191906122e0565b60405160208183030381529060405290610ffe5760405162461bcd60e51b815260040161054f9190611d64565b50611009848461115c565b6110148460006113e2565b7ff0466cb4b529fe609c0a35fb0c8bb9a36ffb6c775a7fe7f83dec314f36bc5c9184846040516110459291906123b5565b60405180910390a150505050565b60006001600160e01b03198216632483248360e11b148061037f575061037f8261187d565b600080611084836112da565b90506001600160a01b03811661037f57604051637e27328960e01b81526004810184905260240161054f565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930460205260409020546001600160a01b031690565b6106be83838360016118cd565b6001600160a01b03821661112157604051633250574960e11b81526000600482015260240161054f565b600061112f838360006111d0565b90506001600160a01b038116156106be576040516339e3563760e11b81526000600482015260240161054f565b60008281527f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900602081905260409091206111968382612414565b506040518381527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020015b60405180910390a1505050565b600060008051602061255e833981519152816111eb856112da565b90506001600160a01b03841615611207576112078185876119e3565b6001600160a01b03811615611247576112246000866000806118cd565b6001600160a01b0381166000908152600383016020526040902080546000190190555b6001600160a01b03861615611278576001600160a01b03861660009081526003830160205260409020805460010190555b600085815260028301602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a495945050505050565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930260205260409020546001600160a01b031690565b6060600061132183611a47565b600101905060008167ffffffffffffffff81111561134157611341611dd6565b6040519080825280601f01601f19166020018201604052801561136b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461137557509392505050565b60006113b660008360006111d0565b90506001600160a01b03811661044957604051637e27328960e01b81526004810183905260240161054f565b600082815260026020908152604091829020805461ff001916610100851515908102919091178255835186815292830152917f6bed93006e6710fb84e37d9194eff400299d02ba0557551cc2245c1f1d8183ce91016111c3565b60008051602061255e8339815191526001600160a01b03831661147d57604051630b61174360e31b81526001600160a01b038416600482015260240161054f565b6001600160a01b038481166000818152600584016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6001600160a01b0383163b1561069d57604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061152f9033908890879087906004016124d4565b6020604051808303816000875af192505050801561156a575060408051601f3d908101601f1916820190925261156791810190612511565b60015b6115d3573d808015611598576040519150601f19603f3d011682016040523d82523d6000602084013e61159d565b606091505b5080516000036115cb57604051633250574960e11b81526001600160a01b038516600482015260240161054f565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461160f57604051633250574960e11b81526001600160a01b038516600482015260240161054f565b5050505050565b61161e611b1f565b565b611628611b1f565b6104498282611b68565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156116785750825b905060008267ffffffffffffffff1660011480156116955750303b155b9050811580156116a3575080155b156116c15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156116eb57845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b0388161790558315610edc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602001610ed3565b60607f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e790061177483611078565b506000838152602082905260408120805461178e90612177565b80601f01602080910402602001604051908101604052809291908181526020018280546117ba90612177565b80156118075780601f106117dc57610100808354040283529160200191611807565b820191906000526020600020905b8154815290600101906020018083116117ea57829003601f168201915b50505050509050600061182560408051602081019091526000815290565b9050805160000361183857509392505050565b81511561186b57808260405160200161185292919061252e565b6040516020818303038152906040529350505050919050565b61187485611b99565b95945050505050565b60006001600160e01b031982166380ac58cd60e01b14806118ae57506001600160e01b03198216635b5e139f60e01b145b8061037f57506301ffc9a760e01b6001600160e01b031983161461037f565b60008051602061255e83398151915281806118f057506001600160a01b03831615155b156119b257600061190085611078565b90506001600160a01b0384161580159061192c5750836001600160a01b0316816001600160a01b031614155b801561193f575061193d8185610eef565b155b156119685760405163a9fbf51f60e01b81526001600160a01b038516600482015260240161054f565b82156119b05784866001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b600093845260040160205250506040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6119ee838383611c0d565b6106be576001600160a01b038316611a1c57604051637e27328960e01b81526004810182905260240161054f565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161054f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611a865772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611ab2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ad057662386f26fc10000830492506010015b6305f5e1008310611ae8576305f5e100830492506008015b6127108310611afc57612710830492506004015b60648310611b0e576064830492506002015b600a831061037f5760010192915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661161e57604051631afcd79f60e31b815260040160405180910390fd5b611b70611b1f565b60008051602061255e83398151915280611b8a8482612414565b506001810161069d8382612414565b6060611ba482611078565b506000611bbc60408051602081019091526000815290565b90506000815111611bdc5760405180602001604052806000815250610611565b80611be684611314565b604051602001611bf792919061252e565b6040516020818303038152906040529392505050565b60006001600160a01b03831615801590611c6b5750826001600160a01b0316846001600160a01b03161480611c475750611c478484610eef565b80611c6b5750826001600160a01b0316611c60836110b0565b6001600160a01b0316145b949350505050565b50611c8290600a810190611ca9565b50565b6040805160608101825260008082526020820152908101611ca4611cc2565b905290565b5b80821115611cbe5760008155600101611caa565b5090565b604051806101400160405280600a906020820280368337509192915050565b6001600160e01b031981168114611c8257600080fd5b600060208284031215611d0957600080fd5b813561061181611ce1565b60005b83811015611d2f578181015183820152602001611d17565b50506000910152565b60008151808452611d50816020860160208601611d14565b601f01601f19169290920160200192915050565b6020815260006106116020830184611d38565b600060208284031215611d8957600080fd5b5035919050565b80356001600160a01b0381168114611da757600080fd5b919050565b60008060408385031215611dbf57600080fd5b611dc883611d90565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611e0757611e07611dd6565b604051601f8501601f19908116603f01168101908282118183101715611e2f57611e2f611dd6565b81604052809350858152868686011115611e4857600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e7357600080fd5b61061183833560208501611dec565b803560048110611da757600080fd5b600080600060608486031215611ea657600080fd5b611eaf84611d90565b9250602084013567ffffffffffffffff811115611ecb57600080fd5b611ed786828701611e62565b925050611ee660408501611e82565b90509250925092565b600080600060608486031215611f0457600080fd5b611f0d84611d90565b9250611f1b60208501611d90565b9150604084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b60048110611f5f57634e487b7160e01b600052602160045260246000fd5b9052565b600061018082019050611f77828451611f41565b60208084015115158184015260408401516040840160005b600a811015611fac57825182529183019190830190600101611f8f565b5050505092915050565b60008060408385031215611fc957600080fd5b82359150611fd960208401611e82565b90509250929050565b8015158114611c8257600080fd5b6000806040838503121561200357600080fd5b82359150602083013561201581611fe2565b809150509250929050565b60006020828403121561203257600080fd5b61061182611d90565b6000806040838503121561204e57600080fd5b82359150611fd960208401611d90565b6000806040838503121561207157600080fd5b61207a83611d90565b9150602083013561201581611fe2565b600080600080608085870312156120a057600080fd5b6120a985611d90565b93506120b760208601611d90565b925060408501359150606085013567ffffffffffffffff8111156120da57600080fd5b8501601f810187136120eb57600080fd5b6120fa87823560208401611dec565b91505092959194509250565b6000806040838503121561211957600080fd5b61212283611d90565b9150611fd960208401611d90565b6000806040838503121561214357600080fd5b82359150602083013567ffffffffffffffff81111561216157600080fd5b61216d85828601611e62565b9150509250929050565b600181811c9082168061218b57607f821691505b60208210810361089d57634e487b7160e01b600052602260045260246000fd5b6000602082840312156121bd57600080fd5b5051919050565b6000602082840312156121d657600080fd5b815161061181611fe2565b60208082526032908201527f5b4163636573734d616e6167656d656e745d204f6e6c79207468652076616c6960408201527119185d1bdc8818d85b881a5b9d195c9858dd60721b606082015260800190565b60006101e08683526020865461224e82860160ff8316611f41565b60081c60ff161515604085015260016060850188820160005b600a811015612283578154835291840191908301908301612267565b505050506001600160a01b0386166101a0850152506101c083018190526122ac81840185611d38565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561037f5761037f6122b7565b7f5b446565644e46545d204d757374206265206f776e6572206f6620746865204481526b032b2b2103bb4ba341034b2160a51b60208201526000825161232d81602c850160208701611d14565b91909101602c0192915050565b8181038181111561037f5761037f6122b7565b7f5b446565644e46545d204465656420646f6573206e6f7420657869737420776981526503a341034b2160d51b602082015260008251612394816026850160208701611d14565b9190910160260192915050565b828152604081016106116020830184611f41565b828152604060208201526000611c6b6040830184611d38565b601f8211156106be57600081815260208120601f850160051c810160208610156123f55750805b601f850160051c820191505b81811015610edc57828155600101612401565b815167ffffffffffffffff81111561242e5761242e611dd6565b6124428161243c8454612177565b846123ce565b602080601f831160018114612477576000841561245f5750858301515b600019600386901b1c1916600185901b178555610edc565b600085815260208120601f198616915b828110156124a657888601518255948401946001909101908401612487565b50858210156124c45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061250790830184611d38565b9695505050505050565b60006020828403121561252357600080fd5b815161061181611ce1565b60008351612540818460208801611d14565b835190830190612554818360208801611d14565b0194935050505056fe80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300a2646970667358221220dc085898497b0beea40d818f00f4ef8fd971d80799991a09d31083779a43ddea64736f6c63430008140033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "evm": {
    "bytecode": {
      "functionDebugData": {
        "@_4344": {
          "entryPoint": null,
          "id": 4344,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_4571": {
          "entryPoint": null,
          "id": 4571,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_disableInitializers_584": {
          "entryPoint": 44,
          "id": 584,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_getInitializableStorage_615": {
          "entryPoint": null,
          "id": 615,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:216:23",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:23",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "113:101:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "123:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "135:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "146:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "131:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "131:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "123:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "165:9:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "180:6:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "196:2:23",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "200:1:23",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "192:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "192:10:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "204:1:23",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "188:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "188:18:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "176:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "176:31:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "158:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "158:50:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "158:50:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "82:9:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "93:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "104:4:23",
                    "type": ""
                  }
                ],
                "src": "14:200:23"
              }
            ]
          },
          "contents": "{\n    { }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(64, 1), 1)))\n    }\n}",
          "id": 23,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "linkReferences": {},
      "object": "60806040523480156200001157600080fd5b506200001c6200002c565b620000266200002c565b620000e0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007d5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6125b380620000f06000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de578063b82c356911610097578063c4d66de811610071578063c4d66de814610328578063c87b56dd1461033b578063e985e9c51461034e578063f1bc66731461036157600080fd5b8063b82c3569146102fa578063b88d4fde1461030d578063b99c23e31461032057600080fd5b806370a08231146102a857806389b9e75f146102bb57806391d14854146102c357806395d89b41146102d6578063985e3a64146102de578063a22cb465146102e757600080fd5b806342842e0e1161013057806342842e0e1461022957806342966c681461023c57806362d402bc1461024f5780636352211e1461026f578063682ece02146102825780636f6c15dd1461029557600080fd5b806301ffc9a71461017857806306fdde03146101a0578063081812fc146101b5578063095ea7b3146101e05780631a6c41e2146101f557806323b872dd14610216575b600080fd5b61018b610186366004611cf7565b610374565b60405190151581526020015b60405180910390f35b6101a8610385565b6040516101979190611d64565b6101c86101c3366004611d77565b610429565b6040516001600160a01b039091168152602001610197565b6101f36101ee366004611dac565b61043e565b005b610208610203366004611e91565b61044d565b604051908152602001610197565b6101f3610224366004611eef565b610618565b6101f3610237366004611eef565b6106a3565b6101f361024a366004611d77565b6106c3565b61026261025d366004611d77565b6107a6565b6040516101979190611f63565b6101c861027d366004611d77565b6108a3565b6101f3610290366004611fb6565b6108ae565b6101f36102a3366004611ff0565b6109ed565b6102086102b6366004612020565b610b70565b61018b610bcc565b61018b6102d136600461203b565b610c4d565b6101a8610cc3565b61020860015481565b6101f36102f536600461205e565b610d02565b61018b610308366004611d77565b610d0d565b6101f361031b36600461208a565b610d53565b61018b610d6a565b6101f3610336366004612020565b610d82565b6101a8610349366004611d77565b610ee4565b61018b61035c366004612106565b610eef565b6101f361036f366004612130565b610f3c565b600061037f82611053565b92915050565b60008051602061255e83398151915280546060919081906103a590612177565b80601f01602080910402602001604051908101604052809291908181526020018280546103d190612177565b801561041e5780601f106103f35761010080835404028352916020019161041e565b820191906000526020600020905b81548152906001019060200180831161040157829003601f168201915b505050505091505090565b600061043482611078565b5061037f826110b0565b6104498282336110ea565b5050565b600080546040805163624dd75f60e11b815290516001600160a01b03909216916391d1485491839163c49baebe916004808201926020929091908290030181865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c491906121ab565b336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906121c4565b6105585760405162461bcd60e51b815260040161054f906121e1565b60405180910390fd5b610564846001546110f7565b600180546000908152600260205260409020805490918491839160ff199091169083600381111561059757610597611f2b565b02179055506105a86001548561115c565b805461ff0019166101001781556001547fb34e01ccbb7625db030cd3a3a1d6cdaee286062d973316cbe55a56d261a754a190826105e23390565b876040516105f39493929190612233565b60405180910390a160018054610608916122cd565b60018190559150505b9392505050565b6001600160a01b03821661064257604051633250574960e11b81526000600482015260240161054f565b600061064f8383336111d0565b9050836001600160a01b0316816001600160a01b03161461069d576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161054f565b50505050565b6106be83838360405180602001604052806000815250610d53565b505050565b806106cd816112da565b6001600160a01b0316336001600160a01b0316146106ea82611314565b6040516020016106fa91906122e0565b604051602081830303815290604052906107275760405162461bcd60e51b815260040161054f9190611d64565b50610731826113a7565b6001806000828254610743919061233a565b90915550506000828152600260205260408120805461ffff191681559061076d6001830182611c73565b50506040518281527f61c6643f6e835939ae6da3352c52e1b29a86e4ee6599ab73c5d9a416f75d6ed09060200160405180910390a15050565b6107ae611c85565b8160006107ba826112da565b6001600160a01b031614156107ce82611314565b6040516020016107de919061234d565b6040516020818303038152906040529061080b5760405162461bcd60e51b815260040161054f9190611d64565b50600083815260026020526040908190208151606081019092528054829060ff16600381111561083d5761083d611f2b565b600381111561084e5761084e611f2b565b81528154610100900460ff16151560208201526040805161014081018083529190920191906001840190600a9082845b81548152602001906001019080831161087e5750505050508152505091505b50919050565b600061037f82611078565b8160006108ba826112da565b6001600160a01b031614156108ce82611314565b6040516020016108de919061234d565b6040516020818303038152906040529061090b5760405162461bcd60e51b815260040161054f9190611d64565b5082610916816112da565b6001600160a01b0316336001600160a01b03161461093382611314565b60405160200161094391906122e0565b604051602081830303815290604052906109705760405162461bcd60e51b815260040161054f9190611d64565b50600084815260026020526040902080548490829060ff1916600183600381111561099d5761099d611f2b565b02179055506109ad8560006113e2565b7f0ed549f5e55ca444d100349be44584b8ad027eded8936b4b6248776ddcb93d1a85856040516109de9291906123a1565b60405180910390a15050505050565b6000546040805163624dd75f60e11b815290516001600160a01b03909216916391d1485491839163c49baebe916004808201926020929091908290030181865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6391906121ab565b336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad291906121c4565b610aee5760405162461bcd60e51b815260040161054f906121e1565b33610af8836112da565b6001600160a01b031603610b665760405162461bcd60e51b815260206004820152602f60248201527f5b446565644e46545d204f776e65722063616e6e6f742076616c69646174652060448201526e1d1a195a5c881bdddb88185cdcd95d608a1b606482015260840161054f565b61044982826113e2565b600060008051602061255e8339815191526001600160a01b038316610bab576040516322718ad960e21b81526000600482015260240161054f565b6001600160a01b039092166000908152600390920160205250604090205490565b600080546001600160a01b031663940e1570335b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4891906121c4565b905090565b60008054604051632474521560e21b8152600481018590526001600160a01b038481166024830152909116906391d1485490604401602060405180830381865afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061191906121c4565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079301805460609160008051602061255e833981519152916103a590612177565b61044933838361143c565b600080610d19836107a6565b5190506000816003811115610d3057610d30611f2b565b148061061157506002816003811115610d4b57610d4b611f2b565b149392505050565b610d5e848484610618565b61069d848484846114ed565b600080546001600160a01b031663c395fcb333610be0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610dc85750825b905060008267ffffffffffffffff166001148015610de55750303b155b905081158015610df3575080155b15610e115760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610e3b57845460ff60401b1916600160401b1785555b610e43611616565b610e88604051806040016040528060078152602001661119595913919560ca1b815250604051806040016040528060048152602001631111515160e21b815250611620565b610e9186611632565b600180558315610edc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906020015b60405180910390a15b505050505050565b606061037f82611748565b6001600160a01b0391821660009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793056020908152604080832093909416825291909152205460ff1690565b816000610f48826112da565b6001600160a01b03161415610f5c82611314565b604051602001610f6c919061234d565b60405160208183030381529060405290610f995760405162461bcd60e51b815260040161054f9190611d64565b5082610fa4816112da565b6001600160a01b0316336001600160a01b031614610fc182611314565b604051602001610fd191906122e0565b60405160208183030381529060405290610ffe5760405162461bcd60e51b815260040161054f9190611d64565b50611009848461115c565b6110148460006113e2565b7ff0466cb4b529fe609c0a35fb0c8bb9a36ffb6c775a7fe7f83dec314f36bc5c9184846040516110459291906123b5565b60405180910390a150505050565b60006001600160e01b03198216632483248360e11b148061037f575061037f8261187d565b600080611084836112da565b90506001600160a01b03811661037f57604051637e27328960e01b81526004810184905260240161054f565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930460205260409020546001600160a01b031690565b6106be83838360016118cd565b6001600160a01b03821661112157604051633250574960e11b81526000600482015260240161054f565b600061112f838360006111d0565b90506001600160a01b038116156106be576040516339e3563760e11b81526000600482015260240161054f565b60008281527f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900602081905260409091206111968382612414565b506040518381527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020015b60405180910390a1505050565b600060008051602061255e833981519152816111eb856112da565b90506001600160a01b03841615611207576112078185876119e3565b6001600160a01b03811615611247576112246000866000806118cd565b6001600160a01b0381166000908152600383016020526040902080546000190190555b6001600160a01b03861615611278576001600160a01b03861660009081526003830160205260409020805460010190555b600085815260028301602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a495945050505050565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930260205260409020546001600160a01b031690565b6060600061132183611a47565b600101905060008167ffffffffffffffff81111561134157611341611dd6565b6040519080825280601f01601f19166020018201604052801561136b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461137557509392505050565b60006113b660008360006111d0565b90506001600160a01b03811661044957604051637e27328960e01b81526004810183905260240161054f565b600082815260026020908152604091829020805461ff001916610100851515908102919091178255835186815292830152917f6bed93006e6710fb84e37d9194eff400299d02ba0557551cc2245c1f1d8183ce91016111c3565b60008051602061255e8339815191526001600160a01b03831661147d57604051630b61174360e31b81526001600160a01b038416600482015260240161054f565b6001600160a01b038481166000818152600584016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6001600160a01b0383163b1561069d57604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061152f9033908890879087906004016124d4565b6020604051808303816000875af192505050801561156a575060408051601f3d908101601f1916820190925261156791810190612511565b60015b6115d3573d808015611598576040519150601f19603f3d011682016040523d82523d6000602084013e61159d565b606091505b5080516000036115cb57604051633250574960e11b81526001600160a01b038516600482015260240161054f565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461160f57604051633250574960e11b81526001600160a01b038516600482015260240161054f565b5050505050565b61161e611b1f565b565b611628611b1f565b6104498282611b68565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156116785750825b905060008267ffffffffffffffff1660011480156116955750303b155b9050811580156116a3575080155b156116c15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156116eb57845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b0388161790558315610edc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602001610ed3565b60607f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e790061177483611078565b506000838152602082905260408120805461178e90612177565b80601f01602080910402602001604051908101604052809291908181526020018280546117ba90612177565b80156118075780601f106117dc57610100808354040283529160200191611807565b820191906000526020600020905b8154815290600101906020018083116117ea57829003601f168201915b50505050509050600061182560408051602081019091526000815290565b9050805160000361183857509392505050565b81511561186b57808260405160200161185292919061252e565b6040516020818303038152906040529350505050919050565b61187485611b99565b95945050505050565b60006001600160e01b031982166380ac58cd60e01b14806118ae57506001600160e01b03198216635b5e139f60e01b145b8061037f57506301ffc9a760e01b6001600160e01b031983161461037f565b60008051602061255e83398151915281806118f057506001600160a01b03831615155b156119b257600061190085611078565b90506001600160a01b0384161580159061192c5750836001600160a01b0316816001600160a01b031614155b801561193f575061193d8185610eef565b155b156119685760405163a9fbf51f60e01b81526001600160a01b038516600482015260240161054f565b82156119b05784866001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b600093845260040160205250506040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6119ee838383611c0d565b6106be576001600160a01b038316611a1c57604051637e27328960e01b81526004810182905260240161054f565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161054f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611a865772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611ab2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ad057662386f26fc10000830492506010015b6305f5e1008310611ae8576305f5e100830492506008015b6127108310611afc57612710830492506004015b60648310611b0e576064830492506002015b600a831061037f5760010192915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661161e57604051631afcd79f60e31b815260040160405180910390fd5b611b70611b1f565b60008051602061255e83398151915280611b8a8482612414565b506001810161069d8382612414565b6060611ba482611078565b506000611bbc60408051602081019091526000815290565b90506000815111611bdc5760405180602001604052806000815250610611565b80611be684611314565b604051602001611bf792919061252e565b6040516020818303038152906040529392505050565b60006001600160a01b03831615801590611c6b5750826001600160a01b0316846001600160a01b03161480611c475750611c478484610eef565b80611c6b5750826001600160a01b0316611c60836110b0565b6001600160a01b0316145b949350505050565b50611c8290600a810190611ca9565b50565b6040805160608101825260008082526020820152908101611ca4611cc2565b905290565b5b80821115611cbe5760008155600101611caa565b5090565b604051806101400160405280600a906020820280368337509192915050565b6001600160e01b031981168114611c8257600080fd5b600060208284031215611d0957600080fd5b813561061181611ce1565b60005b83811015611d2f578181015183820152602001611d17565b50506000910152565b60008151808452611d50816020860160208601611d14565b601f01601f19169290920160200192915050565b6020815260006106116020830184611d38565b600060208284031215611d8957600080fd5b5035919050565b80356001600160a01b0381168114611da757600080fd5b919050565b60008060408385031215611dbf57600080fd5b611dc883611d90565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611e0757611e07611dd6565b604051601f8501601f19908116603f01168101908282118183101715611e2f57611e2f611dd6565b81604052809350858152868686011115611e4857600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e7357600080fd5b61061183833560208501611dec565b803560048110611da757600080fd5b600080600060608486031215611ea657600080fd5b611eaf84611d90565b9250602084013567ffffffffffffffff811115611ecb57600080fd5b611ed786828701611e62565b925050611ee660408501611e82565b90509250925092565b600080600060608486031215611f0457600080fd5b611f0d84611d90565b9250611f1b60208501611d90565b9150604084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b60048110611f5f57634e487b7160e01b600052602160045260246000fd5b9052565b600061018082019050611f77828451611f41565b60208084015115158184015260408401516040840160005b600a811015611fac57825182529183019190830190600101611f8f565b5050505092915050565b60008060408385031215611fc957600080fd5b82359150611fd960208401611e82565b90509250929050565b8015158114611c8257600080fd5b6000806040838503121561200357600080fd5b82359150602083013561201581611fe2565b809150509250929050565b60006020828403121561203257600080fd5b61061182611d90565b6000806040838503121561204e57600080fd5b82359150611fd960208401611d90565b6000806040838503121561207157600080fd5b61207a83611d90565b9150602083013561201581611fe2565b600080600080608085870312156120a057600080fd5b6120a985611d90565b93506120b760208601611d90565b925060408501359150606085013567ffffffffffffffff8111156120da57600080fd5b8501601f810187136120eb57600080fd5b6120fa87823560208401611dec565b91505092959194509250565b6000806040838503121561211957600080fd5b61212283611d90565b9150611fd960208401611d90565b6000806040838503121561214357600080fd5b82359150602083013567ffffffffffffffff81111561216157600080fd5b61216d85828601611e62565b9150509250929050565b600181811c9082168061218b57607f821691505b60208210810361089d57634e487b7160e01b600052602260045260246000fd5b6000602082840312156121bd57600080fd5b5051919050565b6000602082840312156121d657600080fd5b815161061181611fe2565b60208082526032908201527f5b4163636573734d616e6167656d656e745d204f6e6c79207468652076616c6960408201527119185d1bdc8818d85b881a5b9d195c9858dd60721b606082015260800190565b60006101e08683526020865461224e82860160ff8316611f41565b60081c60ff161515604085015260016060850188820160005b600a811015612283578154835291840191908301908301612267565b505050506001600160a01b0386166101a0850152506101c083018190526122ac81840185611d38565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561037f5761037f6122b7565b7f5b446565644e46545d204d757374206265206f776e6572206f6620746865204481526b032b2b2103bb4ba341034b2160a51b60208201526000825161232d81602c850160208701611d14565b91909101602c0192915050565b8181038181111561037f5761037f6122b7565b7f5b446565644e46545d204465656420646f6573206e6f7420657869737420776981526503a341034b2160d51b602082015260008251612394816026850160208701611d14565b9190910160260192915050565b828152604081016106116020830184611f41565b828152604060208201526000611c6b6040830184611d38565b601f8211156106be57600081815260208120601f850160051c810160208610156123f55750805b601f850160051c820191505b81811015610edc57828155600101612401565b815167ffffffffffffffff81111561242e5761242e611dd6565b6124428161243c8454612177565b846123ce565b602080601f831160018114612477576000841561245f5750858301515b600019600386901b1c1916600185901b178555610edc565b600085815260208120601f198616915b828110156124a657888601518255948401946001909101908401612487565b50858210156124c45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061250790830184611d38565b9695505050505050565b60006020828403121561252357600080fd5b815161061181611ce1565b60008351612540818460208801611d14565b835190830190612554818360208801611d14565b0194935050505056fe80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300a2646970667358221220dc085898497b0beea40d818f00f4ef8fd971d80799991a09d31083779a43ddea64736f6c63430008140033",
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1C PUSH3 0x2C JUMP JUMPDEST PUSH3 0x26 PUSH3 0x2C JUMP JUMPDEST PUSH3 0xE0 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH9 0x10000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x7D JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND EQ PUSH3 0xDD JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x25B3 DUP1 PUSH3 0xF0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xB82C3569 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xF1BC6673 EQ PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB82C3569 EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0xB99C23E3 EQ PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x89B9E75F EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x985E3A64 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x62D402BC EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0x682ECE02 EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x6F6C15DD EQ PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x1A6C41E2 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x216 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF7 JUMP JUMPDEST PUSH2 0x374 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH2 0x385 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x1EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x43E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E91 JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EEF JUMP JUMPDEST PUSH2 0x618 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EEF JUMP JUMPDEST PUSH2 0x6A3 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0x6C3 JUMP JUMPDEST PUSH2 0x262 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0x7A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0x27D CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0x8A3 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FB6 JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FF0 JUMP JUMPDEST PUSH2 0x9ED JUMP JUMPDEST PUSH2 0x208 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2020 JUMP JUMPDEST PUSH2 0xB70 JUMP JUMPDEST PUSH2 0x18B PUSH2 0xBCC JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x203B JUMP JUMPDEST PUSH2 0xC4D JUMP JUMPDEST PUSH2 0x1A8 PUSH2 0xCC3 JUMP JUMPDEST PUSH2 0x208 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x2F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x205E JUMP JUMPDEST PUSH2 0xD02 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x208A JUMP JUMPDEST PUSH2 0xD53 JUMP JUMPDEST PUSH2 0x18B PUSH2 0xD6A JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x336 CALLDATASIZE PUSH1 0x4 PUSH2 0x2020 JUMP JUMPDEST PUSH2 0xD82 JUMP JUMPDEST PUSH2 0x1A8 PUSH2 0x349 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0xEE4 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x35C CALLDATASIZE PUSH1 0x4 PUSH2 0x2106 JUMP JUMPDEST PUSH2 0xEEF JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x36F CALLDATASIZE PUSH1 0x4 PUSH2 0x2130 JUMP JUMPDEST PUSH2 0xF3C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F DUP3 PUSH2 0x1053 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 DUP2 SWAP1 PUSH2 0x3A5 SWAP1 PUSH2 0x2177 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D1 SWAP1 PUSH2 0x2177 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x41E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3F3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x41E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x401 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x434 DUP3 PUSH2 0x1078 JUMP JUMPDEST POP PUSH2 0x37F DUP3 PUSH2 0x10B0 JUMP JUMPDEST PUSH2 0x449 DUP3 DUP3 CALLER PUSH2 0x10EA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x624DD75F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x91D14854 SWAP2 DUP4 SWAP2 PUSH4 0xC49BAEBE SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C4 SWAP2 SWAP1 PUSH2 0x21AB JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x533 SWAP2 SWAP1 PUSH2 0x21C4 JUMP JUMPDEST PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP1 PUSH2 0x21E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x564 DUP5 PUSH1 0x1 SLOAD PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 DUP5 SWAP2 DUP4 SWAP2 PUSH1 0xFF NOT SWAP1 SWAP2 AND SWAP1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x597 JUMPI PUSH2 0x597 PUSH2 0x1F2B JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x5A8 PUSH1 0x1 SLOAD DUP6 PUSH2 0x115C JUMP JUMPDEST DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR DUP2 SSTORE PUSH1 0x1 SLOAD PUSH32 0xB34E01CCBB7625DB030CD3A3A1D6CDAEE286062D973316CBE55A56D261A754A1 SWAP1 DUP3 PUSH2 0x5E2 CALLER SWAP1 JUMP JUMPDEST DUP8 PUSH1 0x40 MLOAD PUSH2 0x5F3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2233 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP1 SLOAD PUSH2 0x608 SWAP2 PUSH2 0x22CD JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x642 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x64F DUP4 DUP4 CALLER PUSH2 0x11D0 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x69D JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x54F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x6BE DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD53 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x6CD DUP2 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6EA DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6FA SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x727 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP PUSH2 0x731 DUP3 PUSH2 0x13A7 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x743 SWAP2 SWAP1 PUSH2 0x233A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF NOT AND DUP2 SSTORE SWAP1 PUSH2 0x76D PUSH1 0x1 DUP4 ADD DUP3 PUSH2 0x1C73 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x61C6643F6E835939AE6DA3352C52E1B29A86E4EE6599AB73C5D9A416F75D6ED0 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x7AE PUSH2 0x1C85 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH2 0x7BA DUP3 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7CE DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7DE SWAP2 SWAP1 PUSH2 0x234D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x83D JUMPI PUSH2 0x83D PUSH2 0x1F2B JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x84E JUMPI PUSH2 0x84E PUSH2 0x1F2B JUMP JUMPDEST DUP2 MSTORE DUP2 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP1 DUP4 MSTORE SWAP2 SWAP1 SWAP3 ADD SWAP2 SWAP1 PUSH1 0x1 DUP5 ADD SWAP1 PUSH1 0xA SWAP1 DUP3 DUP5 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x87E JUMPI POP POP POP POP POP DUP2 MSTORE POP POP SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F DUP3 PUSH2 0x1078 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH2 0x8BA DUP3 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8CE DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8DE SWAP2 SWAP1 PUSH2 0x234D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x90B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP DUP3 PUSH2 0x916 DUP2 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x933 DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x943 SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP1 DUP3 SWAP1 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x99D JUMPI PUSH2 0x99D PUSH2 0x1F2B JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x9AD DUP6 PUSH1 0x0 PUSH2 0x13E2 JUMP JUMPDEST PUSH32 0xED549F5E55CA444D100349BE44584B8AD027EDED8936B4B6248776DDCB93D1A DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x9DE SWAP3 SWAP2 SWAP1 PUSH2 0x23A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x624DD75F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x91D14854 SWAP2 DUP4 SWAP2 PUSH4 0xC49BAEBE SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA3F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA63 SWAP2 SWAP1 PUSH2 0x21AB JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAD2 SWAP2 SWAP1 PUSH2 0x21C4 JUMP JUMPDEST PUSH2 0xAEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP1 PUSH2 0x21E1 JUMP JUMPDEST CALLER PUSH2 0xAF8 DUP4 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xB66 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5B446565644E46545D204F776E65722063616E6E6F742076616C696461746520 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x1D1A195A5C881BDDDB88185CDCD95D PUSH1 0x8A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x54F JUMP JUMPDEST PUSH2 0x449 DUP3 DUP3 PUSH2 0x13E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xBAB JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD PUSH1 0x20 MSTORE POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x940E1570 CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC48 SWAP2 SWAP1 PUSH2 0x21C4 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x24745215 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x91D14854 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC9F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x611 SWAP2 SWAP1 PUSH2 0x21C4 JUMP JUMPDEST PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079301 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x3A5 SWAP1 PUSH2 0x2177 JUMP JUMPDEST PUSH2 0x449 CALLER DUP4 DUP4 PUSH2 0x143C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD19 DUP4 PUSH2 0x7A6 JUMP JUMPDEST MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD30 JUMPI PUSH2 0xD30 PUSH2 0x1F2B JUMP JUMPDEST EQ DUP1 PUSH2 0x611 JUMPI POP PUSH1 0x2 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD4B JUMPI PUSH2 0xD4B PUSH2 0x1F2B JUMP JUMPDEST EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD5E DUP5 DUP5 DUP5 PUSH2 0x618 JUMP JUMPDEST PUSH2 0x69D DUP5 DUP5 DUP5 DUP5 PUSH2 0x14ED JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC395FCB3 CALLER PUSH2 0xBE0 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0xDC8 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xDE5 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xDF3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0xE11 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0xE3B JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0xE43 PUSH2 0x1616 JUMP JUMPDEST PUSH2 0xE88 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x11195959139195 PUSH1 0xCA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x11115151 PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH2 0x1620 JUMP JUMPDEST PUSH2 0xE91 DUP7 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE DUP4 ISZERO PUSH2 0xEDC JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x37F DUP3 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079305 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH2 0xF48 DUP3 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xF5C DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF6C SWAP2 SWAP1 PUSH2 0x234D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0xF99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP DUP3 PUSH2 0xFA4 DUP2 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFC1 DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xFD1 SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0xFFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP PUSH2 0x1009 DUP5 DUP5 PUSH2 0x115C JUMP JUMPDEST PUSH2 0x1014 DUP5 PUSH1 0x0 PUSH2 0x13E2 JUMP JUMPDEST PUSH32 0xF0466CB4B529FE609C0A35FB0C8BB9A36FFB6C775A7FE7F83DEC314F36BC5C91 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1045 SWAP3 SWAP2 SWAP1 PUSH2 0x23B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x24832483 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x37F JUMPI POP PUSH2 0x37F DUP3 PUSH2 0x187D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1084 DUP4 PUSH2 0x12DA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x37F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079304 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x6BE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1121 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x112F DUP4 DUP4 PUSH1 0x0 PUSH2 0x11D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x6BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH32 0x542A41881EE128A365A727B282C86FA859579490B9BB45AAB8503648C8E7900 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH2 0x1196 DUP4 DUP3 PUSH2 0x2414 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 PUSH2 0x11EB DUP6 PUSH2 0x12DA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1207 JUMPI PUSH2 0x1207 DUP2 DUP6 DUP8 PUSH2 0x19E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1247 JUMPI PUSH2 0x1224 PUSH1 0x0 DUP7 PUSH1 0x0 DUP1 PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x1278 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP9 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079302 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1321 DUP4 PUSH2 0x1A47 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1341 JUMPI PUSH2 0x1341 PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x136B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1375 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B6 PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x11D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x449 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 DUP6 ISZERO ISZERO SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR DUP3 SSTORE DUP4 MLOAD DUP7 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 PUSH32 0x6BED93006E6710FB84E37D9194EFF400299D02BA0557551CC2245C1F1D8183CE SWAP2 ADD PUSH2 0x11C3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x147D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP8 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x69D JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x152F SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x24D4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x156A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1567 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2511 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15D3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1598 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x159D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x15CB JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x160F JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x161E PUSH2 0x1B1F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1628 PUSH2 0x1B1F JUMP JUMPDEST PUSH2 0x449 DUP3 DUP3 PUSH2 0x1B68 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x1678 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x1695 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x16A3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x16C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x16EB JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND OR SWAP1 SSTORE DUP4 ISZERO PUSH2 0xEDC JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x542A41881EE128A365A727B282C86FA859579490B9BB45AAB8503648C8E7900 PUSH2 0x1774 DUP4 PUSH2 0x1078 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x178E SWAP1 PUSH2 0x2177 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x17BA SWAP1 PUSH2 0x2177 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1807 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17DC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1807 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x17EA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1825 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1838 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x186B JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1852 SWAP3 SWAP2 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1874 DUP6 PUSH2 0x1B99 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x18AE JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x37F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x37F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 PUSH2 0x18F0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x19B2 JUMPI PUSH1 0x0 PUSH2 0x1900 DUP6 PUSH2 0x1078 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x192C JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x193F JUMPI POP PUSH2 0x193D DUP2 DUP6 PUSH2 0xEEF JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1968 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST DUP3 ISZERO PUSH2 0x19B0 JUMPI DUP5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x19EE DUP4 DUP4 DUP4 PUSH2 0x1C0D JUMP JUMPDEST PUSH2 0x6BE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1A1C JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1A86 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1AB2 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1AD0 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1AE8 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1AFC JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1B0E JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x37F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x161E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B70 PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 PUSH2 0x1B8A DUP5 DUP3 PUSH2 0x2414 JUMP JUMPDEST POP PUSH1 0x1 DUP2 ADD PUSH2 0x69D DUP4 DUP3 PUSH2 0x2414 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1BA4 DUP3 PUSH2 0x1078 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1BBC PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1BDC JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x611 JUMP JUMPDEST DUP1 PUSH2 0x1BE6 DUP5 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1BF7 SWAP3 SWAP2 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1C6B JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x1C47 JUMPI POP PUSH2 0x1C47 DUP5 DUP5 PUSH2 0xEEF JUMP JUMPDEST DUP1 PUSH2 0x1C6B JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C60 DUP4 PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH2 0x1C82 SWAP1 PUSH1 0xA DUP2 ADD SWAP1 PUSH2 0x1CA9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x1CA4 PUSH2 0x1CC2 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1CBE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1CAA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1C82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x611 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D2F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1D17 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1D50 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1D14 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x611 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1DA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC8 DUP4 PUSH2 0x1D90 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x1E07 JUMPI PUSH2 0x1E07 PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1E2F JUMPI PUSH2 0x1E2F PUSH2 0x1DD6 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x1E48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x611 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1DEC JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x1DA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1EA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EAF DUP5 PUSH2 0x1D90 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ED7 DUP7 DUP3 DUP8 ADD PUSH2 0x1E62 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1EE6 PUSH1 0x40 DUP6 ADD PUSH2 0x1E82 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F0D DUP5 PUSH2 0x1D90 JUMP JUMPDEST SWAP3 POP PUSH2 0x1F1B PUSH1 0x20 DUP6 ADD PUSH2 0x1D90 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x1F5F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 ADD SWAP1 POP PUSH2 0x1F77 DUP3 DUP5 MLOAD PUSH2 0x1F41 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD ISZERO ISZERO DUP2 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x40 DUP5 ADD PUSH1 0x0 JUMPDEST PUSH1 0xA DUP2 LT ISZERO PUSH2 0x1FAC JUMPI DUP3 MLOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1F8F JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1FD9 PUSH1 0x20 DUP5 ADD PUSH2 0x1E82 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2003 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2015 DUP2 PUSH2 0x1FE2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2032 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x611 DUP3 PUSH2 0x1D90 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x204E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1FD9 PUSH1 0x20 DUP5 ADD PUSH2 0x1D90 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2071 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x207A DUP4 PUSH2 0x1D90 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2015 DUP2 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x20A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20A9 DUP6 PUSH2 0x1D90 JUMP JUMPDEST SWAP4 POP PUSH2 0x20B7 PUSH1 0x20 DUP7 ADD PUSH2 0x1D90 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x20EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20FA DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1DEC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2122 DUP4 PUSH2 0x1D90 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FD9 PUSH1 0x20 DUP5 ADD PUSH2 0x1D90 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x216D DUP6 DUP3 DUP7 ADD PUSH2 0x1E62 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x218B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x89D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x611 DUP2 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x5B4163636573734D616E6167656D656E745D204F6E6C79207468652076616C69 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x19185D1BDC8818D85B881A5B9D195C9858DD PUSH1 0x72 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP7 DUP4 MSTORE PUSH1 0x20 DUP7 SLOAD PUSH2 0x224E DUP3 DUP7 ADD PUSH1 0xFF DUP4 AND PUSH2 0x1F41 JUMP JUMPDEST PUSH1 0x8 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x60 DUP6 ADD DUP9 DUP3 ADD PUSH1 0x0 JUMPDEST PUSH1 0xA DUP2 LT ISZERO PUSH2 0x2283 JUMPI DUP2 SLOAD DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x2267 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x1A0 DUP6 ADD MSTORE POP PUSH2 0x1C0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x22AC DUP2 DUP5 ADD DUP6 PUSH2 0x1D38 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x37F JUMPI PUSH2 0x37F PUSH2 0x22B7 JUMP JUMPDEST PUSH32 0x5B446565644E46545D204D757374206265206F776E6572206F66207468652044 DUP2 MSTORE PUSH12 0x32B2B2103BB4BA341034B21 PUSH1 0xA5 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x232D DUP2 PUSH1 0x2C DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1D14 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x2C ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x37F JUMPI PUSH2 0x37F PUSH2 0x22B7 JUMP JUMPDEST PUSH32 0x5B446565644E46545D204465656420646F6573206E6F74206578697374207769 DUP2 MSTORE PUSH6 0x3A341034B21 PUSH1 0xD5 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x2394 DUP2 PUSH1 0x26 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1D14 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x26 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 DUP2 ADD PUSH2 0x611 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1F41 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1C6B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1D38 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x23F5 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEDC JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2401 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x242E JUMPI PUSH2 0x242E PUSH2 0x1DD6 JUMP JUMPDEST PUSH2 0x2442 DUP2 PUSH2 0x243C DUP5 SLOAD PUSH2 0x2177 JUMP JUMPDEST DUP5 PUSH2 0x23CE JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2477 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x245F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xEDC JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x24A6 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2487 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x24C4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2507 SWAP1 DUP4 ADD DUP5 PUSH2 0x1D38 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x611 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2540 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1D14 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2554 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1D14 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID DUP1 0xBB 0x2B PUSH4 0x8CC20BC4 0xD0 0xA6 0xD PUSH7 0x940F3AB4A00C1D PUSH28 0x313497CA82FB0B4AB0079300A2646970667358221220DC085898497B SIGNEXTEND 0xEE LOG4 0xD DUP2 DUP16 STOP DELEGATECALL 0xEF DUP16 0xD9 PUSH18 0xD80799991A09D31083779A43DDEA64736F6C PUSH4 0x43000814 STOP CALLER ",
      "sourceMap": "359:4356:22:-:0;;;1194:55;;;;;;;;;-1:-1:-1;2641:22:21;:20;:22::i;:::-;1219::22;:20;:22::i;:::-;359:4356;;7711:422:1;8870:21;7900:15;;;;;;;7896:76;;;7938:23;;-1:-1:-1;;;7938:23:1;;;;;;;;;;;7896:76;7985:14;;-1:-1:-1;;;;;7985:14:1;;;:34;7981:146;;8035:33;;-1:-1:-1;;;;;;8035:33:1;-1:-1:-1;;;;;8035:33:1;;;;;8087:29;;158:50:23;;;8087:29:1;;146:2:23;131:18;8087:29:1;;;;;;;7981:146;7760:373;7711:422::o;14:200:23:-;359:4356:22;;;;;;"
    },
    "deployedBytecode": {
      "functionDebugData": {
        "@__ERC721URIStorage_init_1799": {
          "entryPoint": 5654,
          "id": 1799,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@__ERC721_init_703": {
          "entryPoint": 5664,
          "id": 703,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@__ERC721_init_unchained_731": {
          "entryPoint": 7016,
          "id": 731,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_approve_1535": {
          "entryPoint": 4330,
          "id": 1535,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_approve_1609": {
          "entryPoint": 6349,
          "id": 1609,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@_baseURI_887": {
          "entryPoint": null,
          "id": 887,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_burn_1413": {
          "entryPoint": 5031,
          "id": 1413,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@_checkAuthorized_1163": {
          "entryPoint": 6627,
          "id": 1163,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_checkInitializing_538": {
          "entryPoint": 6943,
          "id": 538,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@_checkOnERC721Received_1747": {
          "entryPoint": 5357,
          "id": 1747,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@_getApproved_1090": {
          "entryPoint": 4272,
          "id": 1090,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_getERC721Storage_687": {
          "entryPoint": null,
          "id": 687,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getERC721URIStorageStorage_1793": {
          "entryPoint": null,
          "id": 1793,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_getInitializableStorage_615": {
          "entryPoint": null,
          "id": 615,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_isAuthorized_1126": {
          "entryPoint": 7181,
          "id": 1126,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@_isInitializing_606": {
          "entryPoint": null,
          "id": 606,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_mint_1339": {
          "entryPoint": 4343,
          "id": 1339,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_msgSender_1946": {
          "entryPoint": null,
          "id": 1946,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@_ownerOf_1070": {
          "entryPoint": 4826,
          "id": 1070,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_requireOwned_1683": {
          "entryPoint": 4216,
          "id": 1683,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@_setApprovalForAll_1654": {
          "entryPoint": 5180,
          "id": 1654,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@_setAssetValidation_4927": {
          "entryPoint": 5090,
          "id": 4927,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_setTokenURI_1917": {
          "entryPoint": 4444,
          "id": 1917,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@_update_1289": {
          "entryPoint": 4560,
          "id": 1289,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@approve_903": {
          "entryPoint": 1086,
          "id": 903,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@balanceOf_797": {
          "entryPoint": 2928,
          "id": 797,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@burn_4735": {
          "entryPoint": 1731,
          "id": 4735,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@canSubdivide_4869": {
          "entryPoint": 3341,
          "id": 4869,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getApproved_920": {
          "entryPoint": 1065,
          "id": 920,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@getDeedInfo_4843": {
          "entryPoint": 1958,
          "id": 4843,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@hasAdminRole_4462": {
          "entryPoint": 3434,
          "id": 4462,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@hasRole_4490": {
          "entryPoint": 3149,
          "id": 4490,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@hasValidatorRole_4474": {
          "entryPoint": 3020,
          "id": 4474,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@initialize_4358": {
          "entryPoint": 5682,
          "id": 4358,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@initialize_4599": {
          "entryPoint": 3458,
          "id": 4599,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "@isApprovedForAll_960": {
          "entryPoint": 3823,
          "id": 960,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "@log10_3902": {
          "entryPoint": 6727,
          "id": 3902,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@mintAsset_4709": {
          "entryPoint": 1101,
          "id": 4709,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "@name_826": {
          "entryPoint": 901,
          "id": 826,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@nextDeedId_4515": {
          "entryPoint": null,
          "id": 4515,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "@ownerOf_810": {
          "entryPoint": 2211,
          "id": 810,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@safeTransferFrom_1024": {
          "entryPoint": 1699,
          "id": 1024,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "@safeTransferFrom_1050": {
          "entryPoint": 3411,
          "id": 1050,
          "parameterSlots": 4,
          "returnSlots": 0
        },
        "@setApprovalForAll_936": {
          "entryPoint": 3330,
          "id": 936,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@setAssetType_4827": {
          "entryPoint": 2222,
          "id": 4827,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@setAssetValidation_4760": {
          "entryPoint": 2541,
          "id": 4760,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@setIpfsDetailsHash_4789": {
          "entryPoint": 3900,
          "id": 4789,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "@supportsInterface_1826": {
          "entryPoint": 4179,
          "id": 1826,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_2003": {
          "entryPoint": null,
          "id": 2003,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_4885": {
          "entryPoint": 884,
          "id": 4885,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@supportsInterface_762": {
          "entryPoint": 6269,
          "id": 762,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@symbol_842": {
          "entryPoint": 3267,
          "id": 842,
          "parameterSlots": 0,
          "returnSlots": 1
        },
        "@toString_2805": {
          "entryPoint": 4884,
          "id": 2805,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@tokenURI_1890": {
          "entryPoint": 5960,
          "id": 1890,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@tokenURI_4901": {
          "entryPoint": 3812,
          "id": 4901,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@tokenURI_878": {
          "entryPoint": 7065,
          "id": 878,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "@transferFrom_1006": {
          "entryPoint": 1560,
          "id": 1006,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "abi_decode_address": {
          "entryPoint": 7568,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_available_length_string": {
          "entryPoint": 7660,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_decode_enum_AssetType": {
          "entryPoint": 7810,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_decode_string": {
          "entryPoint": 7778,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_address": {
          "entryPoint": 8224,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_addresst_address": {
          "entryPoint": 8454,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_addresst_uint256": {
          "entryPoint": 7919,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
          "entryPoint": 8330,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 4
        },
        "abi_decode_tuple_t_addresst_bool": {
          "entryPoint": 8286,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_addresst_string_memory_ptrt_enum$_AssetType_$4529": {
          "entryPoint": 7825,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 3
        },
        "abi_decode_tuple_t_addresst_uint256": {
          "entryPoint": 7596,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_bool_fromMemory": {
          "entryPoint": 8644,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes32_fromMemory": {
          "entryPoint": 8619,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes32t_address": {
          "entryPoint": 8251,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_bytes4": {
          "entryPoint": 7415,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_bytes4_fromMemory": {
          "entryPoint": 9489,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256": {
          "entryPoint": 7543,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_decode_tuple_t_uint256t_bool": {
          "entryPoint": 8176,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint256t_enum$_AssetType_$4529": {
          "entryPoint": 8118,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_decode_tuple_t_uint256t_string_memory_ptr": {
          "entryPoint": 8496,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 2
        },
        "abi_encode_enum_AssetType": {
          "entryPoint": 8001,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "abi_encode_string": {
          "entryPoint": 7480,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 9518,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_stringliteral_4d0368677e0dd570473e3f4d3f52f7b30e2501164f66174da72f7efe9ace832a_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 8928,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_packed_t_stringliteral_7547728b7ec6323597698e6b54f201eb6df88e5a0f038ff1b3aefd8b64c87789_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
          "entryPoint": 9037,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
          "entryPoint": 9428,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 4,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 7524,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_1997334ad722e5cc47a196015e45df2e55148165621fbbb7691725bc967d80bd__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 8673,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_stringliteral_44abda6a13529790306777db85b421881606db3c6df13c85000f766808fdc9ab__to_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_struct$_DeedInfo_$4513_memory_ptr__to_t_struct$_DeedInfo_$4513_memory_ptr__fromStack_reversed": {
          "entryPoint": 8035,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_enum$_AssetType_$4529__to_t_uint256_t_uint8__fromStack_reversed": {
          "entryPoint": 9121,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 9141,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 1
        },
        "abi_encode_tuple_t_uint256_t_struct$_DeedInfo_$4513_storage_ptr_t_address_t_string_memory_ptr__to_t_uint256_t_struct$_DeedInfo_$4513_memory_ptr_t_address_t_string_memory_ptr__fromStack_reversed": {
          "entryPoint": 8755,
          "id": null,
          "parameterSlots": 5,
          "returnSlots": 1
        },
        "array_dataslot_string_storage": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "checked_add_t_uint256": {
          "entryPoint": 8909,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "checked_sub_t_uint256": {
          "entryPoint": 9018,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "clean_up_bytearray_end_slots_string_storage": {
          "entryPoint": 9166,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
          "entryPoint": 9236,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 0
        },
        "copy_memory_to_memory_with_cleanup": {
          "entryPoint": 7444,
          "id": null,
          "parameterSlots": 3,
          "returnSlots": 0
        },
        "extract_byte_array_length": {
          "entryPoint": 8567,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 1
        },
        "extract_used_part_and_set_length_of_short_byte_array": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 2,
          "returnSlots": 1
        },
        "panic_error_0x11": {
          "entryPoint": 8887,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x12": {
          "entryPoint": null,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x21": {
          "entryPoint": 7979,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "panic_error_0x41": {
          "entryPoint": 7638,
          "id": null,
          "parameterSlots": 0,
          "returnSlots": 0
        },
        "validator_revert_bool": {
          "entryPoint": 8162,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        },
        "validator_revert_bytes4": {
          "entryPoint": 7393,
          "id": null,
          "parameterSlots": 1,
          "returnSlots": 0
        }
      },
      "generatedSources": [
        {
          "ast": {
            "nodeType": "YulBlock",
            "src": "0:17912:23",
            "statements": [
              {
                "nodeType": "YulBlock",
                "src": "6:3:23",
                "statements": []
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "58:87:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "123:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "132:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "135:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "125:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "125:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "125:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "81:5:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "92:5:23"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "103:3:23",
                                        "type": "",
                                        "value": "224"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "108:10:23",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "99:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "99:20:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "88:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "88:32:23"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "78:2:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "78:43:23"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "71:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "71:51:23"
                      },
                      "nodeType": "YulIf",
                      "src": "68:71:23"
                    }
                  ]
                },
                "name": "validator_revert_bytes4",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "47:5:23",
                    "type": ""
                  }
                ],
                "src": "14:131:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "219:176:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "265:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "274:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "277:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "267:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "267:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "267:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "240:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "249:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "236:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "236:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "261:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "232:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "232:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "229:52:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "290:36:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "316:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "303:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "303:23:23"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "294:5:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "359:5:23"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bytes4",
                          "nodeType": "YulIdentifier",
                          "src": "335:23:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "335:30:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "335:30:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "374:15:23",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "384:5:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "374:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes4",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "185:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "196:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "208:6:23",
                    "type": ""
                  }
                ],
                "src": "150:245:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "495:92:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "505:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "517:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "528:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "513:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "513:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "505:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "547:9:23"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "572:6:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "565:6:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "565:14:23"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "558:6:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "558:22:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "540:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "540:41:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "540:41:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "464:9:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "475:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "486:4:23",
                    "type": ""
                  }
                ],
                "src": "400:187:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "658:184:23",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "668:10:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "677:1:23",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "672:1:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "737:63:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "762:3:23"
                                    },
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "767:1:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "758:3:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "758:11:23"
                                },
                                {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "src",
                                          "nodeType": "YulIdentifier",
                                          "src": "781:3:23"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "786:1:23"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "777:3:23"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "777:11:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "771:5:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "771:18:23"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "751:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "751:39:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "751:39:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "698:1:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "701:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "695:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "695:13:23"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "709:19:23",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "711:15:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "720:1:23"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "723:2:23",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "716:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "716:10:23"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "711:1:23"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "691:3:23",
                        "statements": []
                      },
                      "src": "687:113:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "820:3:23"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "825:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "816:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "816:16:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "834:1:23",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "809:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "809:27:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "809:27:23"
                    }
                  ]
                },
                "name": "copy_memory_to_memory_with_cleanup",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "636:3:23",
                    "type": ""
                  },
                  {
                    "name": "dst",
                    "nodeType": "YulTypedName",
                    "src": "641:3:23",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "646:6:23",
                    "type": ""
                  }
                ],
                "src": "592:250:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "897:221:23",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "907:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "927:5:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "921:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "921:12:23"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "911:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "949:3:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "954:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "942:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "942:19:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "942:19:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1009:5:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1016:4:23",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1005:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1005:16:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1027:3:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1032:4:23",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1023:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1023:14:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1039:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "970:34:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "970:76:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "970:76:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1055:57:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1070:3:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "1083:6:23"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1091:2:23",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1079:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1079:15:23"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1100:2:23",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "1096:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1096:7:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1075:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1075:29:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1066:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1066:39:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1107:4:23",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1062:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1062:50:23"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "1055:3:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_string",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "874:5:23",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "881:3:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "889:3:23",
                    "type": ""
                  }
                ],
                "src": "847:271:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1244:99:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1261:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1272:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1254:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1254:21:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1254:21:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1284:53:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1310:6:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1322:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1333:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1318:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1318:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "1292:17:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1292:45:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1284:4:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1213:9:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1224:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1235:4:23",
                    "type": ""
                  }
                ],
                "src": "1123:220:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1418:110:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1464:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1473:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1476:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1466:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1466:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1466:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1439:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1448:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1435:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1435:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1460:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "1431:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1431:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "1428:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "1489:33:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1512:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1499:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1499:23:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "1489:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1384:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1395:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1407:6:23",
                    "type": ""
                  }
                ],
                "src": "1348:180:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1634:102:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1644:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1656:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1667:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1652:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1652:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "1644:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1686:9:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1701:6:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1717:3:23",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1722:1:23",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1713:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1713:11:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1726:1:23",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1709:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1709:19:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1697:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1697:32:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "1679:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1679:51:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "1679:51:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1603:9:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1614:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "1625:4:23",
                    "type": ""
                  }
                ],
                "src": "1533:203:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "1790:124:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "1800:29:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "1822:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "1809:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1809:20:23"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "1800:5:23"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "1892:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1901:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1904:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "1894:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "1894:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "1894:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1851:5:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1862:5:23"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1877:3:23",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1882:1:23",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1873:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1873:11:23"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1886:1:23",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1869:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1869:19:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1858:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1858:31:23"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "1848:2:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1848:42:23"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "1841:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1841:50:23"
                      },
                      "nodeType": "YulIf",
                      "src": "1838:70:23"
                    }
                  ]
                },
                "name": "abi_decode_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "1769:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "1780:5:23",
                    "type": ""
                  }
                ],
                "src": "1741:173:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2006:167:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2052:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2061:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2064:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2054:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2054:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2054:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2027:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2036:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "2023:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2023:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2048:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "2019:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2019:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "2016:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2077:39:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2106:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "2087:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2087:29:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "2077:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2125:42:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2152:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2163:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2148:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2148:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "2135:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2135:32:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "2125:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "1964:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "1975:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "1987:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "1995:6:23",
                    "type": ""
                  }
                ],
                "src": "1919:254:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2210:95:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2227:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2234:3:23",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2239:10:23",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "2230:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2230:20:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2220:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2220:31:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2220:31:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2267:1:23",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2270:4:23",
                            "type": "",
                            "value": "0x41"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2260:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2260:15:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2260:15:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2291:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2294:4:23",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "2284:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2284:15:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2284:15:23"
                    }
                  ]
                },
                "name": "panic_error_0x41",
                "nodeType": "YulFunctionDefinition",
                "src": "2178:127:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "2385:557:23",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2395:28:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2405:18:23",
                        "type": "",
                        "value": "0xffffffffffffffff"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "2399:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2450:22:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "2452:16:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2452:18:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2452:18:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "2438:6:23"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "2446:2:23"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2435:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2435:14:23"
                      },
                      "nodeType": "YulIf",
                      "src": "2432:40:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2481:17:23",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2495:2:23",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "not",
                          "nodeType": "YulIdentifier",
                          "src": "2491:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2491:7:23"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "2485:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2507:23:23",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2527:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "2521:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2521:9:23"
                      },
                      "variables": [
                        {
                          "name": "memPtr",
                          "nodeType": "YulTypedName",
                          "src": "2511:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "2539:73:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2561:6:23"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "2585:6:23"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2593:2:23",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2581:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2581:15:23"
                                      },
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "2598:2:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2577:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2577:24:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2603:2:23",
                                    "type": "",
                                    "value": "63"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2573:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2573:33:23"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "2608:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2569:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2569:42:23"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2557:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2557:55:23"
                      },
                      "variables": [
                        {
                          "name": "newFreePtr",
                          "nodeType": "YulTypedName",
                          "src": "2543:10:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2671:22:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "2673:16:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2673:18:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2673:18:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2630:10:23"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2642:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2627:2:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2627:18:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "2650:10:23"
                              },
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2662:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2647:2:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2647:22:23"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "2624:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2624:46:23"
                      },
                      "nodeType": "YulIf",
                      "src": "2621:72:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2709:2:23",
                            "type": "",
                            "value": "64"
                          },
                          {
                            "name": "newFreePtr",
                            "nodeType": "YulIdentifier",
                            "src": "2713:10:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2702:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2702:22:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2702:22:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "2733:15:23",
                      "value": {
                        "name": "memPtr",
                        "nodeType": "YulIdentifier",
                        "src": "2742:6:23"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "2733:5:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "2764:6:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "2772:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2757:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2757:22:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2757:22:23"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "2817:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2826:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2829:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "2819:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "2819:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "2819:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "2798:3:23"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2803:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2794:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2794:16:23"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "2812:3:23"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "2791:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2791:25:23"
                      },
                      "nodeType": "YulIf",
                      "src": "2788:45:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "2859:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2867:4:23",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2855:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2855:17:23"
                          },
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "2874:3:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "2879:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldatacopy",
                          "nodeType": "YulIdentifier",
                          "src": "2842:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2842:44:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2842:44:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2910:6:23"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2918:6:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2906:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2906:19:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2927:4:23",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2902:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2902:30:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2934:1:23",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "2895:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2895:41:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "2895:41:23"
                    }
                  ]
                },
                "name": "abi_decode_available_length_string",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "2354:3:23",
                    "type": ""
                  },
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "2359:6:23",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "2367:3:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "2375:5:23",
                    "type": ""
                  }
                ],
                "src": "2310:632:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3000:169:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3049:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3058:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3061:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3051:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3051:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3051:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3028:6:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3036:4:23",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3024:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3024:17:23"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "3043:3:23"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3020:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3020:27:23"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "3013:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3013:35:23"
                      },
                      "nodeType": "YulIf",
                      "src": "3010:55:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3074:89:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3122:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3130:4:23",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3118:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3118:17:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3150:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3137:12:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3137:20:23"
                          },
                          {
                            "name": "end",
                            "nodeType": "YulIdentifier",
                            "src": "3159:3:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_available_length_string",
                          "nodeType": "YulIdentifier",
                          "src": "3083:34:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3083:80:23"
                      },
                      "variableNames": [
                        {
                          "name": "array",
                          "nodeType": "YulIdentifier",
                          "src": "3074:5:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_string",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "2974:6:23",
                    "type": ""
                  },
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "2982:3:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "2990:5:23",
                    "type": ""
                  }
                ],
                "src": "2947:222:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3230:94:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3240:29:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "3262:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3249:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3249:20:23"
                      },
                      "variableNames": [
                        {
                          "name": "value",
                          "nodeType": "YulIdentifier",
                          "src": "3240:5:23"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3302:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3311:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3314:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3304:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3304:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3304:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3291:5:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3298:1:23",
                                "type": "",
                                "value": "4"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3288:2:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3288:12:23"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "3281:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3281:20:23"
                      },
                      "nodeType": "YulIf",
                      "src": "3278:40:23"
                    }
                  ]
                },
                "name": "abi_decode_enum_AssetType",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "offset",
                    "nodeType": "YulTypedName",
                    "src": "3209:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "3220:5:23",
                    "type": ""
                  }
                ],
                "src": "3174:150:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3457:363:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3503:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3512:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3515:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3505:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3505:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3505:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3478:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3487:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3474:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3474:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3499:2:23",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "3470:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3470:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "3467:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3528:39:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3557:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "3538:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3538:29:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "3528:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "3576:46:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3607:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3618:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3603:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3603:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "3590:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3590:32:23"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "3580:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "3665:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3674:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "3677:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "3667:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "3667:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "3667:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "3637:6:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3645:18:23",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3634:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3634:30:23"
                      },
                      "nodeType": "YulIf",
                      "src": "3631:50:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3690:60:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3722:9:23"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3733:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3718:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3718:22:23"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "3742:7:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string",
                          "nodeType": "YulIdentifier",
                          "src": "3700:17:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3700:50:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "3690:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "3759:55:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3799:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3810:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3795:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3795:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_enum_AssetType",
                          "nodeType": "YulIdentifier",
                          "src": "3769:25:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3769:45:23"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "3759:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_string_memory_ptrt_enum$_AssetType_$4529",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3407:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "3418:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3430:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "3438:6:23",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "3446:6:23",
                    "type": ""
                  }
                ],
                "src": "3329:491:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "3926:76:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "3936:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3948:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3959:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "3944:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3944:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "3936:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "3978:9:23"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "3989:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "3971:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3971:25:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "3971:25:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "3895:9:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "3906:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "3917:4:23",
                    "type": ""
                  }
                ],
                "src": "3825:177:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4111:224:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4157:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4166:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4169:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4159:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4159:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4159:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4132:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4141:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "4128:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4128:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4153:2:23",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "4124:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4124:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "4121:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4182:39:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4211:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "4192:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4192:29:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "4182:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4230:48:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4263:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4274:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4259:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4259:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "4240:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4240:38:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "4230:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "4287:42:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4314:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4325:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4310:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4310:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "4297:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4297:32:23"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "4287:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4061:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "4072:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4084:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "4092:6:23",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "4100:6:23",
                    "type": ""
                  }
                ],
                "src": "4007:328:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4372:95:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4389:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4396:3:23",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4401:10:23",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "4392:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4392:20:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4382:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4382:31:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4382:31:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4429:1:23",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4432:4:23",
                            "type": "",
                            "value": "0x21"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4422:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4422:15:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4422:15:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4453:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4456:4:23",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "4446:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4446:15:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4446:15:23"
                    }
                  ]
                },
                "name": "panic_error_0x21",
                "nodeType": "YulFunctionDefinition",
                "src": "4340:127:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4523:186:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "4565:111:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4586:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4593:3:23",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4598:10:23",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "4589:3:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4589:20:23"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "4579:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4579:31:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4579:31:23"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4630:1:23",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4633:4:23",
                                  "type": "",
                                  "value": "0x21"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "4623:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4623:15:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4623:15:23"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4658:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "4661:4:23",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "4651:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "4651:15:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "4651:15:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4546:5:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4553:1:23",
                                "type": "",
                                "value": "4"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "4543:2:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4543:12:23"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "4536:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4536:20:23"
                      },
                      "nodeType": "YulIf",
                      "src": "4533:143:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "4692:3:23"
                          },
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "4697:5:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4685:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4685:18:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4685:18:23"
                    }
                  ]
                },
                "name": "abi_encode_enum_AssetType",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "4507:5:23",
                    "type": ""
                  },
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "4514:3:23",
                    "type": ""
                  }
                ],
                "src": "4472:237:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "4867:543:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "4877:27:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4889:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "4900:3:23",
                            "type": "",
                            "value": "384"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "4885:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4885:19:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "4877:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4945:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4939:5:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4939:13:23"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "4954:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_enum_AssetType",
                          "nodeType": "YulIdentifier",
                          "src": "4913:25:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4913:51:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4913:51:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "4973:14:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "4983:4:23",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "4977:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5007:9:23"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5018:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5003:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5003:18:23"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "5047:6:23"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "5055:2:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5043:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5043:15:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "5037:5:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5037:22:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "5030:6:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5030:30:23"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5023:6:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5023:38:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "4996:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "4996:66:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "4996:66:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5071:44:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5101:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5109:4:23",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5097:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5097:17:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "5091:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5091:24:23"
                      },
                      "variables": [
                        {
                          "name": "memberValue0",
                          "nodeType": "YulTypedName",
                          "src": "5075:12:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5124:31:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5139:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5150:4:23",
                            "type": "",
                            "value": "0x40"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "5135:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5135:20:23"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "5128:3:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5164:10:23",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "5171:3:23"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "5164:3:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5183:26:23",
                      "value": {
                        "name": "memberValue0",
                        "nodeType": "YulIdentifier",
                        "src": "5197:12:23"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "5187:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "5218:10:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "5227:1:23",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "5222:1:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5284:120:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "5305:3:23"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "5316:6:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "5310:5:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5310:13:23"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "5298:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5298:26:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5298:26:23"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "5337:19:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "5348:3:23"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5353:2:23"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5344:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5344:12:23"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5337:3:23"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "5369:25:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "5383:6:23"
                                },
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "5391:2:23"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5379:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5379:15:23"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "5369:6:23"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "5248:1:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5251:4:23",
                            "type": "",
                            "value": "0x0a"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "5245:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5245:11:23"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "5257:18:23",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "5259:14:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "5268:1:23"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5271:1:23",
                                  "type": "",
                                  "value": "1"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "5264:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5264:9:23"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5259:1:23"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "5241:3:23",
                        "statements": []
                      },
                      "src": "5237:167:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_struct$_DeedInfo_$4513_memory_ptr__to_t_struct$_DeedInfo_$4513_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "4836:9:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "4847:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "4858:4:23",
                    "type": ""
                  }
                ],
                "src": "4714:696:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5516:174:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5562:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5571:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5574:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5564:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5564:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5564:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5537:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5546:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5533:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5533:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5558:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5529:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5529:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "5526:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5587:33:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5610:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5597:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5597:23:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5587:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5629:55:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5669:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5680:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5665:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5665:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_enum_AssetType",
                          "nodeType": "YulIdentifier",
                          "src": "5639:25:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5639:45:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "5629:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_enum$_AssetType_$4529",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5474:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5485:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5497:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5505:6:23",
                    "type": ""
                  }
                ],
                "src": "5415:275:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5737:76:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5791:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5800:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5803:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5793:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5793:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5793:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5760:5:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5781:5:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "5774:6:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5774:13:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "5767:6:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5767:21:23"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "5757:2:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5757:32:23"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "5750:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5750:40:23"
                      },
                      "nodeType": "YulIf",
                      "src": "5747:60:23"
                    }
                  ]
                },
                "name": "validator_revert_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "value",
                    "nodeType": "YulTypedName",
                    "src": "5726:5:23",
                    "type": ""
                  }
                ],
                "src": "5695:118:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "5902:225:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "5948:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5957:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5960:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "5950:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "5950:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "5950:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5923:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5932:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "5919:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5919:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5944:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "5915:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5915:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "5912:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "5973:33:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "5996:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "5983:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "5983:23:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "5973:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6015:45:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6045:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6056:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6041:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6041:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6028:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6028:32:23"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "6019:5:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6091:5:23"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "6069:21:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6069:28:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6069:28:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6106:15:23",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "6116:5:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "6106:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "5860:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "5871:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "5883:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "5891:6:23",
                    "type": ""
                  }
                ],
                "src": "5818:309:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6202:116:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6248:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6257:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6260:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6250:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6250:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6250:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6223:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6232:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6219:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6219:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6244:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6215:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6215:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "6212:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6273:39:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6302:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "6283:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6283:29:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "6273:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6168:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6179:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6191:6:23",
                    "type": ""
                  }
                ],
                "src": "6132:186:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6410:167:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6456:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6465:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6468:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6458:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6458:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6458:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6431:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6440:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6427:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6427:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6452:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6423:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6423:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "6420:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6481:33:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6504:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6491:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6491:23:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "6481:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6523:48:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6556:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6567:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6552:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6552:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "6533:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6533:38:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "6523:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32t_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6368:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6379:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6391:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6399:6:23",
                    "type": ""
                  }
                ],
                "src": "6323:254:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "6666:231:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "6712:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6721:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "6724:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "6714:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "6714:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "6714:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "6687:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6696:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "6683:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6683:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "6708:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "6679:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6679:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "6676:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6737:39:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "6766:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "6747:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6747:29:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "6737:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "6785:45:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6815:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6826:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6811:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6811:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "6798:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6798:32:23"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "6789:5:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6861:5:23"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "6839:21:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "6839:28:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "6839:28:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "6876:15:23",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "6886:5:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "6876:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_bool",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6624:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6635:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6647:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "6655:6:23",
                    "type": ""
                  }
                ],
                "src": "6582:315:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7032:537:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7079:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7088:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7091:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7081:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7081:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7081:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7053:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7062:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7049:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7049:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7074:3:23",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "7045:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7045:33:23"
                      },
                      "nodeType": "YulIf",
                      "src": "7042:53:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7104:39:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7133:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "7114:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7114:29:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7104:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7152:48:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7185:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7196:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7181:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7181:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "7162:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7162:38:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "7152:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7209:42:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7236:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7247:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7232:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7232:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7219:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7219:32:23"
                      },
                      "variableNames": [
                        {
                          "name": "value2",
                          "nodeType": "YulIdentifier",
                          "src": "7209:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7260:46:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7291:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7302:2:23",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7287:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7287:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "7274:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7274:32:23"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "7264:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7349:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7358:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7361:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7351:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7351:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7351:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "7321:6:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7329:18:23",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "7318:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7318:30:23"
                      },
                      "nodeType": "YulIf",
                      "src": "7315:50:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "7374:32:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7388:9:23"
                          },
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "7399:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "7384:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7384:22:23"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "7378:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7454:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7463:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7466:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7456:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7456:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7456:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7433:2:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7437:4:23",
                                    "type": "",
                                    "value": "0x1f"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7429:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7429:13:23"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7444:7:23"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7425:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7425:27:23"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "7418:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7418:35:23"
                      },
                      "nodeType": "YulIf",
                      "src": "7415:55:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7479:84:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7528:2:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7532:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7524:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7524:11:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "7550:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7537:12:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7537:16:23"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "7555:7:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_available_length_string",
                          "nodeType": "YulIdentifier",
                          "src": "7489:34:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7489:74:23"
                      },
                      "variableNames": [
                        {
                          "name": "value3",
                          "nodeType": "YulIdentifier",
                          "src": "7479:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "6974:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "6985:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "6997:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7005:6:23",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "7013:6:23",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "7021:6:23",
                    "type": ""
                  }
                ],
                "src": "6902:667:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7661:173:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7707:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7716:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7719:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7709:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7709:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7709:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7682:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7691:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7678:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7678:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7703:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "7674:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7674:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "7671:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7732:39:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "7761:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "7742:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7742:29:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "7732:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "7780:48:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7813:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7824:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7809:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7809:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_address",
                          "nodeType": "YulIdentifier",
                          "src": "7790:18:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7790:38:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "7780:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_addresst_address",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7619:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "7630:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7642:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7650:6:23",
                    "type": ""
                  }
                ],
                "src": "7574:260:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "7936:293:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "7982:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7991:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "7994:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "7984:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "7984:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "7984:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "7957:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7966:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "7953:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7953:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7978:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "7949:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "7949:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "7946:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8007:33:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8030:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8017:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8017:23:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8007:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8049:46:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8080:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8091:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8076:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8076:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "calldataload",
                          "nodeType": "YulIdentifier",
                          "src": "8063:12:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8063:32:23"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "8053:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8138:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8147:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8150:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8140:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8140:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8140:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "offset",
                            "nodeType": "YulIdentifier",
                            "src": "8110:6:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8118:18:23",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "8107:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8107:30:23"
                      },
                      "nodeType": "YulIf",
                      "src": "8104:50:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8163:60:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8195:9:23"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8206:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8191:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8191:22:23"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "8215:7:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_string",
                          "nodeType": "YulIdentifier",
                          "src": "8173:17:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8173:50:23"
                      },
                      "variableNames": [
                        {
                          "name": "value1",
                          "nodeType": "YulIdentifier",
                          "src": "8163:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_uint256t_string_memory_ptr",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "7894:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "7905:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "7917:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "7925:6:23",
                    "type": ""
                  }
                ],
                "src": "7839:390:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8289:325:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8299:22:23",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8313:1:23",
                            "type": "",
                            "value": "1"
                          },
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "8316:4:23"
                          }
                        ],
                        "functionName": {
                          "name": "shr",
                          "nodeType": "YulIdentifier",
                          "src": "8309:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8309:12:23"
                      },
                      "variableNames": [
                        {
                          "name": "length",
                          "nodeType": "YulIdentifier",
                          "src": "8299:6:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "8330:38:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "data",
                            "nodeType": "YulIdentifier",
                            "src": "8360:4:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8366:1:23",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "8356:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8356:12:23"
                      },
                      "variables": [
                        {
                          "name": "outOfPlaceEncoding",
                          "nodeType": "YulTypedName",
                          "src": "8334:18:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8407:31:23",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "8409:27:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "length",
                                  "nodeType": "YulIdentifier",
                                  "src": "8423:6:23"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8431:4:23",
                                  "type": "",
                                  "value": "0x7f"
                                }
                              ],
                              "functionName": {
                                "name": "and",
                                "nodeType": "YulIdentifier",
                                "src": "8419:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8419:17:23"
                            },
                            "variableNames": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "8409:6:23"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "8387:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "8380:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8380:26:23"
                      },
                      "nodeType": "YulIf",
                      "src": "8377:61:23"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8497:111:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8518:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8525:3:23",
                                      "type": "",
                                      "value": "224"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8530:10:23",
                                      "type": "",
                                      "value": "0x4e487b71"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shl",
                                    "nodeType": "YulIdentifier",
                                    "src": "8521:3:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8521:20:23"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8511:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8511:31:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8511:31:23"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8562:1:23",
                                  "type": "",
                                  "value": "4"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8565:4:23",
                                  "type": "",
                                  "value": "0x22"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "8555:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8555:15:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8555:15:23"
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8590:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8593:4:23",
                                  "type": "",
                                  "value": "0x24"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8583:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8583:15:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8583:15:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "8453:18:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "8476:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8484:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "8473:2:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8473:14:23"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "8450:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8450:38:23"
                      },
                      "nodeType": "YulIf",
                      "src": "8447:161:23"
                    }
                  ]
                },
                "name": "extract_byte_array_length",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "8269:4:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "length",
                    "nodeType": "YulTypedName",
                    "src": "8278:6:23",
                    "type": ""
                  }
                ],
                "src": "8234:380:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8700:103:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "8746:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8755:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "8758:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "8748:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "8748:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "8748:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8721:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8730:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8717:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8717:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8742:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "8713:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8713:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "8710:52:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "8771:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8787:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "8781:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8781:16:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "8771:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes32_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8666:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "8677:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8689:6:23",
                    "type": ""
                  }
                ],
                "src": "8619:184:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "8937:145:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "8947:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8959:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "8970:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "8955:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8955:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "8947:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "8989:9:23"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "9000:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "8982:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "8982:25:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "8982:25:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9027:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9038:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9023:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9023:18:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9047:6:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9063:3:23",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9068:1:23",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "9059:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9059:11:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9072:1:23",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9055:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9055:19:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9043:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9043:32:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9016:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9016:60:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9016:60:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "8898:9:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "8909:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "8917:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "8928:4:23",
                    "type": ""
                  }
                ],
                "src": "8808:274:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9165:167:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "9211:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9220:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "9223:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "9213:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "9213:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "9213:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9186:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9195:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "9182:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9182:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9207:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "9178:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9178:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "9175:52:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "9236:29:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9255:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "9249:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9249:16:23"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "9240:5:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9296:5:23"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bool",
                          "nodeType": "YulIdentifier",
                          "src": "9274:21:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9274:28:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9274:28:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9311:15:23",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "9321:5:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "9311:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bool_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9131:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "9142:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9154:6:23",
                    "type": ""
                  }
                ],
                "src": "9087:245:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "9511:240:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9528:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9539:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9521:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9521:21:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9521:21:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9562:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9573:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9558:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9558:18:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9578:2:23",
                            "type": "",
                            "value": "50"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9551:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9551:30:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9551:30:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9601:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9612:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9597:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9597:18:23"
                          },
                          {
                            "hexValue": "5b4163636573734d616e6167656d656e745d204f6e6c79207468652076616c69",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9617:34:23",
                            "type": "",
                            "value": "[AccessManagement] Only the vali"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9590:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9590:62:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9590:62:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9672:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9683:2:23",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9668:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9668:18:23"
                          },
                          {
                            "hexValue": "6461746f722063616e20696e746572616374",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "9688:20:23",
                            "type": "",
                            "value": "dator can interact"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "9661:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9661:48:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "9661:48:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "9718:27:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "9730:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9741:3:23",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "9726:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "9726:19:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "9718:4:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_1997334ad722e5cc47a196015e45df2e55148165621fbbb7691725bc967d80bd__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9488:9:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "9502:4:23",
                    "type": ""
                  }
                ],
                "src": "9337:414:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10014:766:23",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10024:13:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10034:3:23",
                        "type": "",
                        "value": "480"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "10028:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10053:9:23"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "10064:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10046:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10046:25:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10046:25:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10080:12:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10090:2:23",
                        "type": "",
                        "value": "32"
                      },
                      "variables": [
                        {
                          "name": "_2",
                          "nodeType": "YulTypedName",
                          "src": "10084:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10101:30:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "10124:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "sload",
                          "nodeType": "YulIdentifier",
                          "src": "10118:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10118:13:23"
                      },
                      "variables": [
                        {
                          "name": "slotValue",
                          "nodeType": "YulTypedName",
                          "src": "10105:9:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "10170:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10181:4:23",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "10166:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10166:20:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10192:9:23"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "10203:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10188:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10188:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_enum_AssetType",
                          "nodeType": "YulIdentifier",
                          "src": "10140:25:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10140:67:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10140:67:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10227:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10238:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10223:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10223:18:23"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "10265:1:23",
                                            "type": "",
                                            "value": "8"
                                          },
                                          {
                                            "name": "slotValue",
                                            "nodeType": "YulIdentifier",
                                            "src": "10268:9:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "10261:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "10261:17:23"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10280:4:23",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "10257:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10257:28:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "10250:6:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10250:36:23"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10243:6:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10243:44:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10216:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10216:72:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10216:72:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10297:14:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10307:4:23",
                        "type": "",
                        "value": "0x01"
                      },
                      "variables": [
                        {
                          "name": "_3",
                          "nodeType": "YulTypedName",
                          "src": "10301:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10320:29:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "10335:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10346:2:23",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10331:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10331:18:23"
                      },
                      "variables": [
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "10324:3:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10358:10:23",
                      "value": {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "10365:3:23"
                      },
                      "variableNames": [
                        {
                          "name": "pos",
                          "nodeType": "YulIdentifier",
                          "src": "10358:3:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10377:29:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "10395:6:23"
                          },
                          {
                            "name": "_3",
                            "nodeType": "YulIdentifier",
                            "src": "10403:2:23"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10391:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10391:15:23"
                      },
                      "variables": [
                        {
                          "name": "srcPtr",
                          "nodeType": "YulTypedName",
                          "src": "10381:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "10415:10:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "10424:1:23",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "i",
                          "nodeType": "YulTypedName",
                          "src": "10419:1:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "10482:120:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "10503:3:23"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "10514:6:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sload",
                                    "nodeType": "YulIdentifier",
                                    "src": "10508:5:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10508:13:23"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "10496:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10496:26:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "10496:26:23"
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "10535:19:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "10546:3:23"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "10551:2:23"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "10542:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10542:12:23"
                            },
                            "variableNames": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10535:3:23"
                              }
                            ]
                          },
                          {
                            "nodeType": "YulAssignment",
                            "src": "10567:25:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "srcPtr",
                                  "nodeType": "YulIdentifier",
                                  "src": "10581:6:23"
                                },
                                {
                                  "name": "_3",
                                  "nodeType": "YulIdentifier",
                                  "src": "10589:2:23"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "10577:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10577:15:23"
                            },
                            "variableNames": [
                              {
                                "name": "srcPtr",
                                "nodeType": "YulIdentifier",
                                "src": "10567:6:23"
                              }
                            ]
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "10445:1:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10448:4:23",
                            "type": "",
                            "value": "0x0a"
                          }
                        ],
                        "functionName": {
                          "name": "lt",
                          "nodeType": "YulIdentifier",
                          "src": "10442:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10442:11:23"
                      },
                      "nodeType": "YulForLoop",
                      "post": {
                        "nodeType": "YulBlock",
                        "src": "10454:19:23",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "10456:15:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "i",
                                  "nodeType": "YulIdentifier",
                                  "src": "10465:1:23"
                                },
                                {
                                  "name": "_3",
                                  "nodeType": "YulIdentifier",
                                  "src": "10468:2:23"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "10461:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "10461:10:23"
                            },
                            "variableNames": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "10456:1:23"
                              }
                            ]
                          }
                        ]
                      },
                      "pre": {
                        "nodeType": "YulBlock",
                        "src": "10438:3:23",
                        "statements": []
                      },
                      "src": "10434:168:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10622:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10633:3:23",
                                "type": "",
                                "value": "416"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10618:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10618:19:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "10643:6:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10659:3:23",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10664:1:23",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "10655:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10655:11:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10668:1:23",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10651:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10651:19:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "10639:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10639:32:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10611:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10611:61:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10611:61:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10692:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10703:3:23",
                                "type": "",
                                "value": "448"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10688:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10688:19:23"
                          },
                          {
                            "name": "_1",
                            "nodeType": "YulIdentifier",
                            "src": "10709:2:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10681:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10681:31:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10681:31:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "10721:53:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "10747:6:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10759:9:23"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "10770:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10755:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10755:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "10729:17:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10729:45:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "10721:4:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_struct$_DeedInfo_$4513_storage_ptr_t_address_t_string_memory_ptr__to_t_uint256_t_struct$_DeedInfo_$4513_memory_ptr_t_address_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "9959:9:23",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "9970:6:23",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "9978:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "9986:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "9994:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "10005:4:23",
                    "type": ""
                  }
                ],
                "src": "9756:1024:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10817:95:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10834:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10841:3:23",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10846:10:23",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "10837:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10837:20:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10827:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10827:31:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10827:31:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10874:1:23",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10877:4:23",
                            "type": "",
                            "value": "0x11"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "10867:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10867:15:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10867:15:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10898:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10901:4:23",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "10891:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10891:15:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "10891:15:23"
                    }
                  ]
                },
                "name": "panic_error_0x11",
                "nodeType": "YulFunctionDefinition",
                "src": "10785:127:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "10965:77:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "10975:16:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "10986:1:23"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "10989:1:23"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "10982:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "10982:9:23"
                      },
                      "variableNames": [
                        {
                          "name": "sum",
                          "nodeType": "YulIdentifier",
                          "src": "10975:3:23"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "11014:22:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "11016:16:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "11016:18:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "11016:18:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "11006:1:23"
                          },
                          {
                            "name": "sum",
                            "nodeType": "YulIdentifier",
                            "src": "11009:3:23"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "11003:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11003:10:23"
                      },
                      "nodeType": "YulIf",
                      "src": "11000:36:23"
                    }
                  ]
                },
                "name": "checked_add_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "10948:1:23",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "10951:1:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "sum",
                    "nodeType": "YulTypedName",
                    "src": "10957:3:23",
                    "type": ""
                  }
                ],
                "src": "10917:125:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11204:218:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "11214:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11226:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11237:2:23",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11222:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11222:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "11214:4:23"
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11249:29:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11267:3:23",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11272:1:23",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "11263:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11263:11:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11276:1:23",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "11259:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11259:19:23"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "11253:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "11294:9:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11309:6:23"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11317:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11305:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11305:15:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11287:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11287:34:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11287:34:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11341:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11352:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11337:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11337:18:23"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "11357:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11330:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11330:34:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11330:34:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11384:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11395:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11380:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11380:18:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "11404:6:23"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "11412:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "11400:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11400:15:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11373:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11373:43:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11373:43:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "11157:9:23",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "11168:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "11176:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11184:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "11195:4:23",
                    "type": ""
                  }
                ],
                "src": "11047:375:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11667:267:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "11684:3:23"
                          },
                          {
                            "hexValue": "5b446565644e46545d204d757374206265206f776e6572206f66207468652044",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11689:34:23",
                            "type": "",
                            "value": "[DeedNFT] Must be owner of the D"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11677:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11677:47:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11677:47:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11744:3:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11749:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11740:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11740:12:23"
                          },
                          {
                            "hexValue": "656564207769746820696420",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "11754:14:23",
                            "type": "",
                            "value": "eed with id "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "11733:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11733:36:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11733:36:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "11778:27:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "11798:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "11792:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11792:13:23"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "11782:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11853:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11861:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11849:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11849:15:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11870:3:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11875:2:23",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11866:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11866:12:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "11880:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "11814:34:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11814:73:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "11814:73:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "11896:32:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11911:3:23"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "11916:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11907:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11907:16:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11925:2:23",
                            "type": "",
                            "value": "44"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "11903:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "11903:25:23"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "11896:3:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_stringliteral_4d0368677e0dd570473e3f4d3f52f7b30e2501164f66174da72f7efe9ace832a_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "11643:3:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "11648:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "11659:3:23",
                    "type": ""
                  }
                ],
                "src": "11427:507:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "11988:79:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "11998:17:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "12010:1:23"
                          },
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "12013:1:23"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "12006:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12006:9:23"
                      },
                      "variableNames": [
                        {
                          "name": "diff",
                          "nodeType": "YulIdentifier",
                          "src": "11998:4:23"
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "12039:22:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x11",
                                "nodeType": "YulIdentifier",
                                "src": "12041:16:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "12041:18:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "12041:18:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "diff",
                            "nodeType": "YulIdentifier",
                            "src": "12030:4:23"
                          },
                          {
                            "name": "x",
                            "nodeType": "YulIdentifier",
                            "src": "12036:1:23"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "12027:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12027:11:23"
                      },
                      "nodeType": "YulIf",
                      "src": "12024:37:23"
                    }
                  ]
                },
                "name": "checked_sub_t_uint256",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "x",
                    "nodeType": "YulTypedName",
                    "src": "11970:1:23",
                    "type": ""
                  },
                  {
                    "name": "y",
                    "nodeType": "YulTypedName",
                    "src": "11973:1:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "diff",
                    "nodeType": "YulTypedName",
                    "src": "11979:4:23",
                    "type": ""
                  }
                ],
                "src": "11939:128:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12312:261:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "12329:3:23"
                          },
                          {
                            "hexValue": "5b446565644e46545d204465656420646f6573206e6f74206578697374207769",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12334:34:23",
                            "type": "",
                            "value": "[DeedNFT] Deed does not exist wi"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12322:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12322:47:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12322:47:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12389:3:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12394:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12385:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12385:12:23"
                          },
                          {
                            "hexValue": "746820696420",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "12399:8:23",
                            "type": "",
                            "value": "th id "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12378:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12378:30:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12378:30:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "12417:27:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "12437:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "12431:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12431:13:23"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "12421:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "12492:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12500:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12488:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12488:15:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12509:3:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12514:2:23",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12505:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12505:12:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "12519:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "12453:34:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12453:73:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12453:73:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "12535:32:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "12550:3:23"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "12555:6:23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12546:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12546:16:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12564:2:23",
                            "type": "",
                            "value": "38"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12542:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12542:25:23"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "12535:3:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_stringliteral_7547728b7ec6323597698e6b54f201eb6df88e5a0f038ff1b3aefd8b64c87789_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "12288:3:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "12293:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "12304:3:23",
                    "type": ""
                  }
                ],
                "src": "12072:501:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "12719:138:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "12729:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12741:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "12752:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "12737:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12737:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "12729:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "12771:9:23"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "12782:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "12764:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12764:25:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12764:25:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "12824:6:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12836:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12847:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12832:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12832:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_enum_AssetType",
                          "nodeType": "YulIdentifier",
                          "src": "12798:25:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "12798:53:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "12798:53:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_enum$_AssetType_$4529__to_t_uint256_t_uint8__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "12680:9:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "12691:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "12699:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "12710:4:23",
                    "type": ""
                  }
                ],
                "src": "12578:279:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13036:237:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13053:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13064:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13046:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13046:21:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13046:21:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13087:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13098:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13083:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13083:18:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13103:2:23",
                            "type": "",
                            "value": "47"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13076:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13076:30:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13076:30:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13126:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13137:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13122:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13122:18:23"
                          },
                          {
                            "hexValue": "5b446565644e46545d204f776e65722063616e6e6f742076616c696461746520",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13142:34:23",
                            "type": "",
                            "value": "[DeedNFT] Owner cannot validate "
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13115:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13115:62:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13115:62:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13197:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13208:2:23",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13193:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13193:18:23"
                          },
                          {
                            "hexValue": "7468656972206f776e206173736574",
                            "kind": "string",
                            "nodeType": "YulLiteral",
                            "src": "13213:17:23",
                            "type": "",
                            "value": "their own asset"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13186:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13186:45:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13186:45:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13240:27:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13252:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13263:3:23",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13248:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13248:19:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13240:4:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_stringliteral_44abda6a13529790306777db85b421881606db3c6df13c85000f766808fdc9ab__to_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13013:9:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13027:4:23",
                    "type": ""
                  }
                ],
                "src": "12862:411:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13386:101:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "13396:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13408:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13419:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "13404:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13404:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13396:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13438:9:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "13453:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13461:18:23",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13449:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13449:31:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13431:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13431:50:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13431:50:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13355:9:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13366:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13377:4:23",
                    "type": ""
                  }
                ],
                "src": "13278:209:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13641:142:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "13658:9:23"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "13669:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13651:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13651:25:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13651:25:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13696:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13707:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13692:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13692:18:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13712:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13685:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13685:30:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13685:30:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13724:53:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "13750:6:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13762:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13773:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13758:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13758:18:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "13732:17:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13732:45:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "13724:4:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "13602:9:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "13613:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "13621:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "13632:4:23",
                    "type": ""
                  }
                ],
                "src": "13492:291:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13844:65:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13861:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "13864:3:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "13854:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13854:14:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "13854:14:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "13877:26:23",
                      "value": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13895:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "13898:4:23",
                            "type": "",
                            "value": "0x20"
                          }
                        ],
                        "functionName": {
                          "name": "keccak256",
                          "nodeType": "YulIdentifier",
                          "src": "13885:9:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "13885:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "data",
                          "nodeType": "YulIdentifier",
                          "src": "13877:4:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "array_dataslot_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "ptr",
                    "nodeType": "YulTypedName",
                    "src": "13827:3:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "13835:4:23",
                    "type": ""
                  }
                ],
                "src": "13788:121:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "13995:464:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "14028:425:23",
                        "statements": [
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "14042:11:23",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "14052:1:23",
                              "type": "",
                              "value": "0"
                            },
                            "variables": [
                              {
                                "name": "_1",
                                "nodeType": "YulTypedName",
                                "src": "14046:2:23",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "14073:2:23"
                                },
                                {
                                  "name": "array",
                                  "nodeType": "YulIdentifier",
                                  "src": "14077:5:23"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "14066:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14066:17:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "14066:17:23"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "14096:31:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulIdentifier",
                                  "src": "14118:2:23"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14122:4:23",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "keccak256",
                                "nodeType": "YulIdentifier",
                                "src": "14108:9:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14108:19:23"
                            },
                            "variables": [
                              {
                                "name": "data",
                                "nodeType": "YulTypedName",
                                "src": "14100:4:23",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "14140:57:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "14163:4:23"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14173:1:23",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nodeType": "YulIdentifier",
                                          "src": "14180:10:23"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14192:2:23",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "14176:3:23"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14176:19:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "14169:3:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14169:27:23"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "14159:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14159:38:23"
                            },
                            "variables": [
                              {
                                "name": "deleteStart",
                                "nodeType": "YulTypedName",
                                "src": "14144:11:23",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "14234:23:23",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "14236:19:23",
                                  "value": {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "14251:4:23"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "deleteStart",
                                      "nodeType": "YulIdentifier",
                                      "src": "14236:11:23"
                                    }
                                  ]
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "startIndex",
                                  "nodeType": "YulIdentifier",
                                  "src": "14216:10:23"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14228:4:23",
                                  "type": "",
                                  "value": "0x20"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "14213:2:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14213:20:23"
                            },
                            "nodeType": "YulIf",
                            "src": "14210:47:23"
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "14270:41:23",
                            "value": {
                              "arguments": [
                                {
                                  "name": "data",
                                  "nodeType": "YulIdentifier",
                                  "src": "14284:4:23"
                                },
                                {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14294:1:23",
                                      "type": "",
                                      "value": "5"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "len",
                                          "nodeType": "YulIdentifier",
                                          "src": "14301:3:23"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14306:2:23",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "14297:3:23"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14297:12:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "14290:3:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14290:20:23"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "14280:3:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14280:31:23"
                            },
                            "variables": [
                              {
                                "name": "_2",
                                "nodeType": "YulTypedName",
                                "src": "14274:2:23",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "nodeType": "YulVariableDeclaration",
                            "src": "14324:24:23",
                            "value": {
                              "name": "deleteStart",
                              "nodeType": "YulIdentifier",
                              "src": "14337:11:23"
                            },
                            "variables": [
                              {
                                "name": "start",
                                "nodeType": "YulTypedName",
                                "src": "14328:5:23",
                                "type": ""
                              }
                            ]
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "14422:21:23",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "14431:5:23"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "14438:2:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "14424:6:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14424:17:23"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "14424:17:23"
                                }
                              ]
                            },
                            "condition": {
                              "arguments": [
                                {
                                  "name": "start",
                                  "nodeType": "YulIdentifier",
                                  "src": "14372:5:23"
                                },
                                {
                                  "name": "_2",
                                  "nodeType": "YulIdentifier",
                                  "src": "14379:2:23"
                                }
                              ],
                              "functionName": {
                                "name": "lt",
                                "nodeType": "YulIdentifier",
                                "src": "14369:2:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14369:13:23"
                            },
                            "nodeType": "YulForLoop",
                            "post": {
                              "nodeType": "YulBlock",
                              "src": "14383:26:23",
                              "statements": [
                                {
                                  "nodeType": "YulAssignment",
                                  "src": "14385:22:23",
                                  "value": {
                                    "arguments": [
                                      {
                                        "name": "start",
                                        "nodeType": "YulIdentifier",
                                        "src": "14398:5:23"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "14405:1:23",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "14394:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14394:13:23"
                                  },
                                  "variableNames": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "14385:5:23"
                                    }
                                  ]
                                }
                              ]
                            },
                            "pre": {
                              "nodeType": "YulBlock",
                              "src": "14365:3:23",
                              "statements": []
                            },
                            "src": "14361:82:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "len",
                            "nodeType": "YulIdentifier",
                            "src": "14011:3:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14016:2:23",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "14008:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14008:11:23"
                      },
                      "nodeType": "YulIf",
                      "src": "14005:448:23"
                    }
                  ]
                },
                "name": "clean_up_bytearray_end_slots_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "array",
                    "nodeType": "YulTypedName",
                    "src": "13967:5:23",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "13974:3:23",
                    "type": ""
                  },
                  {
                    "name": "startIndex",
                    "nodeType": "YulTypedName",
                    "src": "13979:10:23",
                    "type": ""
                  }
                ],
                "src": "13914:545:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14549:81:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "14559:65:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "14574:4:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "14592:1:23",
                                            "type": "",
                                            "value": "3"
                                          },
                                          {
                                            "name": "len",
                                            "nodeType": "YulIdentifier",
                                            "src": "14595:3:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "14588:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14588:11:23"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "14605:1:23",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "14601:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14601:6:23"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shr",
                                      "nodeType": "YulIdentifier",
                                      "src": "14584:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14584:24:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "14580:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14580:29:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "14570:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14570:40:23"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14616:1:23",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "14619:3:23"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "14612:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14612:11:23"
                          }
                        ],
                        "functionName": {
                          "name": "or",
                          "nodeType": "YulIdentifier",
                          "src": "14567:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14567:57:23"
                      },
                      "variableNames": [
                        {
                          "name": "used",
                          "nodeType": "YulIdentifier",
                          "src": "14559:4:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "extract_used_part_and_set_length_of_short_byte_array",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "data",
                    "nodeType": "YulTypedName",
                    "src": "14526:4:23",
                    "type": ""
                  },
                  {
                    "name": "len",
                    "nodeType": "YulTypedName",
                    "src": "14532:3:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "used",
                    "nodeType": "YulTypedName",
                    "src": "14540:4:23",
                    "type": ""
                  }
                ],
                "src": "14464:166:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "14731:1256:23",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "14741:24:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "src",
                            "nodeType": "YulIdentifier",
                            "src": "14761:3:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "14755:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14755:10:23"
                      },
                      "variables": [
                        {
                          "name": "newLen",
                          "nodeType": "YulTypedName",
                          "src": "14745:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "14808:22:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [],
                              "functionName": {
                                "name": "panic_error_0x41",
                                "nodeType": "YulIdentifier",
                                "src": "14810:16:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "14810:18:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "14810:18:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "14780:6:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14788:18:23",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "14777:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14777:30:23"
                      },
                      "nodeType": "YulIf",
                      "src": "14774:56:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "slot",
                            "nodeType": "YulIdentifier",
                            "src": "14883:4:23"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nodeType": "YulIdentifier",
                                    "src": "14921:4:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nodeType": "YulIdentifier",
                                  "src": "14915:5:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14915:11:23"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "14889:25:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14889:38:23"
                          },
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "14929:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "clean_up_bytearray_end_slots_string_storage",
                          "nodeType": "YulIdentifier",
                          "src": "14839:43:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "14839:97:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "14839:97:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "14945:18:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "14962:1:23",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulTypedName",
                          "src": "14949:9:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "14972:23:23",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "14991:4:23",
                        "type": "",
                        "value": "0x20"
                      },
                      "variables": [
                        {
                          "name": "srcOffset_1",
                          "nodeType": "YulTypedName",
                          "src": "14976:11:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "15004:24:23",
                      "value": {
                        "name": "srcOffset_1",
                        "nodeType": "YulIdentifier",
                        "src": "15017:11:23"
                      },
                      "variableNames": [
                        {
                          "name": "srcOffset",
                          "nodeType": "YulIdentifier",
                          "src": "15004:9:23"
                        }
                      ]
                    },
                    {
                      "cases": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15074:656:23",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "15088:35:23",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "15107:6:23"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15119:2:23",
                                          "type": "",
                                          "value": "31"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "not",
                                        "nodeType": "YulIdentifier",
                                        "src": "15115:3:23"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15115:7:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "15103:3:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15103:20:23"
                                },
                                "variables": [
                                  {
                                    "name": "loopEnd",
                                    "nodeType": "YulTypedName",
                                    "src": "15092:7:23",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "15136:49:23",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "15180:4:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_dataslot_string_storage",
                                    "nodeType": "YulIdentifier",
                                    "src": "15150:29:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15150:35:23"
                                },
                                "variables": [
                                  {
                                    "name": "dstPtr",
                                    "nodeType": "YulTypedName",
                                    "src": "15140:6:23",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "15198:10:23",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "15207:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "15202:1:23",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "15285:172:23",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "15310:6:23"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15328:3:23"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15333:9:23"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15324:3:23"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15324:19:23"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "15318:5:23"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15318:26:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "15303:6:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15303:42:23"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "15303:42:23"
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "15362:24:23",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "15376:6:23"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "15384:1:23",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "15372:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15372:14:23"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "dstPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "15362:6:23"
                                        }
                                      ]
                                    },
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "15403:40:23",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "srcOffset",
                                            "nodeType": "YulIdentifier",
                                            "src": "15420:9:23"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "15431:11:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "15416:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15416:27:23"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "srcOffset",
                                          "nodeType": "YulIdentifier",
                                          "src": "15403:9:23"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "15232:1:23"
                                    },
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "15235:7:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "15229:2:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15229:14:23"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "15244:28:23",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "15246:24:23",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "i",
                                            "nodeType": "YulIdentifier",
                                            "src": "15255:1:23"
                                          },
                                          {
                                            "name": "srcOffset_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "15258:11:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "15251:3:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15251:19:23"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "15246:1:23"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "15225:3:23",
                                  "statements": []
                                },
                                "src": "15221:236:23"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "15505:166:23",
                                  "statements": [
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "15523:43:23",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "15550:3:23"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "15555:9:23"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "15546:3:23"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15546:19:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "15540:5:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15540:26:23"
                                      },
                                      "variables": [
                                        {
                                          "name": "lastValue",
                                          "nodeType": "YulTypedName",
                                          "src": "15527:9:23",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "dstPtr",
                                            "nodeType": "YulIdentifier",
                                            "src": "15590:6:23"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "name": "lastValue",
                                                "nodeType": "YulIdentifier",
                                                "src": "15602:9:23"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "15629:1:23",
                                                                "type": "",
                                                                "value": "3"
                                                              },
                                                              {
                                                                "name": "newLen",
                                                                "nodeType": "YulIdentifier",
                                                                "src": "15632:6:23"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "shl",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "15625:3:23"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "15625:14:23"
                                                          },
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "15641:3:23",
                                                            "type": "",
                                                            "value": "248"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "and",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "15621:3:23"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "15621:24:23"
                                                      },
                                                      {
                                                        "arguments": [
                                                          {
                                                            "kind": "number",
                                                            "nodeType": "YulLiteral",
                                                            "src": "15651:1:23",
                                                            "type": "",
                                                            "value": "0"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "not",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "15647:3:23"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "15647:6:23"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "shr",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "15617:3:23"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "15617:37:23"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "not",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15613:3:23"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15613:42:23"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "and",
                                              "nodeType": "YulIdentifier",
                                              "src": "15598:3:23"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15598:58:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "15583:6:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15583:74:23"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "15583:74:23"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "loopEnd",
                                      "nodeType": "YulIdentifier",
                                      "src": "15476:7:23"
                                    },
                                    {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "15485:6:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "15473:2:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15473:19:23"
                                },
                                "nodeType": "YulIf",
                                "src": "15470:201:23"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "15691:4:23"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "15705:1:23",
                                              "type": "",
                                              "value": "1"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "15708:6:23"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "15701:3:23"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15701:14:23"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "15717:1:23",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "15697:3:23"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15697:22:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "15684:6:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15684:36:23"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15684:36:23"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "15067:663:23",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15072:1:23",
                            "type": "",
                            "value": "1"
                          }
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15747:234:23",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "15761:14:23",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "15774:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulTypedName",
                                    "src": "15765:5:23",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "15810:67:23",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "15828:35:23",
                                      "value": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "src",
                                                "nodeType": "YulIdentifier",
                                                "src": "15847:3:23"
                                              },
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "15852:9:23"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "15843:3:23"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15843:19:23"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "15837:5:23"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "15837:26:23"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "15828:5:23"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "name": "newLen",
                                  "nodeType": "YulIdentifier",
                                  "src": "15791:6:23"
                                },
                                "nodeType": "YulIf",
                                "src": "15788:89:23"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "slot",
                                      "nodeType": "YulIdentifier",
                                      "src": "15897:4:23"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "value",
                                          "nodeType": "YulIdentifier",
                                          "src": "15956:5:23"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "15963:6:23"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "extract_used_part_and_set_length_of_short_byte_array",
                                        "nodeType": "YulIdentifier",
                                        "src": "15903:52:23"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15903:67:23"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "sstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "15890:6:23"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15890:81:23"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15890:81:23"
                              }
                            ]
                          },
                          "nodeType": "YulCase",
                          "src": "15739:242:23",
                          "value": "default"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "name": "newLen",
                            "nodeType": "YulIdentifier",
                            "src": "15047:6:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "15055:2:23",
                            "type": "",
                            "value": "31"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "15044:2:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "15044:14:23"
                      },
                      "nodeType": "YulSwitch",
                      "src": "15037:944:23"
                    }
                  ]
                },
                "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "slot",
                    "nodeType": "YulTypedName",
                    "src": "14716:4:23",
                    "type": ""
                  },
                  {
                    "name": "src",
                    "nodeType": "YulTypedName",
                    "src": "14722:3:23",
                    "type": ""
                  }
                ],
                "src": "14635:1352:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16024:95:23",
                  "statements": [
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16041:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16048:3:23",
                                "type": "",
                                "value": "224"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16053:10:23",
                                "type": "",
                                "value": "0x4e487b71"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "16044:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16044:20:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16034:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16034:31:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16034:31:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16081:1:23",
                            "type": "",
                            "value": "4"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16084:4:23",
                            "type": "",
                            "value": "0x12"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16074:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16074:15:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16074:15:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16105:1:23",
                            "type": "",
                            "value": "0"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16108:4:23",
                            "type": "",
                            "value": "0x24"
                          }
                        ],
                        "functionName": {
                          "name": "revert",
                          "nodeType": "YulIdentifier",
                          "src": "16098:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16098:15:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16098:15:23"
                    }
                  ]
                },
                "name": "panic_error_0x12",
                "nodeType": "YulFunctionDefinition",
                "src": "15992:127:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16247:135:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "16257:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16269:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16280:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "16265:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16265:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16257:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16299:9:23"
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "16310:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16292:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16292:25:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16292:25:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16337:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16348:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16333:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16333:18:23"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "16367:6:23"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "16360:6:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16360:14:23"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "16353:6:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16353:22:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16326:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16326:50:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16326:50:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16208:9:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "16219:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16227:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16238:4:23",
                    "type": ""
                  }
                ],
                "src": "16124:258:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16590:286:23",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "16600:29:23",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16618:3:23",
                                "type": "",
                                "value": "160"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16623:1:23",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "16614:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16614:11:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16627:1:23",
                            "type": "",
                            "value": "1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "16610:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16610:19:23"
                      },
                      "variables": [
                        {
                          "name": "_1",
                          "nodeType": "YulTypedName",
                          "src": "16604:2:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "16645:9:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16660:6:23"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16668:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16656:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16656:15:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16638:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16638:34:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16638:34:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16692:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16703:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16688:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16688:18:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "16712:6:23"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "16720:2:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "16708:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16708:15:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16681:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16681:43:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16681:43:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16744:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16755:2:23",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16740:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16740:18:23"
                          },
                          {
                            "name": "value2",
                            "nodeType": "YulIdentifier",
                            "src": "16760:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16733:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16733:34:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16733:34:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16787:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16798:2:23",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16783:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16783:18:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "16803:3:23",
                            "type": "",
                            "value": "128"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "16776:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16776:31:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "16776:31:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "16816:54:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value3",
                            "nodeType": "YulIdentifier",
                            "src": "16842:6:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16854:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16865:3:23",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16850:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16850:19:23"
                          }
                        ],
                        "functionName": {
                          "name": "abi_encode_string",
                          "nodeType": "YulIdentifier",
                          "src": "16824:17:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16824:46:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "16816:4:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16535:9:23",
                    "type": ""
                  },
                  {
                    "name": "value3",
                    "nodeType": "YulTypedName",
                    "src": "16546:6:23",
                    "type": ""
                  },
                  {
                    "name": "value2",
                    "nodeType": "YulTypedName",
                    "src": "16554:6:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "16562:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16570:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "16581:4:23",
                    "type": ""
                  }
                ],
                "src": "16387:489:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "16961:169:23",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "17007:16:23",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17016:1:23",
                                  "type": "",
                                  "value": "0"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "17019:1:23",
                                  "type": "",
                                  "value": "0"
                                }
                              ],
                              "functionName": {
                                "name": "revert",
                                "nodeType": "YulIdentifier",
                                "src": "17009:6:23"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "17009:12:23"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "17009:12:23"
                          }
                        ]
                      },
                      "condition": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "16982:7:23"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16991:9:23"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "16978:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16978:23:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17003:2:23",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "slt",
                          "nodeType": "YulIdentifier",
                          "src": "16974:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "16974:32:23"
                      },
                      "nodeType": "YulIf",
                      "src": "16971:52:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17032:29:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17051:9:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "17045:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17045:16:23"
                      },
                      "variables": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "17036:5:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "17094:5:23"
                          }
                        ],
                        "functionName": {
                          "name": "validator_revert_bytes4",
                          "nodeType": "YulIdentifier",
                          "src": "17070:23:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17070:30:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17070:30:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17109:15:23",
                      "value": {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "17119:5:23"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "17109:6:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_decode_tuple_t_bytes4_fromMemory",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "16927:9:23",
                    "type": ""
                  },
                  {
                    "name": "dataEnd",
                    "nodeType": "YulTypedName",
                    "src": "16938:7:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "16950:6:23",
                    "type": ""
                  }
                ],
                "src": "16881:249:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17322:309:23",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17332:27:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "17352:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "17346:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17346:13:23"
                      },
                      "variables": [
                        {
                          "name": "length",
                          "nodeType": "YulTypedName",
                          "src": "17336:6:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17407:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17415:4:23",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17403:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17403:17:23"
                          },
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "17422:3:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "17427:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "17368:34:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17368:66:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17368:66:23"
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17443:29:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "17460:3:23"
                          },
                          {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "17465:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17456:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17456:16:23"
                      },
                      "variables": [
                        {
                          "name": "end_1",
                          "nodeType": "YulTypedName",
                          "src": "17447:5:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "17481:29:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "17503:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mload",
                          "nodeType": "YulIdentifier",
                          "src": "17497:5:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17497:13:23"
                      },
                      "variables": [
                        {
                          "name": "length_1",
                          "nodeType": "YulTypedName",
                          "src": "17485:8:23",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "17558:6:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17566:4:23",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17554:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17554:17:23"
                          },
                          {
                            "name": "end_1",
                            "nodeType": "YulIdentifier",
                            "src": "17573:5:23"
                          },
                          {
                            "name": "length_1",
                            "nodeType": "YulIdentifier",
                            "src": "17580:8:23"
                          }
                        ],
                        "functionName": {
                          "name": "copy_memory_to_memory_with_cleanup",
                          "nodeType": "YulIdentifier",
                          "src": "17519:34:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17519:70:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17519:70:23"
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "17598:27:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "end_1",
                            "nodeType": "YulIdentifier",
                            "src": "17609:5:23"
                          },
                          {
                            "name": "length_1",
                            "nodeType": "YulIdentifier",
                            "src": "17616:8:23"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17605:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17605:20:23"
                      },
                      "variableNames": [
                        {
                          "name": "end",
                          "nodeType": "YulIdentifier",
                          "src": "17598:3:23"
                        }
                      ]
                    }
                  ]
                },
                "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "pos",
                    "nodeType": "YulTypedName",
                    "src": "17290:3:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "17295:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "17303:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "end",
                    "nodeType": "YulTypedName",
                    "src": "17314:3:23",
                    "type": ""
                  }
                ],
                "src": "17135:496:23"
              },
              {
                "body": {
                  "nodeType": "YulBlock",
                  "src": "17765:145:23",
                  "statements": [
                    {
                      "nodeType": "YulAssignment",
                      "src": "17775:26:23",
                      "value": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17787:9:23"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "17798:2:23",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "17783:3:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17783:18:23"
                      },
                      "variableNames": [
                        {
                          "name": "tail",
                          "nodeType": "YulIdentifier",
                          "src": "17775:4:23"
                        }
                      ]
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "17817:9:23"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17832:6:23"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17848:3:23",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "17853:1:23",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "17844:3:23"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17844:11:23"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17857:1:23",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17840:3:23"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17840:19:23"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17828:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17828:32:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17810:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17810:51:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17810:51:23"
                    },
                    {
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17881:9:23"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17892:2:23",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17877:3:23"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17877:18:23"
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulIdentifier",
                            "src": "17897:6:23"
                          }
                        ],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "17870:6:23"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "17870:34:23"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "17870:34:23"
                    }
                  ]
                },
                "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                "nodeType": "YulFunctionDefinition",
                "parameters": [
                  {
                    "name": "headStart",
                    "nodeType": "YulTypedName",
                    "src": "17726:9:23",
                    "type": ""
                  },
                  {
                    "name": "value1",
                    "nodeType": "YulTypedName",
                    "src": "17737:6:23",
                    "type": ""
                  },
                  {
                    "name": "value0",
                    "nodeType": "YulTypedName",
                    "src": "17745:6:23",
                    "type": ""
                  }
                ],
                "returnVariables": [
                  {
                    "name": "tail",
                    "nodeType": "YulTypedName",
                    "src": "17756:4:23",
                    "type": ""
                  }
                ],
                "src": "17636:274:23"
              }
            ]
          },
          "contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_string(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        array := abi_decode_available_length_string(add(offset, 0x20), calldataload(offset), end)\n    }\n    function abi_decode_enum_AssetType(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(lt(value, 4)) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_enum$_AssetType_$4529(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n        value2 := abi_decode_enum_AssetType(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_enum_AssetType(value, pos)\n    {\n        if iszero(lt(value, 4))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(pos, value)\n    }\n    function abi_encode_tuple_t_struct$_DeedInfo_$4513_memory_ptr__to_t_struct$_DeedInfo_$4513_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 384)\n        abi_encode_enum_AssetType(mload(value0), headStart)\n        let _1 := 0x20\n        mstore(add(headStart, _1), iszero(iszero(mload(add(value0, _1)))))\n        let memberValue0 := mload(add(value0, 0x40))\n        let pos := add(headStart, 0x40)\n        pos := pos\n        let srcPtr := memberValue0\n        let i := 0\n        for { } lt(i, 0x0a) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n    }\n    function abi_decode_tuple_t_uint256t_enum$_AssetType_$4529(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_enum_AssetType(add(headStart, 32))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_bool(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_bool(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_string(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256t_string_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_1997334ad722e5cc47a196015e45df2e55148165621fbbb7691725bc967d80bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"[AccessManagement] Only the vali\")\n        mstore(add(headStart, 96), \"dator can interact\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_struct$_DeedInfo_$4513_storage_ptr_t_address_t_string_memory_ptr__to_t_uint256_t_struct$_DeedInfo_$4513_memory_ptr_t_address_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 480\n        mstore(headStart, value0)\n        let _2 := 32\n        let slotValue := sload(value1)\n        abi_encode_enum_AssetType(and(slotValue, 0xff), add(headStart, _2))\n        mstore(add(headStart, 64), iszero(iszero(and(shr(8, slotValue), 0xff))))\n        let _3 := 0x01\n        let pos := add(headStart, 96)\n        pos := pos\n        let srcPtr := add(value1, _3)\n        let i := 0\n        for { } lt(i, 0x0a) { i := add(i, _3) }\n        {\n            mstore(pos, sload(srcPtr))\n            pos := add(pos, _2)\n            srcPtr := add(srcPtr, _3)\n        }\n        mstore(add(headStart, 416), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 448), _1)\n        tail := abi_encode_string(value3, add(headStart, _1))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_4d0368677e0dd570473e3f4d3f52f7b30e2501164f66174da72f7efe9ace832a_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"[DeedNFT] Must be owner of the D\")\n        mstore(add(pos, 32), \"eed with id \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 44), length)\n        end := add(add(pos, length), 44)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_packed_t_stringliteral_7547728b7ec6323597698e6b54f201eb6df88e5a0f038ff1b3aefd8b64c87789_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, \"[DeedNFT] Deed does not exist wi\")\n        mstore(add(pos, 32), \"th id \")\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(pos, 38), length)\n        end := add(add(pos, length), 38)\n    }\n    function abi_encode_tuple_t_uint256_t_enum$_AssetType_$4529__to_t_uint256_t_uint8__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        abi_encode_enum_AssetType(value1, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_stringliteral_44abda6a13529790306777db85b421881606db3c6df13c85000f766808fdc9ab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"[DeedNFT] Owner cannot validate \")\n        mstore(add(headStart, 96), \"their own asset\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256_t_string_memory_ptr__to_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_string(value1, add(headStart, 64))\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_uint256_t_bool__to_t_uint256_t_bool__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), iszero(iszero(value1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}",
          "id": 23,
          "language": "Yul",
          "name": "#utility.yul"
        }
      ],
      "immutableReferences": {},
      "linkReferences": {},
      "object": "608060405234801561001057600080fd5b50600436106101735760003560e01c806370a08231116100de578063b82c356911610097578063c4d66de811610071578063c4d66de814610328578063c87b56dd1461033b578063e985e9c51461034e578063f1bc66731461036157600080fd5b8063b82c3569146102fa578063b88d4fde1461030d578063b99c23e31461032057600080fd5b806370a08231146102a857806389b9e75f146102bb57806391d14854146102c357806395d89b41146102d6578063985e3a64146102de578063a22cb465146102e757600080fd5b806342842e0e1161013057806342842e0e1461022957806342966c681461023c57806362d402bc1461024f5780636352211e1461026f578063682ece02146102825780636f6c15dd1461029557600080fd5b806301ffc9a71461017857806306fdde03146101a0578063081812fc146101b5578063095ea7b3146101e05780631a6c41e2146101f557806323b872dd14610216575b600080fd5b61018b610186366004611cf7565b610374565b60405190151581526020015b60405180910390f35b6101a8610385565b6040516101979190611d64565b6101c86101c3366004611d77565b610429565b6040516001600160a01b039091168152602001610197565b6101f36101ee366004611dac565b61043e565b005b610208610203366004611e91565b61044d565b604051908152602001610197565b6101f3610224366004611eef565b610618565b6101f3610237366004611eef565b6106a3565b6101f361024a366004611d77565b6106c3565b61026261025d366004611d77565b6107a6565b6040516101979190611f63565b6101c861027d366004611d77565b6108a3565b6101f3610290366004611fb6565b6108ae565b6101f36102a3366004611ff0565b6109ed565b6102086102b6366004612020565b610b70565b61018b610bcc565b61018b6102d136600461203b565b610c4d565b6101a8610cc3565b61020860015481565b6101f36102f536600461205e565b610d02565b61018b610308366004611d77565b610d0d565b6101f361031b36600461208a565b610d53565b61018b610d6a565b6101f3610336366004612020565b610d82565b6101a8610349366004611d77565b610ee4565b61018b61035c366004612106565b610eef565b6101f361036f366004612130565b610f3c565b600061037f82611053565b92915050565b60008051602061255e83398151915280546060919081906103a590612177565b80601f01602080910402602001604051908101604052809291908181526020018280546103d190612177565b801561041e5780601f106103f35761010080835404028352916020019161041e565b820191906000526020600020905b81548152906001019060200180831161040157829003601f168201915b505050505091505090565b600061043482611078565b5061037f826110b0565b6104498282336110ea565b5050565b600080546040805163624dd75f60e11b815290516001600160a01b03909216916391d1485491839163c49baebe916004808201926020929091908290030181865afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c491906121ab565b336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053391906121c4565b6105585760405162461bcd60e51b815260040161054f906121e1565b60405180910390fd5b610564846001546110f7565b600180546000908152600260205260409020805490918491839160ff199091169083600381111561059757610597611f2b565b02179055506105a86001548561115c565b805461ff0019166101001781556001547fb34e01ccbb7625db030cd3a3a1d6cdaee286062d973316cbe55a56d261a754a190826105e23390565b876040516105f39493929190612233565b60405180910390a160018054610608916122cd565b60018190559150505b9392505050565b6001600160a01b03821661064257604051633250574960e11b81526000600482015260240161054f565b600061064f8383336111d0565b9050836001600160a01b0316816001600160a01b03161461069d576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161054f565b50505050565b6106be83838360405180602001604052806000815250610d53565b505050565b806106cd816112da565b6001600160a01b0316336001600160a01b0316146106ea82611314565b6040516020016106fa91906122e0565b604051602081830303815290604052906107275760405162461bcd60e51b815260040161054f9190611d64565b50610731826113a7565b6001806000828254610743919061233a565b90915550506000828152600260205260408120805461ffff191681559061076d6001830182611c73565b50506040518281527f61c6643f6e835939ae6da3352c52e1b29a86e4ee6599ab73c5d9a416f75d6ed09060200160405180910390a15050565b6107ae611c85565b8160006107ba826112da565b6001600160a01b031614156107ce82611314565b6040516020016107de919061234d565b6040516020818303038152906040529061080b5760405162461bcd60e51b815260040161054f9190611d64565b50600083815260026020526040908190208151606081019092528054829060ff16600381111561083d5761083d611f2b565b600381111561084e5761084e611f2b565b81528154610100900460ff16151560208201526040805161014081018083529190920191906001840190600a9082845b81548152602001906001019080831161087e5750505050508152505091505b50919050565b600061037f82611078565b8160006108ba826112da565b6001600160a01b031614156108ce82611314565b6040516020016108de919061234d565b6040516020818303038152906040529061090b5760405162461bcd60e51b815260040161054f9190611d64565b5082610916816112da565b6001600160a01b0316336001600160a01b03161461093382611314565b60405160200161094391906122e0565b604051602081830303815290604052906109705760405162461bcd60e51b815260040161054f9190611d64565b50600084815260026020526040902080548490829060ff1916600183600381111561099d5761099d611f2b565b02179055506109ad8560006113e2565b7f0ed549f5e55ca444d100349be44584b8ad027eded8936b4b6248776ddcb93d1a85856040516109de9291906123a1565b60405180910390a15050505050565b6000546040805163624dd75f60e11b815290516001600160a01b03909216916391d1485491839163c49baebe916004808201926020929091908290030181865afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6391906121ab565b336040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610aae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad291906121c4565b610aee5760405162461bcd60e51b815260040161054f906121e1565b33610af8836112da565b6001600160a01b031603610b665760405162461bcd60e51b815260206004820152602f60248201527f5b446565644e46545d204f776e65722063616e6e6f742076616c69646174652060448201526e1d1a195a5c881bdddb88185cdcd95d608a1b606482015260840161054f565b61044982826113e2565b600060008051602061255e8339815191526001600160a01b038316610bab576040516322718ad960e21b81526000600482015260240161054f565b6001600160a01b039092166000908152600390920160205250604090205490565b600080546001600160a01b031663940e1570335b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4891906121c4565b905090565b60008054604051632474521560e21b8152600481018590526001600160a01b038481166024830152909116906391d1485490604401602060405180830381865afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061191906121c4565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079301805460609160008051602061255e833981519152916103a590612177565b61044933838361143c565b600080610d19836107a6565b5190506000816003811115610d3057610d30611f2b565b148061061157506002816003811115610d4b57610d4b611f2b565b149392505050565b610d5e848484610618565b61069d848484846114ed565b600080546001600160a01b031663c395fcb333610be0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610dc85750825b905060008267ffffffffffffffff166001148015610de55750303b155b905081158015610df3575080155b15610e115760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610e3b57845460ff60401b1916600160401b1785555b610e43611616565b610e88604051806040016040528060078152602001661119595913919560ca1b815250604051806040016040528060048152602001631111515160e21b815250611620565b610e9186611632565b600180558315610edc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2906020015b60405180910390a15b505050505050565b606061037f82611748565b6001600160a01b0391821660009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab00793056020908152604080832093909416825291909152205460ff1690565b816000610f48826112da565b6001600160a01b03161415610f5c82611314565b604051602001610f6c919061234d565b60405160208183030381529060405290610f995760405162461bcd60e51b815260040161054f9190611d64565b5082610fa4816112da565b6001600160a01b0316336001600160a01b031614610fc182611314565b604051602001610fd191906122e0565b60405160208183030381529060405290610ffe5760405162461bcd60e51b815260040161054f9190611d64565b50611009848461115c565b6110148460006113e2565b7ff0466cb4b529fe609c0a35fb0c8bb9a36ffb6c775a7fe7f83dec314f36bc5c9184846040516110459291906123b5565b60405180910390a150505050565b60006001600160e01b03198216632483248360e11b148061037f575061037f8261187d565b600080611084836112da565b90506001600160a01b03811661037f57604051637e27328960e01b81526004810184905260240161054f565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930460205260409020546001600160a01b031690565b6106be83838360016118cd565b6001600160a01b03821661112157604051633250574960e11b81526000600482015260240161054f565b600061112f838360006111d0565b90506001600160a01b038116156106be576040516339e3563760e11b81526000600482015260240161054f565b60008281527f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900602081905260409091206111968382612414565b506040518381527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020015b60405180910390a1505050565b600060008051602061255e833981519152816111eb856112da565b90506001600160a01b03841615611207576112078185876119e3565b6001600160a01b03811615611247576112246000866000806118cd565b6001600160a01b0381166000908152600383016020526040902080546000190190555b6001600160a01b03861615611278576001600160a01b03861660009081526003830160205260409020805460010190555b600085815260028301602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a495945050505050565b60009081527f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930260205260409020546001600160a01b031690565b6060600061132183611a47565b600101905060008167ffffffffffffffff81111561134157611341611dd6565b6040519080825280601f01601f19166020018201604052801561136b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461137557509392505050565b60006113b660008360006111d0565b90506001600160a01b03811661044957604051637e27328960e01b81526004810183905260240161054f565b600082815260026020908152604091829020805461ff001916610100851515908102919091178255835186815292830152917f6bed93006e6710fb84e37d9194eff400299d02ba0557551cc2245c1f1d8183ce91016111c3565b60008051602061255e8339815191526001600160a01b03831661147d57604051630b61174360e31b81526001600160a01b038416600482015260240161054f565b6001600160a01b038481166000818152600584016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a350505050565b6001600160a01b0383163b1561069d57604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061152f9033908890879087906004016124d4565b6020604051808303816000875af192505050801561156a575060408051601f3d908101601f1916820190925261156791810190612511565b60015b6115d3573d808015611598576040519150601f19603f3d011682016040523d82523d6000602084013e61159d565b606091505b5080516000036115cb57604051633250574960e11b81526001600160a01b038516600482015260240161054f565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461160f57604051633250574960e11b81526001600160a01b038516600482015260240161054f565b5050505050565b61161e611b1f565b565b611628611b1f565b6104498282611b68565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156116785750825b905060008267ffffffffffffffff1660011480156116955750303b155b9050811580156116a3575080155b156116c15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156116eb57845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b0388161790558315610edc57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602001610ed3565b60607f0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e790061177483611078565b506000838152602082905260408120805461178e90612177565b80601f01602080910402602001604051908101604052809291908181526020018280546117ba90612177565b80156118075780601f106117dc57610100808354040283529160200191611807565b820191906000526020600020905b8154815290600101906020018083116117ea57829003601f168201915b50505050509050600061182560408051602081019091526000815290565b9050805160000361183857509392505050565b81511561186b57808260405160200161185292919061252e565b6040516020818303038152906040529350505050919050565b61187485611b99565b95945050505050565b60006001600160e01b031982166380ac58cd60e01b14806118ae57506001600160e01b03198216635b5e139f60e01b145b8061037f57506301ffc9a760e01b6001600160e01b031983161461037f565b60008051602061255e83398151915281806118f057506001600160a01b03831615155b156119b257600061190085611078565b90506001600160a01b0384161580159061192c5750836001600160a01b0316816001600160a01b031614155b801561193f575061193d8185610eef565b155b156119685760405163a9fbf51f60e01b81526001600160a01b038516600482015260240161054f565b82156119b05784866001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b600093845260040160205250506040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6119ee838383611c0d565b6106be576001600160a01b038316611a1c57604051637e27328960e01b81526004810182905260240161054f565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161054f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310611a865772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611ab2576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611ad057662386f26fc10000830492506010015b6305f5e1008310611ae8576305f5e100830492506008015b6127108310611afc57612710830492506004015b60648310611b0e576064830492506002015b600a831061037f5760010192915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661161e57604051631afcd79f60e31b815260040160405180910390fd5b611b70611b1f565b60008051602061255e83398151915280611b8a8482612414565b506001810161069d8382612414565b6060611ba482611078565b506000611bbc60408051602081019091526000815290565b90506000815111611bdc5760405180602001604052806000815250610611565b80611be684611314565b604051602001611bf792919061252e565b6040516020818303038152906040529392505050565b60006001600160a01b03831615801590611c6b5750826001600160a01b0316846001600160a01b03161480611c475750611c478484610eef565b80611c6b5750826001600160a01b0316611c60836110b0565b6001600160a01b0316145b949350505050565b50611c8290600a810190611ca9565b50565b6040805160608101825260008082526020820152908101611ca4611cc2565b905290565b5b80821115611cbe5760008155600101611caa565b5090565b604051806101400160405280600a906020820280368337509192915050565b6001600160e01b031981168114611c8257600080fd5b600060208284031215611d0957600080fd5b813561061181611ce1565b60005b83811015611d2f578181015183820152602001611d17565b50506000910152565b60008151808452611d50816020860160208601611d14565b601f01601f19169290920160200192915050565b6020815260006106116020830184611d38565b600060208284031215611d8957600080fd5b5035919050565b80356001600160a01b0381168114611da757600080fd5b919050565b60008060408385031215611dbf57600080fd5b611dc883611d90565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611e0757611e07611dd6565b604051601f8501601f19908116603f01168101908282118183101715611e2f57611e2f611dd6565b81604052809350858152868686011115611e4857600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112611e7357600080fd5b61061183833560208501611dec565b803560048110611da757600080fd5b600080600060608486031215611ea657600080fd5b611eaf84611d90565b9250602084013567ffffffffffffffff811115611ecb57600080fd5b611ed786828701611e62565b925050611ee660408501611e82565b90509250925092565b600080600060608486031215611f0457600080fd5b611f0d84611d90565b9250611f1b60208501611d90565b9150604084013590509250925092565b634e487b7160e01b600052602160045260246000fd5b60048110611f5f57634e487b7160e01b600052602160045260246000fd5b9052565b600061018082019050611f77828451611f41565b60208084015115158184015260408401516040840160005b600a811015611fac57825182529183019190830190600101611f8f565b5050505092915050565b60008060408385031215611fc957600080fd5b82359150611fd960208401611e82565b90509250929050565b8015158114611c8257600080fd5b6000806040838503121561200357600080fd5b82359150602083013561201581611fe2565b809150509250929050565b60006020828403121561203257600080fd5b61061182611d90565b6000806040838503121561204e57600080fd5b82359150611fd960208401611d90565b6000806040838503121561207157600080fd5b61207a83611d90565b9150602083013561201581611fe2565b600080600080608085870312156120a057600080fd5b6120a985611d90565b93506120b760208601611d90565b925060408501359150606085013567ffffffffffffffff8111156120da57600080fd5b8501601f810187136120eb57600080fd5b6120fa87823560208401611dec565b91505092959194509250565b6000806040838503121561211957600080fd5b61212283611d90565b9150611fd960208401611d90565b6000806040838503121561214357600080fd5b82359150602083013567ffffffffffffffff81111561216157600080fd5b61216d85828601611e62565b9150509250929050565b600181811c9082168061218b57607f821691505b60208210810361089d57634e487b7160e01b600052602260045260246000fd5b6000602082840312156121bd57600080fd5b5051919050565b6000602082840312156121d657600080fd5b815161061181611fe2565b60208082526032908201527f5b4163636573734d616e6167656d656e745d204f6e6c79207468652076616c6960408201527119185d1bdc8818d85b881a5b9d195c9858dd60721b606082015260800190565b60006101e08683526020865461224e82860160ff8316611f41565b60081c60ff161515604085015260016060850188820160005b600a811015612283578154835291840191908301908301612267565b505050506001600160a01b0386166101a0850152506101c083018190526122ac81840185611d38565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561037f5761037f6122b7565b7f5b446565644e46545d204d757374206265206f776e6572206f6620746865204481526b032b2b2103bb4ba341034b2160a51b60208201526000825161232d81602c850160208701611d14565b91909101602c0192915050565b8181038181111561037f5761037f6122b7565b7f5b446565644e46545d204465656420646f6573206e6f7420657869737420776981526503a341034b2160d51b602082015260008251612394816026850160208701611d14565b9190910160260192915050565b828152604081016106116020830184611f41565b828152604060208201526000611c6b6040830184611d38565b601f8211156106be57600081815260208120601f850160051c810160208610156123f55750805b601f850160051c820191505b81811015610edc57828155600101612401565b815167ffffffffffffffff81111561242e5761242e611dd6565b6124428161243c8454612177565b846123ce565b602080601f831160018114612477576000841561245f5750858301515b600019600386901b1c1916600185901b178555610edc565b600085815260208120601f198616915b828110156124a657888601518255948401946001909101908401612487565b50858210156124c45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061250790830184611d38565b9695505050505050565b60006020828403121561252357600080fd5b815161061181611ce1565b60008351612540818460208801611d14565b835190830190612554818360208801611d14565b0194935050505056fe80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300a2646970667358221220dc085898497b0beea40d818f00f4ef8fd971d80799991a09d31083779a43ddea64736f6c63430008140033",
      "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xB82C3569 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xC4D66DE8 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xC4D66DE8 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xF1BC6673 EQ PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB82C3569 EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0xB99C23E3 EQ PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0x89B9E75F EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x985E3A64 EQ PUSH2 0x2DE JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x62D402BC EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x26F JUMPI DUP1 PUSH4 0x682ECE02 EQ PUSH2 0x282 JUMPI DUP1 PUSH4 0x6F6C15DD EQ PUSH2 0x295 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x1A6C41E2 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x216 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18B PUSH2 0x186 CALLDATASIZE PUSH1 0x4 PUSH2 0x1CF7 JUMP JUMPDEST PUSH2 0x374 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH2 0x385 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x1EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1DAC JUMP JUMPDEST PUSH2 0x43E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x208 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E91 JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x197 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EEF JUMP JUMPDEST PUSH2 0x618 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EEF JUMP JUMPDEST PUSH2 0x6A3 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0x6C3 JUMP JUMPDEST PUSH2 0x262 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0x7A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x197 SWAP2 SWAP1 PUSH2 0x1F63 JUMP JUMPDEST PUSH2 0x1C8 PUSH2 0x27D CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0x8A3 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FB6 JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1FF0 JUMP JUMPDEST PUSH2 0x9ED JUMP JUMPDEST PUSH2 0x208 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2020 JUMP JUMPDEST PUSH2 0xB70 JUMP JUMPDEST PUSH2 0x18B PUSH2 0xBCC JUMP JUMPDEST PUSH2 0x18B PUSH2 0x2D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x203B JUMP JUMPDEST PUSH2 0xC4D JUMP JUMPDEST PUSH2 0x1A8 PUSH2 0xCC3 JUMP JUMPDEST PUSH2 0x208 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x2F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x205E JUMP JUMPDEST PUSH2 0xD02 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0xD0D JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x208A JUMP JUMPDEST PUSH2 0xD53 JUMP JUMPDEST PUSH2 0x18B PUSH2 0xD6A JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x336 CALLDATASIZE PUSH1 0x4 PUSH2 0x2020 JUMP JUMPDEST PUSH2 0xD82 JUMP JUMPDEST PUSH2 0x1A8 PUSH2 0x349 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D77 JUMP JUMPDEST PUSH2 0xEE4 JUMP JUMPDEST PUSH2 0x18B PUSH2 0x35C CALLDATASIZE PUSH1 0x4 PUSH2 0x2106 JUMP JUMPDEST PUSH2 0xEEF JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x36F CALLDATASIZE PUSH1 0x4 PUSH2 0x2130 JUMP JUMPDEST PUSH2 0xF3C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F DUP3 PUSH2 0x1053 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x60 SWAP2 SWAP1 DUP2 SWAP1 PUSH2 0x3A5 SWAP1 PUSH2 0x2177 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D1 SWAP1 PUSH2 0x2177 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x41E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3F3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x41E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x401 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x434 DUP3 PUSH2 0x1078 JUMP JUMPDEST POP PUSH2 0x37F DUP3 PUSH2 0x10B0 JUMP JUMPDEST PUSH2 0x449 DUP3 DUP3 CALLER PUSH2 0x10EA JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x624DD75F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x91D14854 SWAP2 DUP4 SWAP2 PUSH4 0xC49BAEBE SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4C4 SWAP2 SWAP1 PUSH2 0x21AB JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x533 SWAP2 SWAP1 PUSH2 0x21C4 JUMP JUMPDEST PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP1 PUSH2 0x21E1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x564 DUP5 PUSH1 0x1 SLOAD PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 DUP5 SWAP2 DUP4 SWAP2 PUSH1 0xFF NOT SWAP1 SWAP2 AND SWAP1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x597 JUMPI PUSH2 0x597 PUSH2 0x1F2B JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x5A8 PUSH1 0x1 SLOAD DUP6 PUSH2 0x115C JUMP JUMPDEST DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR DUP2 SSTORE PUSH1 0x1 SLOAD PUSH32 0xB34E01CCBB7625DB030CD3A3A1D6CDAEE286062D973316CBE55A56D261A754A1 SWAP1 DUP3 PUSH2 0x5E2 CALLER SWAP1 JUMP JUMPDEST DUP8 PUSH1 0x40 MLOAD PUSH2 0x5F3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2233 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 0x1 DUP1 SLOAD PUSH2 0x608 SWAP2 PUSH2 0x22CD JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x642 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x64F DUP4 DUP4 CALLER PUSH2 0x11D0 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x69D JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x54F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x6BE DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD53 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x6CD DUP2 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6EA DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6FA SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x727 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP PUSH2 0x731 DUP3 PUSH2 0x13A7 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x743 SWAP2 SWAP1 PUSH2 0x233A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xFFFF NOT AND DUP2 SSTORE SWAP1 PUSH2 0x76D PUSH1 0x1 DUP4 ADD DUP3 PUSH2 0x1C73 JUMP JUMPDEST POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH32 0x61C6643F6E835939AE6DA3352C52E1B29A86E4EE6599AB73C5D9A416F75D6ED0 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x7AE PUSH2 0x1C85 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH2 0x7BA DUP3 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x7CE DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7DE SWAP2 SWAP1 PUSH2 0x234D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP3 MSTORE DUP1 SLOAD DUP3 SWAP1 PUSH1 0xFF AND PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x83D JUMPI PUSH2 0x83D PUSH2 0x1F2B JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x84E JUMPI PUSH2 0x84E PUSH2 0x1F2B JUMP JUMPDEST DUP2 MSTORE DUP2 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH2 0x140 DUP2 ADD DUP1 DUP4 MSTORE SWAP2 SWAP1 SWAP3 ADD SWAP2 SWAP1 PUSH1 0x1 DUP5 ADD SWAP1 PUSH1 0xA SWAP1 DUP3 DUP5 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x87E JUMPI POP POP POP POP POP DUP2 MSTORE POP POP SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37F DUP3 PUSH2 0x1078 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH2 0x8BA DUP3 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8CE DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8DE SWAP2 SWAP1 PUSH2 0x234D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x90B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP DUP3 PUSH2 0x916 DUP2 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x933 DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x943 SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP5 SWAP1 DUP3 SWAP1 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x99D JUMPI PUSH2 0x99D PUSH2 0x1F2B JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x9AD DUP6 PUSH1 0x0 PUSH2 0x13E2 JUMP JUMPDEST PUSH32 0xED549F5E55CA444D100349BE44584B8AD027EDED8936B4B6248776DDCB93D1A DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x9DE SWAP3 SWAP2 SWAP1 PUSH2 0x23A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x624DD75F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x91D14854 SWAP2 DUP4 SWAP2 PUSH4 0xC49BAEBE SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA3F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA63 SWAP2 SWAP1 PUSH2 0x21AB JUMP JUMPDEST CALLER PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xAAE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAD2 SWAP2 SWAP1 PUSH2 0x21C4 JUMP JUMPDEST PUSH2 0xAEE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP1 PUSH2 0x21E1 JUMP JUMPDEST CALLER PUSH2 0xAF8 DUP4 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xB66 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5B446565644E46545D204F776E65722063616E6E6F742076616C696461746520 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x1D1A195A5C881BDDDB88185CDCD95D PUSH1 0x8A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x54F JUMP JUMPDEST PUSH2 0x449 DUP3 DUP3 PUSH2 0x13E2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xBAB JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 SWAP1 SWAP3 ADD PUSH1 0x20 MSTORE POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x940E1570 CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC48 SWAP2 SWAP1 PUSH2 0x21C4 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x24745215 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x91D14854 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC9F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x611 SWAP2 SWAP1 PUSH2 0x21C4 JUMP JUMPDEST PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079301 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x3A5 SWAP1 PUSH2 0x2177 JUMP JUMPDEST PUSH2 0x449 CALLER DUP4 DUP4 PUSH2 0x143C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xD19 DUP4 PUSH2 0x7A6 JUMP JUMPDEST MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD30 JUMPI PUSH2 0xD30 PUSH2 0x1F2B JUMP JUMPDEST EQ DUP1 PUSH2 0x611 JUMPI POP PUSH1 0x2 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD4B JUMPI PUSH2 0xD4B PUSH2 0x1F2B JUMP JUMPDEST EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xD5E DUP5 DUP5 DUP5 PUSH2 0x618 JUMP JUMPDEST PUSH2 0x69D DUP5 DUP5 DUP5 DUP5 PUSH2 0x14ED JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC395FCB3 CALLER PUSH2 0xBE0 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0xDC8 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xDE5 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xDF3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0xE11 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0xE3B JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0xE43 PUSH2 0x1616 JUMP JUMPDEST PUSH2 0xE88 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x11195959139195 PUSH1 0xCA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x11115151 PUSH1 0xE2 SHL DUP2 MSTORE POP PUSH2 0x1620 JUMP JUMPDEST PUSH2 0xE91 DUP7 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE DUP4 ISZERO PUSH2 0xEDC JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x37F DUP3 PUSH2 0x1748 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079305 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x0 PUSH2 0xF48 DUP3 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xF5C DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF6C SWAP2 SWAP1 PUSH2 0x234D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0xF99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP DUP3 PUSH2 0xFA4 DUP2 PUSH2 0x12DA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xFC1 DUP3 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xFD1 SWAP2 SWAP1 PUSH2 0x22E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH2 0xFFE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x54F SWAP2 SWAP1 PUSH2 0x1D64 JUMP JUMPDEST POP PUSH2 0x1009 DUP5 DUP5 PUSH2 0x115C JUMP JUMPDEST PUSH2 0x1014 DUP5 PUSH1 0x0 PUSH2 0x13E2 JUMP JUMPDEST PUSH32 0xF0466CB4B529FE609C0A35FB0C8BB9A36FFB6C775A7FE7F83DEC314F36BC5C91 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x1045 SWAP3 SWAP2 SWAP1 PUSH2 0x23B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x24832483 PUSH1 0xE1 SHL EQ DUP1 PUSH2 0x37F JUMPI POP PUSH2 0x37F DUP3 PUSH2 0x187D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1084 DUP4 PUSH2 0x12DA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x37F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079304 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x6BE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1121 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x112F DUP4 DUP4 PUSH1 0x0 PUSH2 0x11D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x6BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x39E35637 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH32 0x542A41881EE128A365A727B282C86FA859579490B9BB45AAB8503648C8E7900 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH2 0x1196 DUP4 DUP3 PUSH2 0x2414 JUMP JUMPDEST POP PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 PUSH2 0x11EB DUP6 PUSH2 0x12DA JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1207 JUMPI PUSH2 0x1207 DUP2 DUP6 DUP8 PUSH2 0x19E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x1247 JUMPI PUSH2 0x1224 PUSH1 0x0 DUP7 PUSH1 0x0 DUP1 PUSH2 0x18CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x1278 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP9 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x80BB2B638CC20BC4D0A60D66940F3AB4A00C1D7B313497CA82FB0B4AB0079302 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1321 DUP4 PUSH2 0x1A47 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1341 JUMPI PUSH2 0x1341 PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x136B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1375 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B6 PUSH1 0x0 DUP4 PUSH1 0x0 PUSH2 0x11D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x449 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 DUP6 ISZERO ISZERO SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 OR DUP3 SSTORE DUP4 MLOAD DUP7 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 PUSH32 0x6BED93006E6710FB84E37D9194EFF400299D02BA0557551CC2245C1F1D8183CE SWAP2 ADD PUSH2 0x11C3 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x147D JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP8 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x69D JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x152F SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x24D4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x156A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1567 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2511 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15D3 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1598 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x159D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x15CB JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0x160F JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x161E PUSH2 0x1B1F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1628 PUSH2 0x1B1F JUMP JUMPDEST PUSH2 0x449 DUP3 DUP3 PUSH2 0x1B68 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x1678 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x1695 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x16A3 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x16C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x16EB JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND OR SWAP1 SSTORE DUP4 ISZERO PUSH2 0xEDC JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH2 0xED3 JUMP JUMPDEST PUSH1 0x60 PUSH32 0x542A41881EE128A365A727B282C86FA859579490B9BB45AAB8503648C8E7900 PUSH2 0x1774 DUP4 PUSH2 0x1078 JUMP JUMPDEST POP PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x178E SWAP1 PUSH2 0x2177 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x17BA SWAP1 PUSH2 0x2177 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1807 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x17DC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1807 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x17EA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1825 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1838 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x186B JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1852 SWAP3 SWAP2 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1874 DUP6 PUSH2 0x1B99 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x18AE JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x37F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x37F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 PUSH2 0x18F0 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x19B2 JUMPI PUSH1 0x0 PUSH2 0x1900 DUP6 PUSH2 0x1078 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x192C JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x193F JUMPI POP PUSH2 0x193D DUP2 DUP6 PUSH2 0xEEF JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1968 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST DUP3 ISZERO PUSH2 0x19B0 JUMPI DUP5 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST PUSH1 0x0 SWAP4 DUP5 MSTORE PUSH1 0x4 ADD PUSH1 0x20 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x19EE DUP4 DUP4 DUP4 PUSH2 0x1C0D JUMP JUMPDEST PUSH2 0x6BE JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1A1C JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x54F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1A86 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1AB2 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1AD0 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1AE8 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1AFC JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x1B0E JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x37F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x161E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1B70 PUSH2 0x1B1F JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x255E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 PUSH2 0x1B8A DUP5 DUP3 PUSH2 0x2414 JUMP JUMPDEST POP PUSH1 0x1 DUP2 ADD PUSH2 0x69D DUP4 DUP3 PUSH2 0x2414 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1BA4 DUP3 PUSH2 0x1078 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1BBC PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1BDC JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x611 JUMP JUMPDEST DUP1 PUSH2 0x1BE6 DUP5 PUSH2 0x1314 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1BF7 SWAP3 SWAP2 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0x1C6B JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x1C47 JUMPI POP PUSH2 0x1C47 DUP5 DUP5 PUSH2 0xEEF JUMP JUMPDEST DUP1 PUSH2 0x1C6B JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1C60 DUP4 PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP PUSH2 0x1C82 SWAP1 PUSH1 0xA DUP2 ADD SWAP1 PUSH2 0x1CA9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD PUSH2 0x1CA4 PUSH2 0x1CC2 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x1CBE JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1CAA JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x140 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1C82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x611 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D2F JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1D17 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1D50 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1D14 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x611 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D38 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1DA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC8 DUP4 PUSH2 0x1D90 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x1E07 JUMPI PUSH2 0x1E07 PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1E2F JUMPI PUSH2 0x1E2F PUSH2 0x1DD6 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x1E48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E73 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x611 DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x1DEC JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x1DA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1EA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EAF DUP5 PUSH2 0x1D90 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ED7 DUP7 DUP3 DUP8 ADD PUSH2 0x1E62 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1EE6 PUSH1 0x40 DUP6 ADD PUSH2 0x1E82 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F0D DUP5 PUSH2 0x1D90 JUMP JUMPDEST SWAP3 POP PUSH2 0x1F1B PUSH1 0x20 DUP6 ADD PUSH2 0x1D90 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x1F5F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP3 ADD SWAP1 POP PUSH2 0x1F77 DUP3 DUP5 MLOAD PUSH2 0x1F41 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP5 ADD MLOAD ISZERO ISZERO DUP2 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x40 DUP5 ADD PUSH1 0x0 JUMPDEST PUSH1 0xA DUP2 LT ISZERO PUSH2 0x1FAC JUMPI DUP3 MLOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1F8F JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1FC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1FD9 PUSH1 0x20 DUP5 ADD PUSH2 0x1E82 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2003 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2015 DUP2 PUSH2 0x1FE2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2032 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x611 DUP3 PUSH2 0x1D90 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x204E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1FD9 PUSH1 0x20 DUP5 ADD PUSH2 0x1D90 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2071 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x207A DUP4 PUSH2 0x1D90 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x2015 DUP2 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x20A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20A9 DUP6 PUSH2 0x1D90 JUMP JUMPDEST SWAP4 POP PUSH2 0x20B7 PUSH1 0x20 DUP7 ADD PUSH2 0x1D90 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x20EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20FA DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x1DEC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2122 DUP4 PUSH2 0x1D90 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FD9 PUSH1 0x20 DUP5 ADD PUSH2 0x1D90 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x216D DUP6 DUP3 DUP7 ADD PUSH2 0x1E62 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x218B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x89D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x611 DUP2 PUSH2 0x1FE2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x5B4163636573734D616E6167656D656E745D204F6E6C79207468652076616C69 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x19185D1BDC8818D85B881A5B9D195C9858DD PUSH1 0x72 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E0 DUP7 DUP4 MSTORE PUSH1 0x20 DUP7 SLOAD PUSH2 0x224E DUP3 DUP7 ADD PUSH1 0xFF DUP4 AND PUSH2 0x1F41 JUMP JUMPDEST PUSH1 0x8 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x60 DUP6 ADD DUP9 DUP3 ADD PUSH1 0x0 JUMPDEST PUSH1 0xA DUP2 LT ISZERO PUSH2 0x2283 JUMPI DUP2 SLOAD DUP4 MSTORE SWAP2 DUP5 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x2267 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x1A0 DUP6 ADD MSTORE POP PUSH2 0x1C0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x22AC DUP2 DUP5 ADD DUP6 PUSH2 0x1D38 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x37F JUMPI PUSH2 0x37F PUSH2 0x22B7 JUMP JUMPDEST PUSH32 0x5B446565644E46545D204D757374206265206F776E6572206F66207468652044 DUP2 MSTORE PUSH12 0x32B2B2103BB4BA341034B21 PUSH1 0xA5 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x232D DUP2 PUSH1 0x2C DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1D14 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x2C ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x37F JUMPI PUSH2 0x37F PUSH2 0x22B7 JUMP JUMPDEST PUSH32 0x5B446565644E46545D204465656420646F6573206E6F74206578697374207769 DUP2 MSTORE PUSH6 0x3A341034B21 PUSH1 0xD5 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD PUSH2 0x2394 DUP2 PUSH1 0x26 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1D14 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD PUSH1 0x26 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 DUP2 ADD PUSH2 0x611 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1F41 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1C6B PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1D38 JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x6BE JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x23F5 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xEDC JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2401 JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x242E JUMPI PUSH2 0x242E PUSH2 0x1DD6 JUMP JUMPDEST PUSH2 0x2442 DUP2 PUSH2 0x243C DUP5 SLOAD PUSH2 0x2177 JUMP JUMPDEST DUP5 PUSH2 0x23CE JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2477 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x245F JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xEDC JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x24A6 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x2487 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x24C4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2507 SWAP1 DUP4 ADD DUP5 PUSH2 0x1D38 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2523 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x611 DUP2 PUSH2 0x1CE1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x2540 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x1D14 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x2554 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x1D14 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP INVALID DUP1 0xBB 0x2B PUSH4 0x8CC20BC4 0xD0 0xA6 0xD PUSH7 0x940F3AB4A00C1D PUSH28 0x313497CA82FB0B4AB0079300A2646970667358221220DC085898497B SIGNEXTEND 0xEE LOG4 0xD DUP2 DUP16 STOP DELEGATECALL 0xEF DUP16 0xD9 PUSH18 0xD80799991A09D31083779A43DDEA64736F6C PUSH4 0x43000814 STOP CALLER ",
      "sourceMap": "359:4356:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4047:219;;;;;;:::i;:::-;;:::i;:::-;;;565:14:23;;558:22;540:41;;528:2;513:18;4047:219:22;;;;;;;;3546:146:2;;;:::i;:::-;;;;;;;:::i;4792:154::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:23;;;1679:51;;1667:2;1652:18;4792:154:2;1533:203:23;4618:113:2;;;;;;:::i;:::-;;:::i;:::-;;2004:552:22;;;;;;:::i;:::-;;:::i;:::-;;;3971:25:23;;;3959:2;3944:18;2004:552:22;3825:177:23;5495:578:2;;;;;;:::i;:::-;;:::i;6139:132::-;;;;;;:::i;:::-;;:::i;2564:192:22:-;;;;;;:::i;:::-;;:::i;3672:142::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3366:118:2:-;;;;;;:::i;:::-;;:::i;3342:322:22:-;;;;;;:::i;:::-;;:::i;2764:242::-;;;;;;:::i;:::-;;:::i;3044:265:2:-;;;;;;:::i;:::-;;:::i;4574:125:21:-;;;:::i;4707:141::-;;;;;;:::i;:::-;;:::i;3756:150:2:-;;;:::i;569:25:22:-;;;;;;5013:144:2;;;;;;:::i;:::-;;:::i;3822:217:22:-;;;;;;:::i;:::-;;:::i;6337:208:2:-;;;;;;:::i;:::-;;:::i;4449:117:21:-;;;:::i;1257:258:22:-;;;;;;:::i;:::-;;:::i;4274:193::-;;;;;;:::i;:::-;;:::i;5223:210:2:-;;;;;;:::i;:::-;;:::i;3014:320:22:-;;;;;;:::i;:::-;;:::i;4047:219::-;4197:4;4221:37;4245:12;4221:23;:37::i;:::-;4214:44;4047:219;-1:-1:-1;;4047:219:22:o;3546:146:2:-;-1:-1:-1;;;;;;;;;;;3671:14:2;;3591:13;;2077:21;;;3671:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3546:146;:::o;4792:154::-;4859:7;4878:22;4892:7;4878:13;:22::i;:::-;;4918:21;4931:7;4918:12;:21::i;4618:113::-;4689:35;4698:2;4702:7;966:10:4;4689:8:2;:35::i;:::-;4618:113;;:::o;2004:552:22:-;2157:7;3251:13:21;;3273:30;;;-1:-1:-1;;;3273:30:21;;;;-1:-1:-1;;;;;3251:13:21;;;;:21;;:13;;3273:28;;:30;;;;;;;;;;;;;;;3251:13;3273:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;966:10:4;3251:67:21;;-1:-1:-1;;;;;;3251:67:21;;;;;;;;;;8982:25:23;;;;-1:-1:-1;;;;;9043:32:23;9023:18;;;9016:60;8955:18;;3251:67:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3229:167;;;;-1:-1:-1;;;3229:167:21;;;;;;;:::i;:::-;;;;;;;;;2177:25:22::1;2183:6;2191:10;;2177:5;:25::i;:::-;2255:10;::::0;;2215:25:::1;2243:23:::0;;;:11:::1;:23;::::0;;;;2277:31;;2243:23;;2298:10;;2243:23;;-1:-1:-1;;2277:31:22;;::::1;::::0;2298:10;2277:31:::1;::::0;::::1;;;;;;:::i;:::-;;;;;;2319:42;2332:10;;2344:16;2319:12;:42::i;:::-;2372:27:::0;;-1:-1:-1;;2372:27:22::1;;;::::0;;2395:4:::1;2429:10:::0;2415:67:::1;::::0;2372:8;2451:12:::1;966:10:4::0;;887:96;2451:12:22::1;2465:16;2415:67;;;;;;;;;:::i;:::-;;;;;;;;2506:10;::::0;;:14:::1;::::0;::::1;:::i;:::-;2493:10;:27:::0;;;;-1:-1:-1;;3407:1:21::1;2004:552:22::0;;;;;:::o;5495:578:2:-;-1:-1:-1;;;;;5589:16:2;;5585:87;;5628:33;;-1:-1:-1;;;5628:33:2;;5658:1;5628:33;;;1679:51:23;1652:18;;5628:33:2;1533:203:23;5585:87:2;5890:21;5914:34;5922:2;5926:7;966:10:4;5914:7:2;:34::i;:::-;5890:58;;5979:4;-1:-1:-1;;;;;5962:21:2;:13;-1:-1:-1;;;;;5962:21:2;;5958:109;;6006:50;;-1:-1:-1;;;6006:50:2;;-1:-1:-1;;;;;11305:15:23;;;6006:50:2;;;11287:34:23;11337:18;;;11330:34;;;11400:15;;11380:18;;;11373:43;11222:18;;6006:50:2;11047:375:23;5958:109:2;5575:498;5495:578;;;:::o;6139:132::-;6225:39;6242:4;6248:2;6252:7;6225:39;;;;;;;;;;;;:16;:39::i;:::-;6139:132;;;:::o;2564:192:22:-;2612:7;1845:17;1854:7;1845:8;:17::i;:::-;-1:-1:-1;;;;;1829:33:22;966:10:4;-1:-1:-1;;;;;1829:33:22;;1939:25;1956:7;1939:16;:25::i;:::-;1877:88;;;;;;;;:::i;:::-;;;;;;;;;;;;;1807:169;;;;;-1:-1:-1;;;1807:169:22;;;;;;;;:::i;:::-;;2632:14:::1;2638:7;2632:5;:14::i;:::-;2671:1;2657:10:::0;::::1;:15;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;2690:20:22::1;::::0;;;:11:::1;:20;::::0;;;;2683:27;;-1:-1:-1;;2683:27:22;;;2690:20;2683:27:::1;::::0;;::::1;2690:20:::0;2683:27:::1;:::i;:::-;-1:-1:-1::0;;2726:22:22::1;::::0;3971:25:23;;;2726:22:22::1;::::0;3959:2:23;3944:18;2726:22:22::1;;;;;;;2564:192:::0;;:::o;3672:142::-;3751:15;;:::i;:::-;3733:7;1622:1;1593:17;3733:7;1593:8;:17::i;:::-;-1:-1:-1;;;;;1593:31:22;;;1695:25;1712:7;1695:16;:25::i;:::-;1639:82;;;;;;;;:::i;:::-;;;;;;;;;;;;;1571:161;;;;;-1:-1:-1;;;1571:161:22;;;;;;;;:::i;:::-;-1:-1:-1;3786:20:22::1;::::0;;;:11:::1;:20;::::0;;;;;;3779:27;;::::1;::::0;::::1;::::0;;;;;;;::::1;;;::::0;::::1;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;::::0;;;;::::1;::::0;::::1;;;;;;::::0;::::1;::::0;;;;;;::::1;::::0;;;;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;;;::::1;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;1743:1;3672:142:::0;;;;:::o;3366:118:2:-;3429:7;3455:22;3469:7;3455:13;:22::i;3342:322:22:-;3421:7;1622:1;1593:17;3421:7;1593:8;:17::i;:::-;-1:-1:-1;;;;;1593:31:22;;;1695:25;1712:7;1695:16;:25::i;:::-;1639:82;;;;;;;;:::i;:::-;;;;;;;;;;;;;1571:161;;;;;-1:-1:-1;;;1571:161:22;;;;;;;;:::i;:::-;;3440:7:::1;1845:17;1854:7;1845:8;:17::i;:::-;-1:-1:-1::0;;;;;1829:33:22::1;966:10:4::0;-1:-1:-1;;;;;1829:33:22::1;;1939:25;1956:7;1939:16;:25::i;:::-;1877:88;;;;;;;;:::i;:::-;;;;;;;;;;;;;1807:169;;;;;-1:-1:-1::0;;;1807:169:22::1;;;;;;;;:::i;:::-;-1:-1:-1::0;3460:25:22::2;3488:20:::0;;;:11:::2;:20;::::0;;;;3519:31;;3540:10;;3488:20;;-1:-1:-1;;3519:31:22::2;::::0;3540:10;3519:31:::2;::::0;::::2;;;;;;:::i;:::-;;;;;;3561:35;3581:7;3590:5;3561:19;:35::i;:::-;3612:44;3636:7;3645:10;3612:44;;;;;;;:::i;:::-;;;;;;;;3449:215;1743:1:::1;3342:322:::0;;;:::o;2764:242::-;3251:13:21;;3273:30;;;-1:-1:-1;;;3273:30:21;;;;-1:-1:-1;;;;;3251:13:21;;;;:21;;:13;;3273:28;;:30;;;;;;;;;;;;;;;3251:13;3273:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;966:10:4;3251:67:21;;-1:-1:-1;;;;;;3251:67:21;;;;;;;;;;8982:25:23;;;;-1:-1:-1;;;;;9043:32:23;9023:18;;;9016:60;8955:18;;3251:67:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3229:167;;;;-1:-1:-1;;;3229:167:21;;;;;;;:::i;:::-;966:10:4;2864:17:22::1;2873:7:::0;2864:8:::1;:17::i;:::-;-1:-1:-1::0;;;;;2864:33:22::1;::::0;2856:93:::1;;;::::0;-1:-1:-1;;;2856:93:22;;13064:2:23;2856:93:22::1;::::0;::::1;13046:21:23::0;13103:2;13083:18;;;13076:30;13142:34;13122:18;;;13115:62;-1:-1:-1;;;13193:18:23;;;13186:45;13248:19;;2856:93:22::1;12862:411:23::0;2856:93:22::1;2960:38;2980:7;2989:8;2960:19;:38::i;3044:265:2:-:0;3107:7;-1:-1:-1;;;;;;;;;;;;;;;;3185:19:2;;3181:87;;3227:30;;-1:-1:-1;;;3227:30:2;;3254:1;3227:30;;;1679:51:23;1652:18;;3227:30:2;1533:203:23;3181:87:2;-1:-1:-1;;;;;3284:18:2;;;;;;;:11;;;;:18;;-1:-1:-1;3284:18:2;;;;;3044:265::o;4574:125:21:-;4623:4;4647:13;;-1:-1:-1;;;;;4647:13:21;:30;966:10:4;4678:12:21;4647:44;;-1:-1:-1;;;;;;4647:44:21;;;;;;;-1:-1:-1;;;;;1697:32:23;;;4647:44:21;;;1679:51:23;1652:18;;4647:44:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4640:51;;4574:125;:::o;4707:141::-;4778:4;4802:13;;:38;;-1:-1:-1;;;4802:38:21;;;;;8982:25:23;;;-1:-1:-1;;;;;9043:32:23;;;9023:18;;;9016:60;4802:13:21;;;;:21;;8955:18:23;;4802:38:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;3756:150:2:-;3890:9;3883:16;;3803:13;;-1:-1:-1;;;;;;;;;;;2077:21:2;3883:16;;;:::i;5013:144::-;5098:52;966:10:4;5131:8:2;5141;5098:18;:52::i;3822:217:22:-;3884:4;3901:19;3923:20;3935:7;3923:11;:20::i;:::-;:30;;-1:-1:-1;3923:30:22;3971:9;:27;;;;;;;;:::i;:::-;;:60;;;-1:-1:-1;4015:16:22;4002:9;:29;;;;;;;;:::i;:::-;;3964:67;3822:217;-1:-1:-1;;;3822:217:22:o;6337:208:2:-;6450:31;6463:4;6469:2;6473:7;6450:12;:31::i;:::-;6491:47;6514:4;6520:2;6524:7;6533:4;6491:22;:47::i;4449:117:21:-;4494:4;4518:13;;-1:-1:-1;;;;;4518:13:21;:26;966:10:4;4545:12:21;887:96:4;1257:258:22;8870:21:1;4302:15;;-1:-1:-1;;;4302:15:1;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:1;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:1;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:1;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:1;-1:-1:-1;;;5013:22:1;;;4979:67;1359:25:22::1;:23;:25::i;:::-;1395:32;;;;;;;;;;;;;;-1:-1:-1::0;;;1395:32:22::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;1395:32:22::1;;::::0;:13:::1;:32::i;:::-;1438:44;1467:14;1438:28;:44::i;:::-;1506:1;1493:14:::0;;5066:101:1;;;;5100:23;;-1:-1:-1;;;;5100:23:1;;;5142:14;;-1:-1:-1;13431:50:23;;5142:14:1;;13419:2:23;13404:18;5142:14:1;;;;;;;;5066:101;4092:1081;;;;;1257:258:22;:::o;4274:193::-;4403:13;4436:23;4451:7;4436:14;:23::i;5223:210:2:-;-1:-1:-1;;;;;5389:27:2;;;5311:4;5389:27;;;:20;:27;;;;;;;;:37;;;;;;;;;;;;;;;5223:210::o;3014:320:22:-;3142:7;1622:1;1593:17;3142:7;1593:8;:17::i;:::-;-1:-1:-1;;;;;1593:31:22;;;1695:25;1712:7;1695:16;:25::i;:::-;1639:82;;;;;;;;:::i;:::-;;;;;;;;;;;;;1571:161;;;;;-1:-1:-1;;;1571:161:22;;;;;;;;:::i;:::-;;3161:7:::1;1845:17;1854:7;1845:8;:17::i;:::-;-1:-1:-1::0;;;;;1829:33:22::1;966:10:4::0;-1:-1:-1;;;;;1829:33:22::1;;1939:25;1956:7;1939:16;:25::i;:::-;1877:88;;;;;;;;:::i;:::-;;;;;;;;;;;;;1807:169;;;;;-1:-1:-1::0;;;1807:169:22::1;;;;;;;;:::i;:::-;;3181:39:::2;3194:7;3203:16;3181:12;:39::i;:::-;3231:35;3251:7;3260:5;3231:19;:35::i;:::-;3282:44;3300:7;3309:16;3282:44;;;;;;;:::i;:::-;;;;;;;;1743:1:::1;3014:320:::0;;;:::o;1843:218:3:-;1956:4;-1:-1:-1;;;;;;1979:35:3;;-1:-1:-1;;;1979:35:3;;:75;;;2018:36;2042:11;2018:23;:36::i;17836:241:2:-;17899:7;17918:13;17934:17;17943:7;17934:8;:17::i;:::-;17918:33;-1:-1:-1;;;;;;17965:19:2;;17961:88;;18007:31;;-1:-1:-1;;;18007:31:2;;;;;3971:25:23;;;3944:18;;18007:31:2;3825:177:23;7347:184:2;7417:7;7498:26;;;:17;:26;;;;;;-1:-1:-1;;;;;7498:26:2;;7347:184::o;16002:120::-;16082:33;16091:2;16095:7;16104:4;16110;16082:8;:33::i;11539:327::-;-1:-1:-1;;;;;11606:16:2;;11602:87;;11645:33;;-1:-1:-1;;;11645:33:2;;11675:1;11645:33;;;1679:51:23;1652:18;;11645:33:2;1533:203:23;11602:87:2;11698:21;11722:32;11730:2;11734:7;11751:1;11722:7;:32::i;:::-;11698:56;-1:-1:-1;;;;;;11768:27:2;;;11764:96;;11818:31;;-1:-1:-1;;;11818:31:2;;11846:1;11818:31;;;1679:51:23;1652:18;;11818:31:2;1533:203:23;2916:244:3;3007:33;3082:21;;;1573:31;3082:21;;;;;;;;:33;3106:9;3082:21;:33;:::i;:::-;-1:-1:-1;3130:23:3;;3971:25:23;;;3130:23:3;;3959:2:23;3944:18;3130:23:3;;;;;;;;2997:163;2916:244;;:::o;10361:856:2:-;10447:7;-1:-1:-1;;;;;;;;;;;10447:7:2;10536:17;10545:7;10536:8;:17::i;:::-;10521:32;-1:-1:-1;;;;;;10613:18:2;;;10609:86;;10647:37;10664:4;10670;10676:7;10647:16;:37::i;:::-;-1:-1:-1;;;;;10739:18:2;;;10735:258;;10855:48;10872:1;10876:7;10893:1;10897:5;10855:8;:48::i;:::-;-1:-1:-1;;;;;10946:17:2;;;;;;:11;;;:17;;;;;:22;;-1:-1:-1;;10946:22:2;;;10735:258;-1:-1:-1;;;;;11007:16:2;;;11003:109;;-1:-1:-1;;;;;11067:15:2;;;;;;:11;;;:15;;;;;:20;;11086:1;11067:20;;;11003:109;11122:18;;;;:9;;;:18;;;;;;:23;;-1:-1:-1;;;;;;11122:23:2;-1:-1:-1;;;;;11122:23:2;;;;;;;;;11161:27;;11122:18;;11161:27;;;;;;;11206:4;10361:856;-1:-1:-1;;;;;10361:856:2:o;7059:172::-;7125:7;7206:18;;;:9;:18;;;;;;-1:-1:-1;;;;;7206:18:2;;7059:172::o;637:698:16:-;693:13;742:14;759:17;770:5;759:10;:17::i;:::-;779:1;759:21;742:38;;794:20;828:6;817:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;817:18:16;-1:-1:-1;794:41:16;-1:-1:-1;955:28:16;;;971:2;955:28;1010:282;-1:-1:-1;;1041:5:16;-1:-1:-1;;;1175:2:16;1164:14;;1159:32;1041:5;1146:46;1236:2;1227:11;;;-1:-1:-1;1256:21:16;1010:282;1256:21;-1:-1:-1;1312:6:16;637:698;-1:-1:-1;;;637:698:16:o;13046:227:2:-;13097:21;13121:40;13137:1;13141:7;13158:1;13121:7;:40::i;:::-;13097:64;-1:-1:-1;;;;;;13175:27:2;;13171:96;;13225:31;;-1:-1:-1;;;13225:31:2;;;;;3971:25:23;;;3944:18;;13225:31:2;3825:177:23;4475:237:22;4556:25;4584:20;;;:11;:20;;;;;;;;;4615:31;;-1:-1:-1;;4615:31:22;;;;;;;;;;;;;;4662:42;;16292:25:23;;;16333:18;;;16326:50;4584:20:22;4662:42;;16265:18:23;4662:42:22;16124:258:23;17232:369:2;-1:-1:-1;;;;;;;;;;;;;;;;17394:22:2;;17390:91;;17439:31;;-1:-1:-1;;;17439:31:2;;-1:-1:-1;;;;;1697:32:23;;17439:31:2;;;1679:51:23;1652:18;;17439:31:2;1533:203:23;17390:91:2;-1:-1:-1;;;;;17490:27:2;;;;;;;:20;;;:27;;;;;;;;:37;;;;;;;;;;;;;:48;;-1:-1:-1;;17490:48:2;;;;;;;;;;17553:41;;540::23;;;17553::2;;513:18:23;17553:41:2;;;;;;;17325:276;17232:369;;;:::o;18616:782::-;-1:-1:-1;;;;;18732:14:2;;;:18;18728:664;;18770:71;;-1:-1:-1;;;18770:71:2;;-1:-1:-1;;;;;18770:36:2;;;;;:71;;966:10:4;;18821:4:2;;18827:7;;18836:4;;18770:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;18770:71:2;;;;;;;;-1:-1:-1;;18770:71:2;;;;;;;;;;;;:::i;:::-;;;18766:616;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19079:6;:13;19096:1;19079:18;19075:293;;19128:25;;-1:-1:-1;;;19128:25:2;;-1:-1:-1;;;;;1697:32:23;;19128:25:2;;;1679:51:23;1652:18;;19128:25:2;1533:203:23;19075:293:2;19320:6;19314:13;19305:6;19301:2;19297:15;19290:38;18766:616;-1:-1:-1;;;;;;18888:51:2;;-1:-1:-1;;;18888:51:2;18884:130;;18970:25;;-1:-1:-1;;;18970:25:2;;-1:-1:-1;;;;;1697:32:23;;18970:25:2;;;1679:51:23;1652:18;;18970:25:2;1533:203:23;18884:130:2;18842:186;18616:782;;;;:::o;1626:68:3:-;6931:20:1;:18;:20::i;:::-;1626:68:3:o;2233:149:2:-;6931:20:1;:18;:20::i;:::-;2336:39:2::1;2360:5;2367:7;2336:23;:39::i;2679:135:21:-:0;8870:21:1;4302:15;;-1:-1:-1;;;4302:15:1;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:1;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:1;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:1;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:1;-1:-1:-1;;;5013:22:1;;;4979:67;2761:13:21::1;:45:::0;;-1:-1:-1;;;;;;2761:45:21::1;-1:-1:-1::0;;;;;2761:45:21;::::1;;::::0;;5066:101:1;;;;5100:23;;-1:-1:-1;;;;5100:23:1;;;5142:14;;-1:-1:-1;13431:50:23;;5142:14:1;;13419:2:23;13404:18;5142:14:1;13278:209:23;2127:670:3;2200:13;1573:31;2300:22;2314:7;2300:13;:22::i;:::-;-1:-1:-1;2333:23:3;2359:21;;;;;;;;;;2333:47;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2390:18;2411:10;4545:9:2;;;;;;;;;-1:-1:-1;4545:9:2;;;4469:92;2411:10:3;2390:31;;2500:4;2494:18;2516:1;2494:23;2490:70;;-1:-1:-1;2540:9:3;2127:670;-1:-1:-1;;;2127:670:3:o;2490:70::-;2659:23;;:27;2655:95;;2723:4;2729:9;2709:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2702:37;;;;;2127:670;;;:::o;2655:95::-;2767:23;2782:7;2767:14;:23::i;:::-;2760:30;2127:670;-1:-1:-1;;;;;2127:670:3:o;2674:311:2:-;2787:4;-1:-1:-1;;;;;;2822:40:2;;-1:-1:-1;;;2822:40:2;;:104;;-1:-1:-1;;;;;;;2878:48:2;;-1:-1:-1;;;2878:48:2;2822:104;:156;;;-1:-1:-1;;;;;;;;;;1133:40:5;;;2942:36:2;1034:146:5;16304:719:2;-1:-1:-1;;;;;;;;;;;16519:9:2;;:31;;-1:-1:-1;;;;;;16532:18:2;;;;16519:31;16515:460;;;16566:13;16582:22;16596:7;16582:13;:22::i;:::-;16566:38;-1:-1:-1;;;;;;16732:18:2;;;;;;:35;;;16763:4;-1:-1:-1;;;;;16754:13:2;:5;-1:-1:-1;;;;;16754:13:2;;;16732:35;:69;;;;;16772:29;16789:5;16796:4;16772:16;:29::i;:::-;16771:30;16732:69;16728:142;;;16828:27;;-1:-1:-1;;;16828:27:2;;-1:-1:-1;;;;;1697:32:23;;16828:27:2;;;1679:51:23;1652:18;;16828:27:2;1533:203:23;16728:142:2;16888:9;16884:81;;;16942:7;16938:2;-1:-1:-1;;;;;16922:28:2;16931:5;-1:-1:-1;;;;;16922:28:2;;;;;;;;;;;16884:81;16552:423;16515:460;16985:26;;;;:17;;:26;;-1:-1:-1;;16985:26:2;;;:31;;-1:-1:-1;;;;;;16985:31:2;-1:-1:-1;;;;;16985:31:2;;;;;;;;;;16304:719::o;8548:368::-;8660:38;8674:5;8681:7;8690;8660:13;:38::i;:::-;8655:255;;-1:-1:-1;;;;;8718:19:2;;8714:186;;8764:31;;-1:-1:-1;;;8764:31:2;;;;;3971:25:23;;;3944:18;;8764:31:2;3825:177:23;8714:186:2;8841:44;;-1:-1:-1;;;8841:44:2;;-1:-1:-1;;;;;17828:32:23;;8841:44:2;;;17810:51:23;17877:18;;;17870:34;;;17783:18;;8841:44:2;17636:274:23;12214:916:19;12267:7;;-1:-1:-1;;;12342:17:19;;12338:103;;-1:-1:-1;;;12379:17:19;;;-1:-1:-1;12424:2:19;12414:12;12338:103;12467:8;12458:5;:17;12454:103;;12504:8;12495:17;;;-1:-1:-1;12540:2:19;12530:12;12454:103;12583:8;12574:5;:17;12570:103;;12620:8;12611:17;;;-1:-1:-1;12656:2:19;12646:12;12570:103;12699:7;12690:5;:16;12686:100;;12735:7;12726:16;;;-1:-1:-1;12770:1:19;12760:11;12686:100;12812:7;12803:5;:16;12799:100;;12848:7;12839:16;;;-1:-1:-1;12883:1:19;12873:11;12799:100;12925:7;12916:5;:16;12912:100;;12961:7;12952:16;;;-1:-1:-1;12996:1:19;12986:11;12912:100;13038:7;13029:5;:16;13025:66;;13075:1;13065:11;13117:6;12214:916;-1:-1:-1;;12214:916:19:o;7084:141:1:-;8870:21;8560:40;-1:-1:-1;;;8560:40:1;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:1;;;;;;;;;;;2388:219:2;6931:20:1;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2077:21:2;2556:15:::1;2566:5:::0;2077:21;2556:15:::1;:::i;:::-;-1:-1:-1::0;2581:9:2::1;::::0;::::1;:19;2593:7:::0;2581:9;:19:::1;:::i;3972:255::-:0;4036:13;4061:22;4075:7;4061:13;:22::i;:::-;;4094:21;4118:10;4545:9;;;;;;;;;-1:-1:-1;4545:9:2;;;4469:92;4118:10;4094:34;;4169:1;4151:7;4145:21;:25;:75;;;;;;;;;;;;;;;;;4187:7;4196:18;:7;:16;:18::i;:::-;4173:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4138:82;3972:255;-1:-1:-1;;;3972:255:2:o;7842:272::-;7945:4;-1:-1:-1;;;;;7980:21:2;;;;;;:127;;;8027:7;-1:-1:-1;;;;;8018:16:2;:5;-1:-1:-1;;;;;8018:16:2;;:52;;;;8038:32;8055:5;8062:7;8038:16;:32::i;:::-;8018:88;;;;8099:7;-1:-1:-1;;;;;8074:32:2;:21;8087:7;8074:12;:21::i;:::-;-1:-1:-1;;;;;8074:32:2;;8018:88;7961:146;7842:272;-1:-1:-1;;;;7842:272:2:o;-1:-1:-1:-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;14:131:23:-;-1:-1:-1;;;;;;88:32:23;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:23;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:23;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:23:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:23;;1348:180;-1:-1:-1;1348:180:23:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:23;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:23:o;2178:127::-;2239:10;2234:3;2230:20;2227:1;2220:31;2270:4;2267:1;2260:15;2294:4;2291:1;2284:15;2310:632;2375:5;2405:18;2446:2;2438:6;2435:14;2432:40;;;2452:18;;:::i;:::-;2527:2;2521:9;2495:2;2581:15;;-1:-1:-1;;2577:24:23;;;2603:2;2573:33;2569:42;2557:55;;;2627:18;;;2647:22;;;2624:46;2621:72;;;2673:18;;:::i;:::-;2713:10;2709:2;2702:22;2742:6;2733:15;;2772:6;2764;2757:22;2812:3;2803:6;2798:3;2794:16;2791:25;2788:45;;;2829:1;2826;2819:12;2788:45;2879:6;2874:3;2867:4;2859:6;2855:17;2842:44;2934:1;2927:4;2918:6;2910;2906:19;2902:30;2895:41;;;;2310:632;;;;;:::o;2947:222::-;2990:5;3043:3;3036:4;3028:6;3024:17;3020:27;3010:55;;3061:1;3058;3051:12;3010:55;3083:80;3159:3;3150:6;3137:20;3130:4;3122:6;3118:17;3083:80;:::i;3174:150::-;3249:20;;3298:1;3288:12;;3278:40;;3314:1;3311;3304:12;3329:491;3430:6;3438;3446;3499:2;3487:9;3478:7;3474:23;3470:32;3467:52;;;3515:1;3512;3505:12;3467:52;3538:29;3557:9;3538:29;:::i;:::-;3528:39;;3618:2;3607:9;3603:18;3590:32;3645:18;3637:6;3634:30;3631:50;;;3677:1;3674;3667:12;3631:50;3700;3742:7;3733:6;3722:9;3718:22;3700:50;:::i;:::-;3690:60;;;3769:45;3810:2;3799:9;3795:18;3769:45;:::i;:::-;3759:55;;3329:491;;;;;:::o;4007:328::-;4084:6;4092;4100;4153:2;4141:9;4132:7;4128:23;4124:32;4121:52;;;4169:1;4166;4159:12;4121:52;4192:29;4211:9;4192:29;:::i;:::-;4182:39;;4240:38;4274:2;4263:9;4259:18;4240:38;:::i;:::-;4230:48;;4325:2;4314:9;4310:18;4297:32;4287:42;;4007:328;;;;;:::o;4340:127::-;4401:10;4396:3;4392:20;4389:1;4382:31;4432:4;4429:1;4422:15;4456:4;4453:1;4446:15;4472:237;4553:1;4546:5;4543:12;4533:143;;4598:10;4593:3;4589:20;4586:1;4579:31;4633:4;4630:1;4623:15;4661:4;4658:1;4651:15;4533:143;4685:18;;4472:237::o;4714:696::-;4858:4;4900:3;4889:9;4885:19;4877:27;;4913:51;4954:9;4945:6;4939:13;4913:51;:::i;:::-;4983:4;5055:2;5047:6;5043:15;5037:22;5030:30;5023:38;5018:2;5007:9;5003:18;4996:66;5109:4;5101:6;5097:17;5091:24;5150:4;5139:9;5135:20;5227:1;5237:167;5251:4;5248:1;5245:11;5237:167;;;5310:13;;5298:26;;5379:15;;;;5344:12;;;;5271:1;5264:9;5237:167;;;5241:3;;;;4714:696;;;;:::o;5415:275::-;5497:6;5505;5558:2;5546:9;5537:7;5533:23;5529:32;5526:52;;;5574:1;5571;5564:12;5526:52;5610:9;5597:23;5587:33;;5639:45;5680:2;5669:9;5665:18;5639:45;:::i;:::-;5629:55;;5415:275;;;;;:::o;5695:118::-;5781:5;5774:13;5767:21;5760:5;5757:32;5747:60;;5803:1;5800;5793:12;5818:309;5883:6;5891;5944:2;5932:9;5923:7;5919:23;5915:32;5912:52;;;5960:1;5957;5950:12;5912:52;5996:9;5983:23;5973:33;;6056:2;6045:9;6041:18;6028:32;6069:28;6091:5;6069:28;:::i;:::-;6116:5;6106:15;;;5818:309;;;;;:::o;6132:186::-;6191:6;6244:2;6232:9;6223:7;6219:23;6215:32;6212:52;;;6260:1;6257;6250:12;6212:52;6283:29;6302:9;6283:29;:::i;6323:254::-;6391:6;6399;6452:2;6440:9;6431:7;6427:23;6423:32;6420:52;;;6468:1;6465;6458:12;6420:52;6504:9;6491:23;6481:33;;6533:38;6567:2;6556:9;6552:18;6533:38;:::i;6582:315::-;6647:6;6655;6708:2;6696:9;6687:7;6683:23;6679:32;6676:52;;;6724:1;6721;6714:12;6676:52;6747:29;6766:9;6747:29;:::i;:::-;6737:39;;6826:2;6815:9;6811:18;6798:32;6839:28;6861:5;6839:28;:::i;6902:667::-;6997:6;7005;7013;7021;7074:3;7062:9;7053:7;7049:23;7045:33;7042:53;;;7091:1;7088;7081:12;7042:53;7114:29;7133:9;7114:29;:::i;:::-;7104:39;;7162:38;7196:2;7185:9;7181:18;7162:38;:::i;:::-;7152:48;;7247:2;7236:9;7232:18;7219:32;7209:42;;7302:2;7291:9;7287:18;7274:32;7329:18;7321:6;7318:30;7315:50;;;7361:1;7358;7351:12;7315:50;7384:22;;7437:4;7429:13;;7425:27;-1:-1:-1;7415:55:23;;7466:1;7463;7456:12;7415:55;7489:74;7555:7;7550:2;7537:16;7532:2;7528;7524:11;7489:74;:::i;:::-;7479:84;;;6902:667;;;;;;;:::o;7574:260::-;7642:6;7650;7703:2;7691:9;7682:7;7678:23;7674:32;7671:52;;;7719:1;7716;7709:12;7671:52;7742:29;7761:9;7742:29;:::i;:::-;7732:39;;7790:38;7824:2;7813:9;7809:18;7790:38;:::i;7839:390::-;7917:6;7925;7978:2;7966:9;7957:7;7953:23;7949:32;7946:52;;;7994:1;7991;7984:12;7946:52;8030:9;8017:23;8007:33;;8091:2;8080:9;8076:18;8063:32;8118:18;8110:6;8107:30;8104:50;;;8150:1;8147;8140:12;8104:50;8173;8215:7;8206:6;8195:9;8191:22;8173:50;:::i;:::-;8163:60;;;7839:390;;;;;:::o;8234:380::-;8313:1;8309:12;;;;8356;;;8377:61;;8431:4;8423:6;8419:17;8409:27;;8377:61;8484:2;8476:6;8473:14;8453:18;8450:38;8447:161;;8530:10;8525:3;8521:20;8518:1;8511:31;8565:4;8562:1;8555:15;8593:4;8590:1;8583:15;8619:184;8689:6;8742:2;8730:9;8721:7;8717:23;8713:32;8710:52;;;8758:1;8755;8748:12;8710:52;-1:-1:-1;8781:16:23;;8619:184;-1:-1:-1;8619:184:23:o;9087:245::-;9154:6;9207:2;9195:9;9186:7;9182:23;9178:32;9175:52;;;9223:1;9220;9213:12;9175:52;9255:9;9249:16;9274:28;9296:5;9274:28;:::i;9337:414::-;9539:2;9521:21;;;9578:2;9558:18;;;9551:30;9617:34;9612:2;9597:18;;9590:62;-1:-1:-1;;;9683:2:23;9668:18;;9661:48;9741:3;9726:19;;9337:414::o;9756:1024::-;10005:4;10034:3;10064:6;10053:9;10046:25;10090:2;10124:6;10118:13;10140:67;10203:2;10192:9;10188:18;10181:4;10170:9;10166:20;10140:67;:::i;:::-;10265:1;10261:17;10280:4;10257:28;10250:36;10243:44;10238:2;10223:18;;10216:72;10307:4;10346:2;10331:18;;10391:15;;;10424:1;10434:168;10448:4;10445:1;10442:11;10434:168;;;10508:13;;10496:26;;10542:12;;;;10577:15;;;;10461:10;;10434:168;;;-1:-1:-1;;;;;;;;;10639:32:23;;10633:3;10618:19;;10611:61;-1:-1:-1;10703:3:23;10688:19;;10681:31;;;10729:45;10755:18;;;10747:6;10729:45;:::i;:::-;10721:53;9756:1024;-1:-1:-1;;;;;;;9756:1024:23:o;10785:127::-;10846:10;10841:3;10837:20;10834:1;10827:31;10877:4;10874:1;10867:15;10901:4;10898:1;10891:15;10917:125;10982:9;;;11003:10;;;11000:36;;;11016:18;;:::i;11427:507::-;11689:34;11684:3;11677:47;-1:-1:-1;;;11749:2:23;11744:3;11740:12;11733:36;11659:3;11798:6;11792:13;11814:73;11880:6;11875:2;11870:3;11866:12;11861:2;11853:6;11849:15;11814:73;:::i;:::-;11907:16;;;;11925:2;11903:25;;11427:507;-1:-1:-1;;11427:507:23:o;11939:128::-;12006:9;;;12027:11;;;12024:37;;;12041:18;;:::i;12072:501::-;12334:34;12329:3;12322:47;-1:-1:-1;;;12394:2:23;12389:3;12385:12;12378:30;12304:3;12437:6;12431:13;12453:73;12519:6;12514:2;12509:3;12505:12;12500:2;12492:6;12488:15;12453:73;:::i;:::-;12546:16;;;;12564:2;12542:25;;12072:501;-1:-1:-1;;12072:501:23:o;12578:279::-;12764:25;;;12752:2;12737:18;;12798:53;12847:2;12832:18;;12824:6;12798:53;:::i;13492:291::-;13669:6;13658:9;13651:25;13712:2;13707;13696:9;13692:18;13685:30;13632:4;13732:45;13773:2;13762:9;13758:18;13750:6;13732:45;:::i;13914:545::-;14016:2;14011:3;14008:11;14005:448;;;14052:1;14077:5;14073:2;14066:17;14122:4;14118:2;14108:19;14192:2;14180:10;14176:19;14173:1;14169:27;14163:4;14159:38;14228:4;14216:10;14213:20;14210:47;;;-1:-1:-1;14251:4:23;14210:47;14306:2;14301:3;14297:12;14294:1;14290:20;14284:4;14280:31;14270:41;;14361:82;14379:2;14372:5;14369:13;14361:82;;;14424:17;;;14405:1;14394:13;14361:82;;14635:1352;14761:3;14755:10;14788:18;14780:6;14777:30;14774:56;;;14810:18;;:::i;:::-;14839:97;14929:6;14889:38;14921:4;14915:11;14889:38;:::i;:::-;14883:4;14839:97;:::i;:::-;14991:4;;15055:2;15044:14;;15072:1;15067:663;;;;15774:1;15791:6;15788:89;;;-1:-1:-1;15843:19:23;;;15837:26;15788:89;-1:-1:-1;;14592:1:23;14588:11;;;14584:24;14580:29;14570:40;14616:1;14612:11;;;14567:57;15890:81;;15037:944;;15067:663;13861:1;13854:14;;;13898:4;13885:18;;-1:-1:-1;;15103:20:23;;;15221:236;15235:7;15232:1;15229:14;15221:236;;;15324:19;;;15318:26;15303:42;;15416:27;;;;15384:1;15372:14;;;;15251:19;;15221:236;;;15225:3;15485:6;15476:7;15473:19;15470:201;;;15546:19;;;15540:26;-1:-1:-1;;15629:1:23;15625:14;;;15641:3;15621:24;15617:37;15613:42;15598:58;15583:74;;15470:201;-1:-1:-1;;;;;15717:1:23;15701:14;;;15697:22;15684:36;;-1:-1:-1;14635:1352:23:o;16387:489::-;-1:-1:-1;;;;;16656:15:23;;;16638:34;;16708:15;;16703:2;16688:18;;16681:43;16755:2;16740:18;;16733:34;;;16803:3;16798:2;16783:18;;16776:31;;;16581:4;;16824:46;;16850:19;;16842:6;16824:46;:::i;:::-;16816:54;16387:489;-1:-1:-1;;;;;;16387:489:23:o;16881:249::-;16950:6;17003:2;16991:9;16982:7;16978:23;16974:32;16971:52;;;17019:1;17016;17009:12;16971:52;17051:9;17045:16;17070:30;17094:5;17070:30;:::i;17135:496::-;17314:3;17352:6;17346:13;17368:66;17427:6;17422:3;17415:4;17407:6;17403:17;17368:66;:::i;:::-;17497:13;;17456:16;;;;17519:70;17497:13;17456:16;17566:4;17554:17;;17519:70;:::i;:::-;17605:20;;17135:496;-1:-1:-1;;;;17135:496:23:o"
    },
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "1930200",
        "executionCost": "infinite",
        "totalCost": "infinite"
      },
      "external": {
        "approve(address,uint256)": "infinite",
        "balanceOf(address)": "infinite",
        "burn(uint256)": "infinite",
        "canSubdivide(uint256)": "infinite",
        "getApproved(uint256)": "infinite",
        "getDeedInfo(uint256)": "infinite",
        "hasAdminRole()": "infinite",
        "hasRole(bytes32,address)": "infinite",
        "hasValidatorRole()": "infinite",
        "initialize(address)": "infinite",
        "isApprovedForAll(address,address)": "infinite",
        "mintAsset(address,string,uint8)": "infinite",
        "name()": "infinite",
        "nextDeedId()": "2406",
        "ownerOf(uint256)": "infinite",
        "safeTransferFrom(address,address,uint256)": "infinite",
        "safeTransferFrom(address,address,uint256,bytes)": "infinite",
        "setApprovalForAll(address,bool)": "infinite",
        "setAssetType(uint256,uint8)": "infinite",
        "setAssetValidation(uint256,bool)": "infinite",
        "setIpfsDetailsHash(uint256,string)": "infinite",
        "supportsInterface(bytes4)": "infinite",
        "symbol()": "infinite",
        "tokenURI(uint256)": "infinite",
        "transferFrom(address,address,uint256)": "infinite"
      },
      "internal": {
        "_setAssetValidation(uint256,bool)": "infinite"
      }
    },
    "methodIdentifiers": {
      "approve(address,uint256)": "095ea7b3",
      "balanceOf(address)": "70a08231",
      "burn(uint256)": "42966c68",
      "canSubdivide(uint256)": "b82c3569",
      "getApproved(uint256)": "081812fc",
      "getDeedInfo(uint256)": "62d402bc",
      "hasAdminRole()": "b99c23e3",
      "hasRole(bytes32,address)": "91d14854",
      "hasValidatorRole()": "89b9e75f",
      "initialize(address)": "c4d66de8",
      "isApprovedForAll(address,address)": "e985e9c5",
      "mintAsset(address,string,uint8)": "1a6c41e2",
      "name()": "06fdde03",
      "nextDeedId()": "985e3a64",
      "ownerOf(uint256)": "6352211e",
      "safeTransferFrom(address,address,uint256)": "42842e0e",
      "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
      "setApprovalForAll(address,bool)": "a22cb465",
      "setAssetType(uint256,uint8)": "682ece02",
      "setAssetValidation(uint256,bool)": "6f6c15dd",
      "setIpfsDetailsHash(uint256,string)": "f1bc6673",
      "supportsInterface(bytes4)": "01ffc9a7",
      "symbol()": "95d89b41",
      "tokenURI(uint256)": "c87b56dd",
      "transferFrom(address,address,uint256)": "23b872dd"
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum DeedNFT.AssetType\",\"name\":\"newAssetType\",\"type\":\"uint8\"}],\"name\":\"DeedNFTAssetTypeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deedId\",\"type\":\"uint256\"}],\"name\":\"DeedNFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deedId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum DeedNFT.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isValidated\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"indexed\":false,\"internalType\":\"struct DeedNFT.DeedInfo\",\"name\":\"deedInfo\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"DeedNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newIpfsDetailsHash\",\"type\":\"string\"}],\"name\":\"DeedNFTUriChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"DeedNFTValidatedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"canSubdivide\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"getDeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DeedNFT.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isValidated\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct DeedNFT.DeedInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasAdminRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasValidatorRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_ipfsDetailsHash\",\"type\":\"string\"},{\"internalType\":\"enum DeedNFT.AssetType\",\"name\":\"_assetType\",\"type\":\"uint8\"}],\"name\":\"mintAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDeedId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deedId\",\"type\":\"uint256\"},{\"internalType\":\"enum DeedNFT.AssetType\",\"name\":\"_assetType\",\"type\":\"uint8\"}],\"name\":\"setAssetType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deedId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isValid\",\"type\":\"bool\"}],\"name\":\"setAssetValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deedId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsDetailsHash\",\"type\":\"string\"}],\"name\":\"setIpfsDetailsHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deedId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DeedNFT.sol\":\"DeedNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48efca78ce4e1a9f74d3ca8539bb53d04b116e507c10cd9e0df6105b8a6ae420\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721Upgradeable} from \\\"../ERC721Upgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"@openzeppelin/contracts/interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, IERC4906, ERC721Upgradeable {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721URIStorage\\n    struct ERC721URIStorageStorage {\\n        // Optional mapping for token URIs\\n        mapping(uint256 tokenId => string) _tokenURIs;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721URIStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721URIStorageStorageLocation = 0x0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900;\\n\\n    function _getERC721URIStorageStorage() private pure returns (ERC721URIStorageStorage storage $) {\\n        assembly {\\n            $.slot := ERC721URIStorageStorageLocation\\n        }\\n    }\\n\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        ERC721URIStorageStorage storage $ = _getERC721URIStorageStorage();\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = $._tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        ERC721URIStorageStorage storage $ = _getERC721URIStorageStorage();\\n        $._tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x7e68925d3373bd2baa7ac36839c464b2e77b67764201c4e0196d62699ee220b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/AccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract AccessManager is AccessControlUpgradeable {\\r\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\r\\n    bytes32 public constant AGENT_ROLE = keccak256(\\\"AGENT_ROLE\\\");\\r\\n    uint256[48] __gap;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address admin) public initializer {\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     * @param _functionSig The signature of the function to be called\\r\\n     */\\r\\n    modifier functionRoleOrAdmin(bytes32 _functionSig) {\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) || hasRole(_functionSig, _msgSender()),\\r\\n            \\\"[AccessManagement] Only the Admin or function granted user can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a validator to the contract\\r\\n     */\\r\\n    function addValidator(address _validator) public functionRoleOrAdmin(this.addValidator.selector) {\\r\\n        _grantRole(VALIDATOR_ROLE, _validator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a validator from the contract\\r\\n     */\\r\\n    function removeValidator(address _validator) public functionRoleOrAdmin(this.removeValidator.selector) {\\r\\n        _revokeRole(VALIDATOR_ROLE, _validator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has the admin role\\r\\n     */\\r\\n    function hasAdminRole(address _address) public view returns (bool) {\\r\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has the validator role\\r\\n     * @param _address The address to check\\r\\n     */\\r\\n    function hasValidatorRole(address _address) public view returns (bool) {\\r\\n        return hasRole(VALIDATOR_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(\\r\\n        bytes4 _interfaceId\\r\\n    ) public view virtual override(AccessControlUpgradeable) returns (bool) {\\r\\n        return super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract AccessManagerBase is ContextUpgradeable {\\r\\n    AccessManager accessManager;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address _accessManager) public virtual initializer {\\r\\n        accessManager = AccessManager(_accessManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to admin only\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.DEFAULT_ADMIN_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the admin can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to validator only\\r\\n     */\\r\\n    modifier onlyValidator() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.VALIDATOR_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the validator can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to validator only\\r\\n     */\\r\\n    modifier onlyAgent() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.AGENT_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the agent can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     */\\r\\n    modifier onlyRole(bytes32 _role) {\\r\\n        require(accessManager.hasRole(_role, _msgSender()), \\\"[AccessManager] Only the validator can interact\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     * @param _functionSig The signature of the function to be called\\r\\n     */\\r\\n    modifier functionRoleOrAdmin(bytes32 _functionSig) {\\r\\n        require(\\r\\n            hasRole(accessManager.DEFAULT_ADMIN_ROLE(), _msgSender()) || hasRole(_functionSig, _msgSender()),\\r\\n            \\\"[AccessManagement] Only the Admin or function granted user can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function hasAdminRole() public view returns (bool) {\\r\\n        return accessManager.hasAdminRole(_msgSender());\\r\\n    }\\r\\n\\r\\n    function hasValidatorRole() public view returns (bool) {\\r\\n        return accessManager.hasValidatorRole(_msgSender());\\r\\n    }\\r\\n\\r\\n    function hasRole(bytes32 _role, address _address) public view returns (bool) {\\r\\n        return accessManager.hasRole(_role, _address);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x31dbc064ddac547f070000ce2424c1c2110ef1d5e1c263cc2841ee9e77bc3e9d\",\"license\":\"AGPL-3.0\"},\"contracts/DeedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./AccessManager.sol\\\";\\r\\n\\r\\ncontract DeedNFT is ERC721Upgradeable, ERC721URIStorageUpgradeable, AccessManagerBase {\\r\\n    struct DeedInfo {\\r\\n        AssetType assetType;\\r\\n        bool isValidated;\\r\\n        uint256[10] __gap;\\r\\n    }\\r\\n\\r\\n    uint256 public nextDeedId;\\r\\n    mapping(uint256 => DeedInfo) private deedInfoMap;\\r\\n    uint256[36] __gap;\\r\\n\\r\\n    enum AssetType {\\r\\n        Land,\\r\\n        Vehicle,\\r\\n        Estate,\\r\\n        CommercialEquipment\\r\\n    }\\r\\n\\r\\n    event DeedNFTMinted(uint256 deedId, DeedInfo deedInfo, address minter, string uri);\\r\\n    event DeedNFTBurned(uint256 deedId);\\r\\n    event DeedNFTValidatedChanged(uint256 deedId, bool isValid);\\r\\n    event DeedNFTUriChanged(uint256 deedId, string newIpfsDetailsHash);\\r\\n    event DeedNFTAssetTypeChanged(uint256 deedId, AssetType newAssetType);\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address _accessManager) public override(AccessManagerBase) initializer {\\r\\n        __ERC721URIStorage_init();\\r\\n        __ERC721_init(\\\"DeedNFT\\\", \\\"DEED\\\");\\r\\n        AccessManagerBase.initialize(_accessManager);\\r\\n        nextDeedId = 1;\\r\\n    }\\r\\n\\r\\n    modifier deedExists(uint256 _deedId) {\\r\\n        require(\\r\\n            _ownerOf(_deedId) != address(0),\\r\\n            string.concat(\\\"[DeedNFT] Deed does not exist with id \\\", Strings.toString(_deedId))\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner(uint256 _deedId) {\\r\\n        require(\\r\\n            _msgSender() == _ownerOf(_deedId),\\r\\n            string.concat(\\\"[DeedNFT] Must be owner of the Deed with id \\\", Strings.toString(_deedId))\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mintAsset(\\r\\n        address _owner,\\r\\n        string memory _ipfsDetailsHash,\\r\\n        AssetType _assetType\\r\\n    ) public onlyValidator returns (uint256) {\\r\\n        _mint(_owner, nextDeedId);\\r\\n\\r\\n        DeedInfo storage deedInfo = deedInfoMap[nextDeedId];\\r\\n        deedInfo.assetType = _assetType;\\r\\n        _setTokenURI(nextDeedId, _ipfsDetailsHash);\\r\\n        deedInfo.isValidated = true;\\r\\n        emit DeedNFTMinted(nextDeedId, deedInfo, _msgSender(), _ipfsDetailsHash);\\r\\n        nextDeedId = nextDeedId + 1;\\r\\n        return nextDeedId;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _deedId) public onlyOwner(_deedId) {\\r\\n        _burn(_deedId);\\r\\n        nextDeedId -= 1;\\r\\n        delete deedInfoMap[_deedId];\\r\\n        emit DeedNFTBurned(_deedId);\\r\\n    }\\r\\n\\r\\n    function setAssetValidation(uint256 _deedId, bool _isValid) public onlyValidator {\\r\\n        require(_ownerOf(_deedId) != _msgSender(), \\\"[DeedNFT] Owner cannot validate their own asset\\\");\\r\\n        _setAssetValidation(_deedId, _isValid);\\r\\n    }\\r\\n\\r\\n    function setIpfsDetailsHash(\\r\\n        uint256 _deedId,\\r\\n        string memory _ipfsDetailsHash\\r\\n    ) public virtual deedExists(_deedId) onlyOwner(_deedId) {\\r\\n        _setTokenURI(_deedId, _ipfsDetailsHash);\\r\\n        _setAssetValidation(_deedId, false);\\r\\n        emit DeedNFTUriChanged(_deedId, _ipfsDetailsHash);\\r\\n    }\\r\\n\\r\\n    function setAssetType(uint256 _deedId, AssetType _assetType) public deedExists(_deedId) onlyOwner(_deedId) {\\r\\n        DeedInfo storage deedInfo = deedInfoMap[_deedId];\\r\\n        deedInfo.assetType = _assetType;\\r\\n        _setAssetValidation(_deedId, false);\\r\\n        emit DeedNFTAssetTypeChanged(_deedId, _assetType);\\r\\n    }\\r\\n\\r\\n    function getDeedInfo(uint256 _deedId) public view deedExists(_deedId) returns (DeedInfo memory) {\\r\\n        return deedInfoMap[_deedId];\\r\\n    }\\r\\n\\r\\n    function canSubdivide(uint256 _deedId) external view returns (bool) {\\r\\n        AssetType assetType = getDeedInfo(_deedId).assetType;\\r\\n        return assetType == AssetType.Land || assetType == AssetType.Estate;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 _interfaceId\\r\\n    ) public view virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable) returns (bool) {\\r\\n        return super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 _deedId\\r\\n    ) public view override(ERC721Upgradeable, ERC721URIStorageUpgradeable) returns (string memory) {\\r\\n        return super.tokenURI(_deedId);\\r\\n    }\\r\\n\\r\\n    function _setAssetValidation(uint256 _deedId, bool _isValid) internal {\\r\\n        DeedInfo storage deedInfo = deedInfoMap[_deedId];\\r\\n        deedInfo.isValidated = _isValid;\\r\\n        emit DeedNFTValidatedChanged(_deedId, _isValid);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x704f7429e900c17cb1a6006081469e0b4943fe21cfbfb1df587de916e3e38d92\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "storageLayout": {
    "storage": [
      {
        "astId": 4336,
        "contract": "contracts/DeedNFT.sol:DeedNFT",
        "label": "accessManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AccessManager)4331"
      },
      {
        "astId": 4515,
        "contract": "contracts/DeedNFT.sol:DeedNFT",
        "label": "nextDeedId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4520,
        "contract": "contracts/DeedNFT.sol:DeedNFT",
        "label": "deedInfoMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(DeedInfo)4513_storage)"
      },
      {
        "astId": 4524,
        "contract": "contracts/DeedNFT.sol:DeedNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)36_storage"
      }
    ],
    "types": {
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)36_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[36]",
        "numberOfBytes": "1152"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AccessManager)4331": {
        "encoding": "inplace",
        "label": "contract AccessManager",
        "numberOfBytes": "20"
      },
      "t_enum(AssetType)4529": {
        "encoding": "inplace",
        "label": "enum DeedNFT.AssetType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(DeedInfo)4513_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DeedNFT.DeedInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DeedInfo)4513_storage"
      },
      "t_struct(DeedInfo)4513_storage": {
        "encoding": "inplace",
        "label": "struct DeedNFT.DeedInfo",
        "members": [
          {
            "astId": 4506,
            "contract": "contracts/DeedNFT.sol:DeedNFT",
            "label": "assetType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AssetType)4529"
          },
          {
            "astId": 4508,
            "contract": "contracts/DeedNFT.sol:DeedNFT",
            "label": "isValidated",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4512,
            "contract": "contracts/DeedNFT.sol:DeedNFT",
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721Upgradeable} from \\\"../ERC721Upgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"@openzeppelin/contracts/interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, IERC4906, ERC721Upgradeable {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721URIStorage\\n    struct ERC721URIStorageStorage {\\n        // Optional mapping for token URIs\\n        mapping(uint256 tokenId => string) _tokenURIs;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721URIStorage\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721URIStorageStorageLocation = 0x0542a41881ee128a365a727b282c86fa859579490b9bb45aab8503648c8e7900;\\n\\n    function _getERC721URIStorageStorage() private pure returns (ERC721URIStorageStorage storage $) {\\n        assembly {\\n            $.slot := ERC721URIStorageStorageLocation\\n        }\\n    }\\n\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        ERC721URIStorageStorage storage $ = _getERC721URIStorageStorage();\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = $._tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        ERC721URIStorageStorage storage $ = _getERC721URIStorageStorage();\\n        $._tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC4906.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"contracts/AccessManager.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract AccessManager is AccessControlUpgradeable {\\r\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\r\\n    bytes32 public constant AGENT_ROLE = keccak256(\\\"AGENT_ROLE\\\");\\r\\n    uint256[48] __gap;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address admin) public initializer {\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     * @param _functionSig The signature of the function to be called\\r\\n     */\\r\\n    modifier functionRoleOrAdmin(bytes32 _functionSig) {\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) || hasRole(_functionSig, _msgSender()),\\r\\n            \\\"[AccessManagement] Only the Admin or function granted user can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a validator to the contract\\r\\n     */\\r\\n    function addValidator(address _validator) public functionRoleOrAdmin(this.addValidator.selector) {\\r\\n        _grantRole(VALIDATOR_ROLE, _validator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a validator from the contract\\r\\n     */\\r\\n    function removeValidator(address _validator) public functionRoleOrAdmin(this.removeValidator.selector) {\\r\\n        _revokeRole(VALIDATOR_ROLE, _validator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has the admin role\\r\\n     */\\r\\n    function hasAdminRole(address _address) public view returns (bool) {\\r\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address has the validator role\\r\\n     * @param _address The address to check\\r\\n     */\\r\\n    function hasValidatorRole(address _address) public view returns (bool) {\\r\\n        return hasRole(VALIDATOR_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(\\r\\n        bytes4 _interfaceId\\r\\n    ) public view virtual override(AccessControlUpgradeable) returns (bool) {\\r\\n        return super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract AccessManagerBase is ContextUpgradeable {\\r\\n    AccessManager accessManager;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address _accessManager) public virtual initializer {\\r\\n        accessManager = AccessManager(_accessManager);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to admin only\\r\\n     */\\r\\n    modifier onlyAdmin() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.DEFAULT_ADMIN_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the admin can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to validator only\\r\\n     */\\r\\n    modifier onlyValidator() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.VALIDATOR_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the validator can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to restrict to validator only\\r\\n     */\\r\\n    modifier onlyAgent() {\\r\\n        require(\\r\\n            accessManager.hasRole(accessManager.AGENT_ROLE(), _msgSender()),\\r\\n            \\\"[AccessManagement] Only the agent can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     */\\r\\n    modifier onlyRole(bytes32 _role) {\\r\\n        require(accessManager.hasRole(_role, _msgSender()), \\\"[AccessManager] Only the validator can interact\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Use this modifier to manage the fonction access more granularly\\r\\n     * @param _functionSig The signature of the function to be called\\r\\n     */\\r\\n    modifier functionRoleOrAdmin(bytes32 _functionSig) {\\r\\n        require(\\r\\n            hasRole(accessManager.DEFAULT_ADMIN_ROLE(), _msgSender()) || hasRole(_functionSig, _msgSender()),\\r\\n            \\\"[AccessManagement] Only the Admin or function granted user can interact\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function hasAdminRole() public view returns (bool) {\\r\\n        return accessManager.hasAdminRole(_msgSender());\\r\\n    }\\r\\n\\r\\n    function hasValidatorRole() public view returns (bool) {\\r\\n        return accessManager.hasValidatorRole(_msgSender());\\r\\n    }\\r\\n\\r\\n    function hasRole(bytes32 _role, address _address) public view returns (bool) {\\r\\n        return accessManager.hasRole(_role, _address);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/DeedNFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./AccessManager.sol\\\";\\r\\n\\r\\ncontract DeedNFT is ERC721Upgradeable, ERC721URIStorageUpgradeable, AccessManagerBase {\\r\\n    struct DeedInfo {\\r\\n        AssetType assetType;\\r\\n        bool isValidated;\\r\\n        uint256[10] __gap;\\r\\n    }\\r\\n\\r\\n    uint256 public nextDeedId;\\r\\n    mapping(uint256 => DeedInfo) private deedInfoMap;\\r\\n    uint256[36] __gap;\\r\\n\\r\\n    enum AssetType {\\r\\n        Land,\\r\\n        Vehicle,\\r\\n        Estate,\\r\\n        CommercialEquipment\\r\\n    }\\r\\n\\r\\n    event DeedNFTMinted(uint256 deedId, DeedInfo deedInfo, address minter, string uri);\\r\\n    event DeedNFTBurned(uint256 deedId);\\r\\n    event DeedNFTValidatedChanged(uint256 deedId, bool isValid);\\r\\n    event DeedNFTUriChanged(uint256 deedId, string newIpfsDetailsHash);\\r\\n    event DeedNFTAssetTypeChanged(uint256 deedId, AssetType newAssetType);\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(address _accessManager) public override(AccessManagerBase) initializer {\\r\\n        __ERC721URIStorage_init();\\r\\n        __ERC721_init(\\\"DeedNFT\\\", \\\"DEED\\\");\\r\\n        AccessManagerBase.initialize(_accessManager);\\r\\n        nextDeedId = 1;\\r\\n    }\\r\\n\\r\\n    modifier deedExists(uint256 _deedId) {\\r\\n        require(\\r\\n            _ownerOf(_deedId) != address(0),\\r\\n            string.concat(\\\"[DeedNFT] Deed does not exist with id \\\", Strings.toString(_deedId))\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner(uint256 _deedId) {\\r\\n        require(\\r\\n            _msgSender() == _ownerOf(_deedId),\\r\\n            string.concat(\\\"[DeedNFT] Must be owner of the Deed with id \\\", Strings.toString(_deedId))\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function mintAsset(\\r\\n        address _owner,\\r\\n        string memory _ipfsDetailsHash,\\r\\n        AssetType _assetType\\r\\n    ) public onlyValidator returns (uint256) {\\r\\n        _mint(_owner, nextDeedId);\\r\\n\\r\\n        DeedInfo storage deedInfo = deedInfoMap[nextDeedId];\\r\\n        deedInfo.assetType = _assetType;\\r\\n        _setTokenURI(nextDeedId, _ipfsDetailsHash);\\r\\n        deedInfo.isValidated = true;\\r\\n        emit DeedNFTMinted(nextDeedId, deedInfo, _msgSender(), _ipfsDetailsHash);\\r\\n        nextDeedId = nextDeedId + 1;\\r\\n        return nextDeedId;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _deedId) public onlyOwner(_deedId) {\\r\\n        _burn(_deedId);\\r\\n        nextDeedId -= 1;\\r\\n        delete deedInfoMap[_deedId];\\r\\n        emit DeedNFTBurned(_deedId);\\r\\n    }\\r\\n\\r\\n    function setAssetValidation(uint256 _deedId, bool _isValid) public onlyValidator {\\r\\n        require(_ownerOf(_deedId) != _msgSender(), \\\"[DeedNFT] Owner cannot validate their own asset\\\");\\r\\n        _setAssetValidation(_deedId, _isValid);\\r\\n    }\\r\\n\\r\\n    function setIpfsDetailsHash(\\r\\n        uint256 _deedId,\\r\\n        string memory _ipfsDetailsHash\\r\\n    ) public virtual deedExists(_deedId) onlyOwner(_deedId) {\\r\\n        _setTokenURI(_deedId, _ipfsDetailsHash);\\r\\n        _setAssetValidation(_deedId, false);\\r\\n        emit DeedNFTUriChanged(_deedId, _ipfsDetailsHash);\\r\\n    }\\r\\n\\r\\n    function setAssetType(uint256 _deedId, AssetType _assetType) public deedExists(_deedId) onlyOwner(_deedId) {\\r\\n        DeedInfo storage deedInfo = deedInfoMap[_deedId];\\r\\n        deedInfo.assetType = _assetType;\\r\\n        _setAssetValidation(_deedId, false);\\r\\n        emit DeedNFTAssetTypeChanged(_deedId, _assetType);\\r\\n    }\\r\\n\\r\\n    function getDeedInfo(uint256 _deedId) public view deedExists(_deedId) returns (DeedInfo memory) {\\r\\n        return deedInfoMap[_deedId];\\r\\n    }\\r\\n\\r\\n    function canSubdivide(uint256 _deedId) external view returns (bool) {\\r\\n        AssetType assetType = getDeedInfo(_deedId).assetType;\\r\\n        return assetType == AssetType.Land || assetType == AssetType.Estate;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 _interfaceId\\r\\n    ) public view virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable) returns (bool) {\\r\\n        return super.supportsInterface(_interfaceId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 _deedId\\r\\n    ) public view override(ERC721Upgradeable, ERC721URIStorageUpgradeable) returns (string memory) {\\r\\n        return super.tokenURI(_deedId);\\r\\n    }\\r\\n\\r\\n    function _setAssetValidation(uint256 _deedId, bool _isValid) internal {\\r\\n        DeedInfo storage deedInfo = deedInfoMap[_deedId];\\r\\n        deedInfo.isValidated = _isValid;\\r\\n        emit DeedNFTValidatedChanged(_deedId, _isValid);\\r\\n    }\\r\\n}\\r\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"metadata\",\n          \"evm.methodIdentifiers\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"evmVersion\": \"paris\",\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
  "solcInputHash": "a980e9cdb2ac4b65441ec1acc6b3b793",
  "tx": "0xe48800fdffd87bff9f05c8adc3c82c2454bf89730e14324b44a6a48a77b284c4"
}