// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DeedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DeedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DeedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DeedEntity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DeedEntity | null {
    return changetype<DeedEntity | null>(store.get_in_block("DeedEntity", id));
  }

  static load(id: string): DeedEntity | null {
    return changetype<DeedEntity | null>(store.get("DeedEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get minter(): Bytes {
    let value = this.get("minter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set minter(value: Bytes) {
    this.set("minter", Value.fromBytes(value));
  }

  get assetType(): i32 {
    let value = this.get("assetType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set assetType(value: i32) {
    this.set("assetType", Value.fromI32(value));
  }

  get isValidated(): boolean {
    let value = this.get("isValidated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isValidated(value: boolean) {
    this.set("isValidated", Value.fromBoolean(value));
  }

  get updatedAtTimestamp(): BigInt | null {
    let value = this.get("updatedAtTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAtTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAtTimestamp");
    } else {
      this.set("updatedAtTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get deedMetadata(): string {
    let value = this.get("deedMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set deedMetadata(value: string) {
    this.set("deedMetadata", Value.fromString(value));
  }
}

export class DeedMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DeedMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DeedMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DeedMetadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DeedMetadata | null {
    return changetype<DeedMetadata | null>(
      store.get_in_block("DeedMetadata", id)
    );
  }

  static load(id: string): DeedMetadata | null {
    return changetype<DeedMetadata | null>(store.get("DeedMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerInformation(): string {
    let value = this.get("ownerInformation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ownerInformation(value: string) {
    this.set("ownerInformation", Value.fromString(value));
  }

  get otherInformation(): string {
    let value = this.get("otherInformation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set otherInformation(value: string) {
    this.set("otherInformation", Value.fromString(value));
  }

  get propertyDetails(): string {
    let value = this.get("propertyDetails");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyDetails(value: string) {
    this.set("propertyDetails", Value.fromString(value));
  }
}

export class PropertyDetails extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PropertyDetails entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PropertyDetails must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PropertyDetails", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PropertyDetails | null {
    return changetype<PropertyDetails | null>(
      store.get_in_block("PropertyDetails", id)
    );
  }

  static load(id: string): PropertyDetails | null {
    return changetype<PropertyDetails | null>(store.get("PropertyDetails", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get propertyType(): string {
    let value = this.get("propertyType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyType(value: string) {
    this.set("propertyType", Value.fromString(value));
  }

  get propertyAddress(): string {
    let value = this.get("propertyAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyAddress(value: string) {
    this.set("propertyAddress", Value.fromString(value));
  }

  get propertyCity(): string {
    let value = this.get("propertyCity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyCity(value: string) {
    this.set("propertyCity", Value.fromString(value));
  }

  get propertyState(): string {
    let value = this.get("propertyState");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyState(value: string) {
    this.set("propertyState", Value.fromString(value));
  }

  get propertySize(): string | null {
    let value = this.get("propertySize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set propertySize(value: string | null) {
    if (!value) {
      this.unset("propertySize");
    } else {
      this.set("propertySize", Value.fromString(<string>value));
    }
  }

  get propertySubType(): string | null {
    let value = this.get("propertySubType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set propertySubType(value: string | null) {
    if (!value) {
      this.unset("propertySubType");
    } else {
      this.set("propertySubType", Value.fromString(<string>value));
    }
  }

  get propertyZoning(): string | null {
    let value = this.get("propertyZoning");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set propertyZoning(value: string | null) {
    if (!value) {
      this.unset("propertyZoning");
    } else {
      this.set("propertyZoning", Value.fromString(<string>value));
    }
  }

  get propertyPurchaseContract(): string | null {
    let value = this.get("propertyPurchaseContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set propertyPurchaseContract(value: string | null) {
    if (!value) {
      this.unset("propertyPurchaseContract");
    } else {
      this.set("propertyPurchaseContract", Value.fromString(<string>value));
    }
  }

  get propertyDeedOrTitle(): string {
    let value = this.get("propertyDeedOrTitle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set propertyDeedOrTitle(value: string) {
    this.set("propertyDeedOrTitle", Value.fromString(value));
  }

  get propertyImages(): Array<string> | null {
    let value = this.get("propertyImages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set propertyImages(value: Array<string> | null) {
    if (!value) {
      this.unset("propertyImages");
    } else {
      this.set("propertyImages", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class OwnerInformation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnerInformation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OwnerInformation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnerInformation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OwnerInformation | null {
    return changetype<OwnerInformation | null>(
      store.get_in_block("OwnerInformation", id)
    );
  }

  static load(id: string): OwnerInformation | null {
    return changetype<OwnerInformation | null>(
      store.get("OwnerInformation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerType(): string {
    let value = this.get("ownerType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ownerType(value: string) {
    this.set("ownerType", Value.fromString(value));
  }

  get ownerName(): string {
    let value = this.get("ownerName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ownerName(value: string) {
    this.set("ownerName", Value.fromString(value));
  }

  get entityName(): string | null {
    let value = this.get("entityName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set entityName(value: string | null) {
    if (!value) {
      this.unset("entityName");
    } else {
      this.set("entityName", Value.fromString(<string>value));
    }
  }

  get ownerPosition(): string | null {
    let value = this.get("ownerPosition");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ownerPosition(value: string | null) {
    if (!value) {
      this.unset("ownerPosition");
    } else {
      this.set("ownerPosition", Value.fromString(<string>value));
    }
  }

  get ownerEntityType(): string | null {
    let value = this.get("ownerEntityType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ownerEntityType(value: string | null) {
    if (!value) {
      this.unset("ownerEntityType");
    } else {
      this.set("ownerEntityType", Value.fromString(<string>value));
    }
  }

  get supportingDoc(): Array<string> | null {
    let value = this.get("supportingDoc");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set supportingDoc(value: Array<string> | null) {
    if (!value) {
      this.unset("supportingDoc");
    } else {
      this.set("supportingDoc", Value.fromStringArray(<Array<string>>value));
    }
  }

  get operatingAgreement(): string | null {
    let value = this.get("operatingAgreement");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set operatingAgreement(value: string | null) {
    if (!value) {
      this.unset("operatingAgreement");
    } else {
      this.set("operatingAgreement", Value.fromString(<string>value));
    }
  }

  get proofBill(): string | null {
    let value = this.get("proofBill");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proofBill(value: string | null) {
    if (!value) {
      this.unset("proofBill");
    } else {
      this.set("proofBill", Value.fromString(<string>value));
    }
  }

  get articleIncorporation(): string {
    let value = this.get("articleIncorporation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set articleIncorporation(value: string) {
    this.set("articleIncorporation", Value.fromString(value));
  }

  get ids(): string {
    let value = this.get("ids");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ids(value: string) {
    this.set("ids", Value.fromString(value));
  }
}

export class OtherInformation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OtherInformation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OtherInformation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OtherInformation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OtherInformation | null {
    return changetype<OtherInformation | null>(
      store.get_in_block("OtherInformation", id)
    );
  }

  static load(id: string): OtherInformation | null {
    return changetype<OtherInformation | null>(
      store.get("OtherInformation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockchain(): string {
    let value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get wrapper(): string {
    let value = this.get("wrapper");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set wrapper(value: string) {
    this.set("wrapper", Value.fromString(value));
  }
}

export class FileInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FileInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FileInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FileInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FileInfo | null {
    return changetype<FileInfo | null>(store.get_in_block("FileInfo", id));
  }

  static load(id: string): FileInfo | null {
    return changetype<FileInfo | null>(store.get("FileInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): string | null {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hash(value: string | null) {
    if (!value) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get size(): BigInt | null {
    let value = this.get("size");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set size(value: BigInt | null) {
    if (!value) {
      this.unset("size");
    } else {
      this.set("size", Value.fromBigInt(<BigInt>value));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get lastModified(): BigInt | null {
    let value = this.get("lastModified");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastModified(value: BigInt | null) {
    if (!value) {
      this.unset("lastModified");
    } else {
      this.set("lastModified", Value.fromBigInt(<BigInt>value));
    }
  }

  get restricted(): boolean {
    let value = this.get("restricted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set restricted(value: boolean) {
    this.set("restricted", Value.fromBoolean(value));
  }
}
