// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DeedNFTAssetTypeSet extends ethereum.Event {
  get params(): DeedNFTAssetTypeSet__Params {
    return new DeedNFTAssetTypeSet__Params(this);
  }
}

export class DeedNFTAssetTypeSet__Params {
  _event: DeedNFTAssetTypeSet;

  constructor(event: DeedNFTAssetTypeSet) {
    this._event = event;
  }

  get deedId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAssetType(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class DeedNFTAssetValidationSet extends ethereum.Event {
  get params(): DeedNFTAssetValidationSet__Params {
    return new DeedNFTAssetValidationSet__Params(this);
  }
}

export class DeedNFTAssetValidationSet__Params {
  _event: DeedNFTAssetValidationSet;

  constructor(event: DeedNFTAssetValidationSet) {
    this._event = event;
  }

  get deedId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isValid(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class DeedNFTBurned extends ethereum.Event {
  get params(): DeedNFTBurned__Params {
    return new DeedNFTBurned__Params(this);
  }
}

export class DeedNFTBurned__Params {
  _event: DeedNFTBurned;

  constructor(event: DeedNFTBurned) {
    this._event = event;
  }

  get deedId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DeedNFTIpfsDetailsSet extends ethereum.Event {
  get params(): DeedNFTIpfsDetailsSet__Params {
    return new DeedNFTIpfsDetailsSet__Params(this);
  }
}

export class DeedNFTIpfsDetailsSet__Params {
  _event: DeedNFTIpfsDetailsSet;

  constructor(event: DeedNFTIpfsDetailsSet) {
    this._event = event;
  }

  get deedId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newIpfsDetailsHash(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class DeedNFTMinted extends ethereum.Event {
  get params(): DeedNFTMinted__Params {
    return new DeedNFTMinted__Params(this);
  }
}

export class DeedNFTMinted__Params {
  _event: DeedNFTMinted;

  constructor(event: DeedNFTMinted) {
    this._event = event;
  }

  get deedId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get deedInfo(): DeedNFTMintedDeedInfoStruct {
    return changetype<DeedNFTMintedDeedInfoStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get minter(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DeedNFTMintedDeedInfoStruct extends ethereum.Tuple {
  get assetType(): i32 {
    return this[0].toI32();
  }

  get isValidated(): boolean {
    return this[1].toBoolean();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DeedNFT__getDeedInfoResultValue0Struct extends ethereum.Tuple {
  get assetType(): i32 {
    return this[0].toI32();
  }

  get isValidated(): boolean {
    return this[1].toBoolean();
  }
}

export class DeedNFT extends ethereum.SmartContract {
  static bind(address: Address): DeedNFT {
    return new DeedNFT("DeedNFT", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canSubdivide(_deedId: BigInt): boolean {
    let result = super.call("canSubdivide", "canSubdivide(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_deedId)
    ]);

    return result[0].toBoolean();
  }

  try_canSubdivide(_deedId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canSubdivide", "canSubdivide(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_deedId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeedInfo(_deedId: BigInt): DeedNFT__getDeedInfoResultValue0Struct {
    let result = super.call(
      "getDeedInfo",
      "getDeedInfo(uint256):((uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(_deedId)]
    );

    return changetype<DeedNFT__getDeedInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDeedInfo(
    _deedId: BigInt
  ): ethereum.CallResult<DeedNFT__getDeedInfoResultValue0Struct> {
    let result = super.tryCall(
      "getDeedInfo",
      "getDeedInfo(uint256):((uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(_deedId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<DeedNFT__getDeedInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  hasAdminRole(): boolean {
    let result = super.call("hasAdminRole", "hasAdminRole():(bool)", []);

    return result[0].toBoolean();
  }

  try_hasAdminRole(): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasAdminRole", "hasAdminRole():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRole(_role: Bytes, _address: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(_role),
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(_role: Bytes, _address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(_role),
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasValidatorRole(): boolean {
    let result = super.call(
      "hasValidatorRole",
      "hasValidatorRole():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_hasValidatorRole(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasValidatorRole",
      "hasValidatorRole():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintAsset(
    _owner: Address,
    _ipfsDetailsHash: string,
    _assetType: i32
  ): BigInt {
    let result = super.call(
      "mintAsset",
      "mintAsset(address,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromString(_ipfsDetailsHash),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_assetType))
      ]
    );

    return result[0].toBigInt();
  }

  try_mintAsset(
    _owner: Address,
    _ipfsDetailsHash: string,
    _assetType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintAsset",
      "mintAsset(address,string,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromString(_ipfsDetailsHash),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_assetType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextDeedId(): BigInt {
    let result = super.call("nextDeedId", "nextDeedId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextDeedId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextDeedId", "nextDeedId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(_deedId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_deedId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_deedId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_deedId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _accessManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _deedId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class MintAssetCall extends ethereum.Call {
  get inputs(): MintAssetCall__Inputs {
    return new MintAssetCall__Inputs(this);
  }

  get outputs(): MintAssetCall__Outputs {
    return new MintAssetCall__Outputs(this);
  }
}

export class MintAssetCall__Inputs {
  _call: MintAssetCall;

  constructor(call: MintAssetCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ipfsDetailsHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _assetType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class MintAssetCall__Outputs {
  _call: MintAssetCall;

  constructor(call: MintAssetCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetAssetTypeCall extends ethereum.Call {
  get inputs(): SetAssetTypeCall__Inputs {
    return new SetAssetTypeCall__Inputs(this);
  }

  get outputs(): SetAssetTypeCall__Outputs {
    return new SetAssetTypeCall__Outputs(this);
  }
}

export class SetAssetTypeCall__Inputs {
  _call: SetAssetTypeCall;

  constructor(call: SetAssetTypeCall) {
    this._call = call;
  }

  get _deedId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _assetType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetAssetTypeCall__Outputs {
  _call: SetAssetTypeCall;

  constructor(call: SetAssetTypeCall) {
    this._call = call;
  }
}

export class SetAssetValidationCall extends ethereum.Call {
  get inputs(): SetAssetValidationCall__Inputs {
    return new SetAssetValidationCall__Inputs(this);
  }

  get outputs(): SetAssetValidationCall__Outputs {
    return new SetAssetValidationCall__Outputs(this);
  }
}

export class SetAssetValidationCall__Inputs {
  _call: SetAssetValidationCall;

  constructor(call: SetAssetValidationCall) {
    this._call = call;
  }

  get _deedId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _isValid(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAssetValidationCall__Outputs {
  _call: SetAssetValidationCall;

  constructor(call: SetAssetValidationCall) {
    this._call = call;
  }
}

export class SetIpfsDetailsHashCall extends ethereum.Call {
  get inputs(): SetIpfsDetailsHashCall__Inputs {
    return new SetIpfsDetailsHashCall__Inputs(this);
  }

  get outputs(): SetIpfsDetailsHashCall__Outputs {
    return new SetIpfsDetailsHashCall__Outputs(this);
  }
}

export class SetIpfsDetailsHashCall__Inputs {
  _call: SetIpfsDetailsHashCall;

  constructor(call: SetIpfsDetailsHashCall) {
    this._call = call;
  }

  get _deedId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _ipfsDetailsHash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetIpfsDetailsHashCall__Outputs {
  _call: SetIpfsDetailsHashCall;

  constructor(call: SetIpfsDetailsHashCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
